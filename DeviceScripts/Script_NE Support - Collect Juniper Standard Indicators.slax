/* 	
	This Script collects all the needed data for a Juniper Case and sends them to a remote server. Sends RSI and /var/log/ *.
*/

/*
	Author: bcersows
	Version: 1.1
	Date: 14.08.2014
	Last Modified By: bcersows
	###Script_NE Support - Collect Juniper Standard Indicators.slax;v1.1;2014.08.14
*/

/*
	Changelog:
	----------
	1.1; 14.08.2014: 
		- Set default parameters to the ones of NSO.
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";
import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "NE Support - Collect Juniper Standard Indicators" */
/* @DESCRIPTION = "This Script collects all the needed data for a Juniper Case and sends them to a remote server. Sends RSI and /var/log/ *." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'Server','defaultvalue':'153.17.33.219'},{'name':'outputPath','defaultvalue':'/zfs/ftp/acc-jun/incoming'},{'name':'username','defaultvalue':'bicobng'},{'name':'caseNumber','defaultvalue':'123-456-789'}]" */

mvar $counter = 0;
mvar $output = "";
mvar $results;
mvar $contentToWrite = "";

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "Server";
		<description> "Remote server. Standard servers are 153.17.33.219 and 153.17.33.220.";
	}
	<argument> {
		<name> "outputPath";
		<description> "Path and filename of output file.";
	}
	<argument> {
		<name> "username";
		<description> "Username to use on remote server.";
	}
	<argument> {
		<name> "caseNumber";
		<description> "Case number of Juniper.";
	}
}
param $CONTEXT;
param $Server;
param $outputPath;
param $username;
param $caseNumber;

match / {
	<op-script-results> {
		
		mvar $localtime = date:date-time();
	
		var $myDevice = {
			if ( false() ) {
				expr $DEVICE;
			} else {
				expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
			}
		}
		
		var $connection = jcs:open();
		if ($connection/..//xnm:error) {
			<error> "Error connecting on mgd on this RE";
			<xsl:message terminate="yes"> ;
		}
		
		<output> {
			<HTML> {
				<HEAD> {
					<title> "Informationen ueber BNG " _ $myDevice _ ".";
					copy-of bcersows:insertCSS();
					copy-of bcersows:insertJS();
				}
				<BODY> {
					copy-of bcersows:insertHeaderBig( $myDevice );
					copy-of bcersows:insertCompletionTest();
					
					if ( $connection ) { } else {	
						<div class="error"> {
							expr "Konnte keine Verbindung aufbauen."; <br>;
							expr "Abbruch folgt.";
						}
					}	

					copy-of bcersows:insertSoftwareInformation( $connection );
					
					var $destinationPath = {
						if ( $Server != "" ) {
							expr "scp://";
							if ( $username != "" ) {
								expr $username;
								expr "@";
							}
							expr $Server _ "";
						}
						expr $outputPath;
						if ( substring( $outputPath , string-length( $outputPath ) , 1 ) != "/" ) { 
							expr "/"; 
						}
					}
					var $outputFileTime = date:year() _ "" _ format-number( date:month-in-year(), "00" ) _ "" _ format-number( date:day-in-month(), "00" );	
					
					set $results = jcs:execute( $connection, "get-support-information" );
					call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
					
					<div> {
						<p class="bold">{
							expr "Support Information:";
						}
						expr "The whole output of the command 'request support information' can be opened via the button.";
						
						<p class="hiddenButton" onclick="toggle(this, 1);">{
							expr "Show command response";
							<span id="hiddenButton_1_span" class="hiddenButtonSpan"> { expr ">"; }
						}
						<div id="hiddenDiv_1" class="hidden data" style="display: none;"> {
							for-each ( jcs:break-lines( $results ) ) {
								expr .; <br>;
							}	
						}						
						
						copy-of bcersows:insertBackButton( true() );
					}
					
					set $contentToWrite = str:replace( $results, "\n", "\r\n" );
					/* write file */
					var  $write-rpc = <file-put> {
						<filename> $destinationPath _ $caseNumber _ "_" _ $myDevice _ "_rsi_" _ $outputFileTime _ "_output";
						<permission> "644";
						<encoding> "ascii";
						<delete-if-exist>;
						<file-contents> $contentToWrite;
					}
					var $rsiResult = jcs:execute( $connection, $write-rpc );
					if ( $rsiResult//self::xnm:error ) {
						<div class="error"> {
							<span class="bold"> { expr "Error while creating RSI file."; } <br>;
							for-each ( $rsiResult//self::xnm:error ) {
								expr .; <br>;
							}
						}	
					}
					
					/* archive and send files */
					var  $archiveRpc = <file-archive> {
						<compress>;
						<destination> $destinationPath _ $caseNumber _ "_" _ $myDevice _ "_Master_RE_log_" _ $outputFileTime _ ".tgz";
						<source> "/var/log/*";
					}
					var $archiveResult = jcs:execute( $connection, $archiveRpc );
					if ( $archiveResult//self::xnm:error ) {
						<div class="error"> {
							<span class="bold"> { expr "Error while archiving."; } <br>;
							for-each ( $archiveResult//self::xnm:error ) {
								expr .; <br>;
							}
						}	
					}
					
					
					<div> {
						<p class="bold subheader">{
							<span class="left"> { expr "Output"; }
						}
						
						<p> {
							expr "Destination path: "; <span class="italic"> $destinationPath;
						}
						
						<div> {
							if( $rsiResult//self::xnm:error ) {
								<span style="background-color: RED;"> {
									expr "There were errors while performing the RSI operation. They can be seen above.";
								}
							} else {
								<span style="background-color: GREEN;"> {
									expr "The rsi file was created. :)";
								}
							}
						}
						
						<div> {
							if( $archiveResult//self::xnm:error ) {
								<span style="background-color: RED;"> {
									expr "There were errors while performing the archiving operation. They can be seen above.";
								}
							} else {
								<span style="background-color: GREEN;"> {
									expr "The archived files were copied. :)";
								}
							}
						}
						
						copy-of bcersows:insertBackButton();
					}
					
					var $duration = date:seconds() - date:seconds( $localtime );
					<div class="wholeLine"> {
						<span class="left italic unselectable"> "vs. 1.1";
						expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
					}					
				}
			}
		}
		
		set $unlock-results = jcs:execute( $connection, "unlock-database" );
		expr jcs:close( $connection );
		/*<output> "------------------------------------------------";
		<output> " ****  ****  **** End of script ****  ****  ****";
		<output> "------------------------------------------------";*/
		
	}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}

/*

	file archive compress source "/var/log/*" destination  file archive compress source /var/log/* destination conf-save@10.201.100.100:/home/conf-save/scriptsTests/BNG4_log.tgz

		<file-archive>
                <compress/>
                <destination>conf-save@10.201.100.100:/home/conf-save/scriptsTest/BNG4_log.tgz</destination>
                <source>"/var/log/*"</source>
        </file-archive>

*/