/* 
	Script to simulate the "show firewall filter x counter x" CLI command.
	show firewall filter Protect-RE-in counter management-accept	
*/

/* 
	Author: bcersows
	Version: 1.02b
	Date: 31.03.2014
	Last Modified By: bcersows	
	###Script_showFilterCounter_Betrieb.slax;v1.02b;2014.03.31	
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass Firewall Filter Counter" */
/* @DESCRIPTION = "Requests information about the counters for a firewall filter. Also displays all dynamic filters as extra information." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'},{'name':'filterNames','defaultvalue':'Protect-RE-in'},{'name':'counterNames','defaultvalue':'management-accept'},{'name':'filterName','parameterscope':'devicespecific','selectionvaluesxpath':'fn:unordered(/device/configuration/firewall/family/inet/filter/name/text())'},{'name':'counterName','parameterscope':'devicespecific','selectionvaluesxpath':'fn:insert-before(/device/configuration/firewall/family/inet/filter[name="$filterName"]/term/then/count/text(), 0, "Show All")'}]" */
/* @PROMOTEs="yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "filterName";
		<description> "Name of the filter to be queried. <br />Is a drop down list of all configured filters in EMS.";
	}
	<argument> {
		<name> "counterName";
		<description> "Name of the filter's counter. Is a drop down list in EMS. <br />Shows all counters when empty or equals 'Show All'.";
	}
}
param $CONTEXT;
param $filterName;
param $counterName;

strip-space *;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();

	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				/*copy-of bcersows:insertCurrentTime();*/
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				/*<div id="floatingButton" onclick="toggleAll(this);"> { 
					expr "Alle oeffnen.";
				}*/
				
				copy-of bcersows:insertSoftwareInformation( $connection );

				var $filterName = bcersows:parseDeviceParameter( $myDevice, $filterName );
				var $counterName = bcersows:parseDeviceParameter( $myDevice, $counterName );
				/* Get the specified filter and its counters. */
				var $rpc = <get-firewall-filter-information> {
					<filtername> { expr $filterName; };
					if ( $counterName != "" && $counterName != "Show All" ) {
						<counter> $counterName;
					} else {
						<detail>;
					}
				}
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				/*<p class="bold hiddenButton" onclick="toggle(this, 2);"> {
					expr "Hardware";
					<span id="hiddenButton_2_span" class="hiddenButtonSpan"> { expr ">"; }
				}
				<div id="hiddenDiv_2" class="hidden" style="display: none;"> {*/
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Filter Counter(s)"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "filterCounter" );
						if ( !$results/filter-information ) {
							copy-of bcersows:disableDownloadButton();
						}
					}
					<table class="twoColumnTable middle"> {
						<tr> {
							<td> { expr "Filter Name: "; }
							<td> { expr $filterName; }
						}
						<tr> {
							<td> { expr "Counter:"; }
							<td> { expr $counterName; }
						}
						<tr> {
							<td> { expr "Filter Count:"; }
							<td> { expr count( $results/filter-information/counter ); }
						}
						<tr> {
							<td> { expr "Policer Count:"; }
							<td> { expr count( $results/filter-information/policer ); }
						}
						<tr> {
							<td> { expr "Hierarchical Policer Count:"; }
							<td> { expr count( $results/filter-information/hierpolicer-detail ); }
						}
					}				
					if ( $results/filter-information/counter || $results/filter-information/policer || $results/filter-information/hierpolicer-detail ) {
						<table id="resultsTable" class="xwide"> {
							<tr> {
								<th class="alignLeft"> { expr "Name"; }
								<th class="alignRight"> { expr "Bytes"; }
								<th class="alignRight"> { expr "Packets"; }
							}
							if ( $results/filter-information/counter ) {
								<tr> {
									<th class="lpadding15 alignLeft"> " Filters";
								}
							}
							for-each ( $results/filter-information/counter ) {
								<tr> {
									<td class="alignLeft"> { expr ./counter-name; }
									<td class="alignRight"> { expr ./packet-count; }
									<td class="alignRight"> { expr ./byte-count; }
								}
							}
							
							if ( $results/filter-information/policer ) {
								<tr> {
									<th class="lpadding15 alignLeft"> " Policers";
								}
							}
							for-each ( $results/filter-information/policer ) {
								<tr> {
									<td class="alignLeft"> { expr ./policer-name; }
									<td class="alignRight"> { expr ./packet-count; }
									<td class="alignRight"> { expr ./byte-count; }
								}
							}
							
							if ( $results/filter-information/hierpolicer-detail ) {
								expr "For ";
								<span class="italic"> "Hierarchical Policers"; 
								expr " is the first value the ";
								<span class="italic"> "Aggregate";
								expr ", the second the ";
								<span class="italic"> "Premium";
								expr " one.";
								<tr> {
									<th class="lpadding15 alignLeft"> " Hierarchical Policers";
								}
							}
							for-each ( $results/filter-information/hierpolicer-detail ) {
								<tr> {
									<td class="alignLeft"> { expr ./policer-name; }
									<td class="alignRight"> { expr ./packet-count _ "/" _ ./packet-count-premium; }
									<td class="alignRight"> { expr ./byte-count _ "/" _ ./byte-count-premium; }
								}
							}
						}
					} else {
						<p> { expr "No data to show."; }
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				
				/*
					get-interface-information>
							<extensive/>
					</get-interface-information
				*/
				/* physical-interface/logical-interface/address-family/filter-information */
				/* 											address-family-name - filter-input */
				
				
				/* Get all filters from all interfaces.. */
				
				var $allFiltersRpc = <get-interface-information> {
					<extensive>;
				}
				set $results = jcs:execute( $connection, $allFiltersRpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				<p class="bold hiddenButton" onclick="toggle(this, 0);"> {
					expr "Input/Output Filters";
					<span id="hiddenButton_0_span" class="hiddenButtonSpan"> { expr ">"; }
				}
				<div id="hiddenDiv_0" class="hidden" style="display: none;"> {
					<p class="bold subheader">{
						<span class="left"> { expr ""; }
						copy-of bcersows:insertDownloadButton( "filtersResultsTable", "interfaceFilters" );
					}
					expr "Input/Output filters are created automatically and do not appear in the configuration. Thus they cannot be displayed as options for the parameter "; 
					<span class="italic"> "$filterName"; expr "."; <br>;
					expr "Check the list below to find the right names.";
					<table class="twoColumnTable middle"> {
						<tr> {
							<td> { expr "Input Filters: "; }
							<td> { expr count( $results/physical-interface/logical-interface/address-family/filter-information/filter-input ); }
						}
						<tr> {
							<td> { expr "Output Filters: "; }
							<td> { expr count( $results/physical-interface/logical-interface/address-family/filter-information/filter-output ); }
						}
					}				
					if ( $results/physical-interface/logical-interface/address-family/filter-information/filter-input || $results/physical-interface/logical-interface/address-family/filter-information/filter-output ) {
						<table id="filtersResultsTable" class="xwide"> {
							<tr> {
								<th class="alignLeft"> { expr "Physical Interface Name"; }
								<th class="alignLeft"> { expr "Logical Interface Name"; }
								<th class="alignLeft"> { expr "Input Filter"; }
								<th class="alignLeft"> { expr "Output Filter"; }
							}
							for-each ( $results/physical-interface[logical-interface/address-family/filter-information/filter-input || logical-interface/address-family/filter-information/filter-output] ) {
								<tr> {
									<td class="alignLeft"> { expr ./name; }
								}
								for-each ( ./logical-interface[address-family/filter-information/filter-input || address-family/filter-information/filter-output] ) {
									<tr> {
										<td> " ";
										<td class="alignLeft"> { expr ./name; }
										<td class="alignLeft"> {
											if ( count( ./address-family/filter-information/filter-input ) > 1 ) {
												for-each ( ./address-family/filter-information/filter-input ) {
													expr .;
													if ( position() != last() ) {
														<br>;
													}
												}
											} else {
												expr ./address-family/filter-information/filter-input;
											}
										}
										<td class="alignLeft"> {
											if ( count( ./address-family/filter-information/filter-output ) > 1 ) {
												for-each ( ./address-family/filter-information/filter-output ) {
													expr .;
													if ( position() != last() ) {
														<br>;
													}
												}
											} else {
												expr ./address-family/filter-information/filter-output;
											}
										}
									}
								}
							}
							
							
						}
					} else {
						<p> { expr "No filters in system."; }
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				/*
					get-firewall-information>
							<terse/>
							<detail/>
					</get-firewall-information>
				*/
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic"> "vs. 1.02b";
					<span class="right"> { 
						expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
					}
				}
				
				/*set $configRpcs = <clear-aaa-statistics-table> { <accounting>; }
				set $results = jcs:execute( $connection, $configRpcs );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );*/
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
