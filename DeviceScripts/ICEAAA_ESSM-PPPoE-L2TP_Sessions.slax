/*
 * Filename      : ICEAAA_ESSM-PPPoE-L2TP_Sessions.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Build         : CVS_BUILD
 * Platform      : Junos Space / iCE AAA Manager
 * Release       : iCE AAA Manager 14.1+
 * SVN INFO      :
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 * Description   : Executed in iCE AAA Manager to be used to show the number of ESSM, PPPoE and L2TP sessions
 * on the chassis, and per ge-/xe- port.
 *
 *   Assumptions
 *   1. Executed via iCE AAA Manager
 *
 */

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns func extension = "http://exslt.org/functions";
ns set = "http://exslt.org/sets";

import "../import/junos.xsl";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/iceaaa-manager/device" */
/* @NAME = "Show ESSM PPPoE L2TP Sessions" */
/* @DESCRIPTION = "Show ESSM PPPoE LT2P Sessions" */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}

param $CONTEXT;

/* open connection */
var $conn = jcs:open();

/* Globals */
mvar $sumPPPoE = 0;
mvar $sumL2TP = 0;

match / {
	<op-script-results> {
		<output> {
			<html> {
				<head> {
					<title> "Sessions";
					<style type="text/css"> {
						expr "body { font-size: 12px;border-color: transparent;background-color: transparent}";
						expr "td { font-size: 12px;}";
						expr "p { font-size: 12px;}";
						expr "table { font-size: 0.75em; width: 99% }";
						expr "#tableheader { font-weight: bolder;text-align: center; }";
						expr "#tableheaderleft { font-weight: bolder;text-align: left; }";
						expr "#paddedcellleft { padding: 5px; text-align: left }";
						expr "#paddedcellright { padding: 5px; text-align: right }";
						expr "#paddedcellcenter { padding: 5px; text-align: center }";
						expr "#right {text-align: right }";
						expr "#center {text-align: center}";
						expr "#left {text-align: left}";
					}
				}
				<body> {
					/* get all interfaces */
					var $get-interface-information = <get-interface-information> {
						<terse>;
					}
					var $interface-information = jcs:execute( $conn, $get-interface-information );
					if ($interface-information/..//xnm:error) {
						call rpc_failure($rpc = $interface-information/.., $message = "Error collecting interface information.");
						<xsl:message terminate="yes"> ;
					}

					/* create a list of physical interfaces associated with pppoe and l2tp */
					var $list-of-interfaces := {
						<interfaces> {
							for-each( $interface-information//physical-interface ) {
								if ( starts-with(name, "ge") || starts-with( name, "xe" ) ) {
									var $get-subscribers-int = <get-subscribers> {
										<physical-interface> name;
										<client-type> "pppoe";
										<detail>;
									}
									var $subscriber-information-int = jcs:execute( $conn, $get-subscribers-int );
									/* count numer of sessions and l2tp */
									var $sumIntPPPoE = count( $subscriber-information-int/subscriber[ access-type == "PPPoE" ] );
									var $sumIntL2TP = count( $subscriber-information-int/subscriber[ contains( State, "Tunneled" ) ] );
									if ( $sumIntPPPoE > 0 ) {
										<interface> name;
										/* save totals for pppoe and l2tp into global variables */
										set $sumPPPoE = $sumPPPoE + $sumIntPPPoE;
										set $sumL2TP = $sumL2TP + $sumIntL2TP;
									}
								}
							}
						}
					}

					/* collect essm data via rpc */
					var $rpc-interface = <get-subscribers> {
						<interface> "ge-*";
						<client-type> "essm";
						<detail>;
					}
					var $rpc-interface-xe = <get-subscribers> {
						<interface> "xe-*";
						<client-type> "essm";
						<detail>;
					}
					var $result-interface = jcs:execute( $conn , $rpc-interface );
					var $result-interface-xe = jcs:execute( $conn , $rpc-interface-xe );
					/* terminate if rpc fails */
					if ($result-interface/..//xnm:error) {
						call rpc_failure($rpc = $result-interface/.., $message = "Error collecting ge- subscriber data.");
						<xsl:message terminate="yes"> ;
					}
					if ($result-interface-xe/..//xnm:error) {
						call rpc_failure($rpc = $result-interface-xe/.., $message = "Error collecting xe- subscriber data.");
						<xsl:message terminate="yes"> ;
					}
					
					/* identify all active essm logical interfaces - union of ge- and xe- */
					var $data = $result-interface[//state="Active"]/subscriber/interface | $result-interface-xe[//state="Active"]/subscriber/interface;

					/* create nodeset that contains only the essm physical interfaces - includes duplicates */
					var $phy-int := {
						<interfaces> {
							for-each ( $data ) {
								<interface> substring-before( . , ".");
							}
						}
					}

					/* create a union of essm and pppoe interfaces */
					var $all-interfaces = $phy-int | $list-of-interfaces;

					/* a list of just physical interfaces that have PPPoE, L2TP or ESSM - no duplicates */
					var $unique-int = set:distinct($all-interfaces/interfaces/interface);

					<table> {
						<colgroup> {
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
							<col width="10%">;
						}
						/* by device */
						<tr> {
							<td colspan="10" id="tableheaderleft"> {
								expr "Established Sessions";
							}
						}
						<tr> {
							<td colspan="10"> {
								uexpr "&nbsp;";
							}
						}
						<tr> {
							<td colspan="2">;
							<td colspan="3" id="tableheaderleft"> {
								expr "Name";
							}
							<td colspan="2" id="tableheaderleft"> {
								expr "ESSM";
							}
							<td colspan="2"> {
								expr "PPPoE";
							}
							<td colspan="1"> {
								expr "L2TP";
							}

						}
						<tr> {
							<td colspan="2"> {
								expr "Chassis";
							}
							<td colspan="3"> {
								/* use regex of CONTEXT to identify device name */
								expr jcs:regex("device\\[name=\"([^\"]+)\"\\]",$CONTEXT)[2];
							}
							<td colspan="2"> {
								/* count all active entries across all ge- and xe- interfaces for total */
								expr count($result-interface/subscriber[state="Active" and starts-with(interface,"ge-")]) + count($result-interface-xe/subscriber[state="Active" and starts-with(interface,"xe-")]);
							}
							<td colspan="2"> {
								expr ($sumPPPoE - $sumL2TP);
							}
							<td colspan="1"> {
								expr ($sumL2TP);
							}

						}
						<tr> {
							<td colspan="10"> {
								uexpr "&nbsp;";
							}
						}
						/* display each unique physical interface name - and count the sessions */
						for-each ($unique-int) {
							<xsl:sort>;
							<tr> {
								<td colspan="2"> {
									expr "Interface";
								}
								<td colspan="3"> {
									expr .;
								}
								var $name = .;
								<td colspan="2"> {
									/* count all sessions associated with a physical interface - which includes all the logical units */
									expr count($result-interface/subscriber[state="Active" and starts-with(interface, $name _ "." )]);
								}
								var $ppp-int = <get-subscribers> {
									<physical-interface> $name;
									<client-type> "pppoe";
									<detail>;
								}
								var $cell-data1-res = jcs:execute( $conn, $ppp-int ); 
								var $cell-data1 = count( $cell-data1-res/subscriber[ access-type == "PPPoE" ] );
								var $cell-data2 = count( $cell-data1-res/subscriber[ contains( State, "Tunneled" ) ] );
								<td colspan="2"> {
									expr $cell-data1 - $cell-data2;
								}
								<td colspan="1"> {
									expr $cell-data2;
								}
							}
						}
					}
				}
			}
		}
		/* close connection */
		expr jcs:close( $conn );
	}
}


template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
	<p> {
		expr $message;
	}
	expr jcs:syslog("daemon.error", $message);
	for-each ($rpc//xnm:error) {
		expr jcs:syslog("daemon.error", message);
		<p> {
			expr message;
		}
	}
}
