/* 
	Script to simulate the "show system core-dumps" command.			
*/

/*
	Author: bcersows
	Version: 1.02
	Date: 21.03.2014
	Last Modified By: bcersows
	###Script_getSystemCoreDumps_Betrieb.slax;v1.02;2014.03.21
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns os extension = "http://xml.libslax.org/os";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass Core-Dumps" */
/* @DESCRIPTION = "Listet Informationen ï¿½ber ein Device auf." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */
/* @PROMOTEs="yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				/*copy-of bcersows:insertCurrentTime();*/
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt..";
						expr os:exit-code(-1);
						expr ".";
						<xsl:message terminate="yes"> "Could not open connection from Script.";
					}
				}	
				
				/*<div id="floatingButton" onclick="toggleAll(this);"> { 
					expr "Alle oeffnen.";
				}*/
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = "get-system-core-dumps";
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );

				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Core-Dumps"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "coreDumps" );
						if ( !$results/directory/file-information ) {
							copy-of bcersows:disableDownloadButton();
						}
					}
					<p> {
						expr "Amount of core-dumps: ";
						if ( $results/directory/total-files ) {
							expr $results/directory/total-files;
						} else {
							expr "0";
						}
						expr ".";
					}
					if ( $results/directory/file-information ) {
						<table id="resultsTable" class="xwide" border="1"> {
							<tr> {
								<th> { expr "Name"; }
								<th> { expr "Owner"; }
								<th> { expr "Group"; }
								<th> { expr "Size (in MByte)"; }
								<th> { expr "Date"; }
							}
							
							var $currDay = jcs:regex( "P([0-9]+).*", date:duration() )[2];
							for-each ( $results/directory/file-information ) {
								var $fileDay = jcs:regex( "P([0-9]+).*", date:duration(./file-date) )[2];
								<tr> {
									<td> { expr ./file-name; }
									<td class="alignCenter"> { expr ./file-owner; }
									<td class="alignCenter"> { expr ./file-group; }
									<td class="alignRight" title="" _ ./file-size _ " Byte"> { expr format-number( ./file-size div 1024 div 1024, "00###,###.000" ); }
									<td class="alignRight" title="Unix Timestamp: " _ ./file-date _ "."> { expr ./file-date/@junos:format; }
								}
							}
							/*expr $results;*/
						}
					} else {
						<p> {
							expr "There are no core-dumps at the moment.";
						}
					}
					if ( $results/directory/output ) {
						<div> {
							expr "There were some other outputs:"; <br>;
							for-each ( $results/directory/output ) {
								expr .; <br>;
							}
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
