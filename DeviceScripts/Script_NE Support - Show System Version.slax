/* 
	Script to receive the versions of software across multiple BNGs.
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 02.07.2014
	Last Modified By: bcersows
	###Script_NE Support - Show System Version.slax;v1.0;2014.07.02
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "NE Support - Show System Version" */
/* @DESCRIPTION = "Script to receive the versions of software across multiple BNGs." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[]" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @PROMOTEs = "yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	/*mvar $results;*/
	
	mvar $localtime = date:date-time();
	
	/*
	*	Get configuration.
	*/
	
	mvar $hostname;       /* credentials of user@ip           */
	mvar $splitHostname;  /* array of user and ip credentials */
	mvar $ip;             /* credentials ip address           */
	mvar $user;           /* credentials username             */
	mvar $password;       /* credentials password             */
	
	/* Split interfaces and Credentials */
	var $devices = jcs:split("\\|", $CONTEXT);
	var $splitCredentials = str:split( $credentials , "\\;" );
	
	/* Push the devices and according credentials into one node-set. */
	var $deviceCredentials := {
		for-each ( $devices ) {
			var $position = position();
			<device> {
				<name> .;
				<credentials> $splitCredentials[ $position ];
			}
		}
	}
	
	var $myDevice = {
		for-each ( $deviceCredentials/device/name ) {
			<xsl:sort>;
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", . )[2];
			if ( position() != last() ) {
				expr ", ";
			}
		}
	}
	
	var $myRPC = <get-software-information>;
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
				<style> {
					<xsl:text disable-output-escaping="yes">
						".tableSaver {
							width: 100%;
							overflow: auto;
						}
						.tableSaver table {
							white-space: nowrap;
						}
						.tableSaver table td, .tableSaver table th {
							padding-left: 5px;
						}"
					;
				}
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Software Versions"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "SoftwareVersions" );
					}
					
					/* Table is going to be very long. Putting it in an extra DIV let the page not break. */
					<div class="tableSaver"> {
						/* Table to have something to export. */
						/* Element styling so that table is horizontally and vertically scrollable. */
						<table id="resultsTable" class="wide" style="width: 100%; display: block; height: 50%; overflow: auto;"> {
							<tr> {
								<th style="text-align: left;"> "Device";
								<th> "Model";
								<th> "Name";
								<th> "Software Versions...";
							}
							for-each ( $deviceCredentials/device ) {
								<xsl:sort>;
								/* Using the count of unique devices found, the correct connection */
								/* parameters to be used can be derived from $splitCredentials     */
								var $splitCredential = str:split( ./credentials, "\\:" );
								
								set $hostname = $splitCredential[1];
								set $password = $splitCredential[2];
								set $splitHostname = str:split( $hostname[1] , "\@");
								set $user = $splitHostname[1];
								set $ip = $splitHostname[2];
								var $dev = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", ./name )[2];
								
								var $connection = jcs:open( $ip , $user , $password );
								
								if ( $connection && !$connection//self::xnm:error ) {
									<tr> {
										<td> $dev;
										var $myResult = jcs:execute( $connection, $myRPC );
										if( $myResult//self::xnm:error ) {
											<td> "Error while requesting version.";
										} else {
											<td> $myResult/product-model;
											<td> $myResult/product-name;
											for-each ( $myResult/package-information ) {
												<td> ./comment;
											}
										}
									}
								} else {
									<tr> {
										<td> $dev;
										<td> "Could not open connection.";
									}
								}
								set $unlock-results = jcs:execute( $connection, "unlock-database" );
								expr jcs:close( $connection );
							}
						}
					}
					
					/*copy-of bcersows:insertBackButton();*/
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.0";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
