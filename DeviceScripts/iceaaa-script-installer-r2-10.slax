
/*
 * Filename      : iceaaa-script-installer-r2-10.slax
 * Author        : cgiese cgiese@juniper.net
 * Version       : R2.10
 *
 * Description   : iCEAAA Script Installer Version R2.10
 *
 */
 
/* Junos Space specific context, name and description */
/* @CONTEXT = "/device" */
/* @NAME = "iCEAAA Scripts Version R2.10" */
/* @DESCRIPTION = "Installer Script for iCEAAA Scripts" */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @VARIABLECONTEXT = "[{'name':'commit','selectionvalues':'false, true'}]" */
/* @CONFIRMATION = "Are you sure that you want to install the iCEAAA script version R2.10?"  */

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";
ns func extension = "http://exslt.org/functions";
ns jspace = "http://jspace-utils/asharp@juniper.net";

import "../import/junos.xsl";

var $arguments = {
    <argument> { 
        <name> "commit";
        <description> "commit configuration with autoclean enabled if value is true";
    }
}
param $CONTEXT;
param $commit;

var $version = "R2.10";

match / {
    <op-script-results> {
        var $localtime = date:date-time();

        var $embedded := <embedded-scripts> {
            <script> {
                <name> "iceaaa-dynamic-config.slax";
                <type> "commit";
                <base64> "";
                <md5> "a8c4d7ff6d9aa4f6b4faea9af388a37a";
            }
            <script> {
                <name> "clock-synchronization-alarm.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzkwMjcgJAogKiAkRGF0ZTogMjAxNC0xMi0xMSAxMTo1MDo1NSArMDEwMCAoVGh1LCAxMSBEZWMgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogZ2VuZXJhdGUgZXZlbnRzIGJhc2VkIG9uIGNsb2NrIHN5bmNocm9uaXphdGlvbiBzdGF0dXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBjbG9jay1zeW5jaHJvbml6YXRpb24tYWxhcm0uc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gImdlbmVyYXRlIGV2ZW50cyBiYXNlZCBvbiBjbG9jayBzeW5jaHJvbml6YXRpb24gc3RhdHVzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7CgpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgICAgICA8cG9saWN5PiB7CiAgICAgICAgICAgIDxuYW1lPiAiQ0xPQ0stU1lOQyI7CiAgICAgICAgICAgIDxldmVudHM+ICJFVkVSWS1NSU5VVEUiOwogICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgPGV2ZW50LXNjcmlwdD4gewogICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWFsYXJtLnNsYXgiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgY2xvY2sgc3luYyBpbmZvcm1hdGlvbiAoCiAgICAgICAgICogICAgIGNsaTogc2hvdyBjaGFzc2lzIHN5bmNocm9uaXphdGlvbiBleHRlbnNpdmUKICAgICAgICAgKi8KICAgICAgICB2YXIgJGdldC1jbG9jay1zeW5jLWluZm8gPSA8Z2V0LWNsb2NrLXN5bmNocm9uaXphdGlvbi1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICAgICAgPGV4dGVuc2l2ZT47CiAgICAgICAgfQogICAgICAgIHZhciAkY2xvY2stc3luYy1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWNsb2NrLXN5bmMtaW5mbyApOwoKICAgICAgICBtdmFyICRzdGF0dXNSeCA9ICJkaXNhYmxlZCI7CiAgICAgICAgbXZhciAkc3RhdHVzVHggPSAiZGlzYWJsZWQiOwoKICAgICAgICBpZiAoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UgKSB7CiAgICAgICAgICAgIHNldCAkc3RhdHVzUnggPSBzdHI6cmVwbGFjZSggJGNsb2NrLXN5bmMtaW5mby8vY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS1yeC1zdGF0dXMsICIgIiwgIi0iICk7CiAgICAgICAgICAgIHNldCAkc3RhdHVzVHggPSBzdHI6cmVwbGFjZSggJGNsb2NrLXN5bmMtaW5mby8vY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMsICIgIiwgIi0iICk7CiAgICAgICAgfQoKICAgICAgIC8qIGdldCB1dGlsaXR5IG1pYiBpbmZvcm1hdGlvbnMKICAgICAgICAqICAgICBjbGk6IHNob3cgc25tcCBtaWIgd2FsayBkZWNpbWFsIGpueFV0aWxTdHJpbmdWYWx1ZS45OS4xMDguMTExLjk5LjEwNy40NS4xMTUuMTIxLjExMC45OS4xMDQuMTE0LjExMS4xMTAuMTA1LjEyMi45Ny4xMTYuMTA1LjExMS4xMTAKICAgICAgICAqLwogICAgICAgIHZhciAkZ2V0LXNubXAtY2xvY2stc3luYy1pbmZvID0gPHdhbGstc25tcC1vYmplY3Q+IHsKICAgICAgICAgICAgICAgIDxkZWNpbWFsPjsKICAgICAgICAgICAgICAgIDxzbm1wLW9iamVjdC1uYW1lPiAiam54VXRpbFN0cmluZ1ZhbHVlLjk5LjEwOC4xMTEuOTkuMTA3LjQ1LjExNS4xMjEuMTEwLjk5LjEwNC4xMTQuMTExLjExMC4xMDUuMTIyLjk3LjExNi4xMDUuMTExLjExMCI7CiAgICAgICAgfQogICAgICAgIHZhciAkc25tcC1jbG9jay1zeW5jLWluZm8gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc25tcC1jbG9jay1zeW5jLWluZm8gKTsKCiAgICAgICAgbXZhciAkc3RhdHVzUnhTbm1wID0gJHNubXAtY2xvY2stc3luYy1pbmZvLy9zbm1wLW9iamVjdFsgaW5kZXgvaW5kZXgtdmFsdWUgPT0gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzIiBdL29iamVjdC12YWx1ZTsKICAgICAgICBtdmFyICRzdGF0dXNUeFNubXAgPSAkc25tcC1jbG9jay1zeW5jLWluZm8vL3NubXAtb2JqZWN0WyBpbmRleC9pbmRleC12YWx1ZSA9PSAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMiIF0vb2JqZWN0LXZhbHVlOwoKICAgICAgICBpZiggc3RyaW5nLWxlbmd0aCggJHN0YXR1c1J4U25tcCApIDwgMSApIHsKICAgICAgICAgICAgc2V0ICRzdGF0dXNSeFNubXAgPSAibm9uZSI7CiAgICAgICAgfQogICAgICAgIGlmKCBzdHJpbmctbGVuZ3RoKCAkc3RhdHVzVHhTbm1wICkgPCAxICkgewogICAgICAgICAgICBzZXQgJHN0YXR1c1R4U25tcCA9ICJub25lIjsKICAgICAgICB9CgogICAgICAgIGlmICggJHN0YXR1c1J4ICE9ICRzdGF0dXNSeFNubXAgKSB7CiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgIDx0cmFwPiAiam54RXZlbnRUcmFwIjsKICAgICAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09Y2xvY2stc3luYy1yeC0iIF8gJHN0YXR1c1J4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMl09c3RhdHVzLCAiICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJHN0YXR1c1J4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109b2xkLXN0YXR1cywgIiAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHN0YXR1c1J4U25tcDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBUcmFwUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXRyYXAgKTsKCiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgPGluc3RhbmNlPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS1yeC1zdGF0dXMiOwogICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHN0YXR1c1J4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgKTsKICAgICAgICB9CgogICAgICAgIGlmICggJHN0YXR1c1R4ICE9ICRzdGF0dXNUeFNubXAgKSB7CiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgIDx0cmFwPiAiam54RXZlbnRUcmFwIjsKICAgICAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09Y2xvY2stc3luYy10eC0iIF8gJHN0YXR1c1R4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMl09c3RhdHVzLCAiICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJHN0YXR1c1R4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109b2xkLXN0YXR1cywgIiAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHN0YXR1c1R4U25tcDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBUcmFwUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXRyYXAgKTsKCiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgPGluc3RhbmNlPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMiOwogICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHN0YXR1c1R4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgKTsKICAgICAgICB9CgogICAgICAgIC8qIGNsb3NlIHRoZSBjb25uZWN0aW9uICAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UoICRjb25uZWN0aW9uICk7CiAgICB9Cn0K";
                <md5> "9c1c78dbd1cb48b0a85c63d6c7ccd228";
            }
            <script> {
                <name> "event-dom-signal-check.slax";
                <type> "event";
                <base64> "";
                <md5> "a5e9af4759a48db0fdcfdc064a35aae7";
            }
            <script> {
                <name> "event-mib-accounting-options-configuration-etherlike.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGV2ZW50LW1pYi1hY2NvdW50aW5nLW9wdGlvbnMtY29uZmlndXJhdGlvbi1ldGhlcmxpa2Uuc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuMTAKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM5MDI3ICQKICogJERhdGU6IDIwMTQtMTItMTEgMTE6NTA6NTUgKzAxMDAgKFRodSwgMTEgRGVjIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IE1JQiBhY2NvdW50aW5nIG9wdGlvbnMgZm9yIGV0aGVybGlrZSBkb3QzCiAqCiAqICAgQXNzdW1wdGlvbnMKICogICAxLiBubyBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBzY3JpcHQKICogICAyLiBtb25pdG9yaW5nIG9mIGFsbCBnZS0gYW5kIHhlLSBwaHlzaWNhbCBpbnRlcmZhY2VzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIyLjEwIC0gZXZlbnQtbWliLWFjY291bnRpbmctb3B0aW9ucy1jb25maWd1cmF0aW9uLWV0aGVybGlrZS5zbGF4IiAqLwovKiBAREVTQ1JJUFRJT04gPSAiTUlCIGFjY291bnRpbmcgb3B0aW9ucyBmb3IgZXRoZXJsaWtlIGRvdDMiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKbnMgZXh0ID0gImh0dHA6Ly94bWxzb2Z0Lm9yZy9YU0xUL25hbWVzcGFjZSI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgaWYgKCAkY29ubmVjdGlvbi8vc2VsZjo6eG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwYy1mYWlsdXJlKCRycGMgPSAkY29ubmVjdGlvbiwgJG1lc3NhZ2UgPSAiZmFpbGVkIHRvIG9wZW4gY29ubmVjdGlvbiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQoKICAgICAgICAvKiBnZXQgcGh5c2ljYWwgaWZJbmRleGVzICovCiAgICAgICAgdmFyICRwaHlzSWZpbmRleGVzIDo9IHsgY2FsbCBnZXQtcGh5cy1pZmluZGV4ZXMoICRjb25uZWN0aW9uICk7IH0KCiAgICAgICAgLyogY3JlYXRlIG1pYi1wcm9maWxlIGNvbmZpZyAqLwogICAgICAgIHZhciAkbWliUHJvZmlsZSA9IHsgY2FsbCBjcmVhdGUtbWliLXByb2ZpbGUoICRjb25uZWN0aW9uLCAkaWZpbmRleGVzID0gJHBoeXNJZmluZGV4ZXMgKTsgfQoKICAgICAgICAvKiB1cGRhdGUgY29uZmlnIGJ5IHJlcGxhY2luZyBtaWIgcHJvZmlsZSB3aXRoIG5ldyBvbmUgKi8KICAgICAgICBjYWxsIHVwZGF0ZS1jb25maWcoICRjb25uZWN0aW9uLCAkeG1sID0gJG1pYlByb2ZpbGUgKTsKCiAgICAgICAgLyogYWxsIGJlaW5nIHdlbGwgbG9nIHN1Y2Nlc3NmdWwgcnVuIG9mIHNjcmlwdCAqLwogICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIubm90aWNlIiwgImV2ZW50LW1pYi1hY2NvdW50aW5nLW9wdGlvbnMtY29uZmlndXJhdGlvbi1ldGhlcmxpa2UgLSBwcm9maWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5Iik7CgogICAgICAgIC8qIGNsb3NlIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgICAgfQp9CgovKiBnZXQgYWxsIHBoeXNpY2FsIFhFIGFuZCBHRSBpbnRlcmZhY2VzICovCnRlbXBsYXRlIGdldC1waHlzLWlmaW5kZXhlcyggJGNvbm5lY3Rpb24gKSB7CiAgICB2YXIgJGdldEludGVyZmFjZUluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICA8aW50ZXJmYWNlLW5hbWU+ICJbZ3hdZS0qIjsKICAgIH0KICAgIHZhciAkaW50ZXJmYWNlSW5mb3JtYXRpb24gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24gLCAkZ2V0SW50ZXJmYWNlSW5mb3JtYXRpb24gKTsKCiAgICBpZiAoICRpbnRlcmZhY2VJbmZvcm1hdGlvbi8vc2VsZjo6eG5tOmVycm9yICkgewogICAgICAgIGNhbGwgcnBjLWZhaWx1cmUoJHJwYyA9ICRpbnRlcmZhY2VJbmZvcm1hdGlvbiwgJG1lc3NhZ2UgPSAiZmFpbGVkIHRvIGdldCBpbnRlcmZhY2UgaW5mb3JtYXRpb24iKTsKICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICB9CiAgICB2YXIgJHBoeXNpY2FsSWZzIDo9IHsKICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VJbmZvcm1hdGlvbi8vcGh5c2ljYWwtaW50ZXJmYWNlWyBzbm1wLWluZGV4IF0gKSB7CiAgICAgICAgICAgIDxzbm1wLWluZGV4PiBzbm1wLWluZGV4OwogICAgICAgIH0KICAgIH0KICAgIGNvcHktb2YgJHBoeXNpY2FsSWZzOwp9Cgp0ZW1wbGF0ZSBjcmVhdGUtbWliLXByb2ZpbGUoICRjb25uZWN0aW9uLCAkaWZpbmRleGVzICkgewogICAgaWYgKCEgJGlmaW5kZXhlcy9zbm1wLWluZGV4ICkgewogICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+ICJubyBpZmwgaW5kZXhlcyBwYXNzZWQiOwogICAgfQogICAgdmFyICR4bWwgPSA8YWNjb3VudGluZy1vcHRpb25zPiB7CiAgICAgICAgPGZpbGU+IHsKICAgICAgICAgICAgPG5hbWU+ICJtaWJzdGF0RXRoZXJMaWtlT2lkcyI7CiAgICAgICAgICAgIDxmaWxlcz4gIjI0IjsKICAgICAgICAgICAgPHRyYW5zZmVyLWludGVydmFsPiAiNjAiOwogICAgICAgIH0KICAgICAgICA8bWliLXByb2ZpbGUgcmVwbGFjZT0icmVwbGFjZSI+IHsKICAgICAgICAgICAgPG5hbWU+ICJtaWJwcm9maWxlRXRoZXJMaWtlT2lkcyI7CiAgICAgICAgICAgIDxmaWxlPiAibWlic3RhdEV0aGVyTGlrZU9pZHMiOwogICAgICAgICAgICA8aW50ZXJ2YWw+ICI2MCI7CiAgICAgICAgICAgIDxvcGVyYXRpb24+ICJnZXQiOwogICAgICAgICAgICBmb3ItZWFjaCAoJGlmaW5kZXhlcy9zbm1wLWluZGV4KSB7CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiaWZEZXNjci4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xLiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuMi4xLjEwLjcuMi4xLjIuIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS4yLjEuMTAuNy4yLjEuMy4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS40LiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuMi4xLjEwLjcuMi4xLjUuIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS4yLjEuMTAuNy4yLjEuNi4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS43LiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuMi4xLjEwLjcuMi4xLjguIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS4yLjEuMTAuNy4yLjEuOS4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xMC4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xMS4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xMy4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xNi4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xOC4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4xMC43LjIuMS4xOS4iIF8gLjsgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY29weS1vZiAkeG1sOwp9CgovKiBhcHBseSBuZXcgTUlCIHByb2ZpbGUgKi8KdGVtcGxhdGUgdXBkYXRlLWNvbmZpZyggJGNvbm5lY3Rpb24sICR4bWwgKSB7CiAgICAvKiBhYm9ydCBpZiBub3QgWE1MIGNvbmZpZyBwcm92aWRlZCAqLwogICAgaWYgKGpjczplbXB0eSggJHhtbCApICkgewogICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+ICJNSUIgcHJvZmlsZSB0byBhcHBseSBpcyBtaXNzaW5nIjsKICAgIH0KICAgIHZhciAkY29uZmlndXJhdGlvbiA9IDxjb25maWd1cmF0aW9uPiB7CiAgICAgICAgY29weS1vZiAkeG1sOwogICAgfQogICAgdmFyICRsb2FkIDo9IHsgY2FsbCBqY3M6bG9hZC1jb25maWd1cmF0aW9uKCAkY29ubmVjdGlvbiwgJGNvbmZpZ3VyYXRpb24sICRhY3Rpb24gPSAicmVwbGFjZSIgKTsgfQogICAgaWYgKCAkbG9hZC8veG5tOmVycm9yICkgewogICAgICAgIGNhbGwgcnBjLWZhaWx1cmUoICRycGMgPSAkbG9hZCwgJG1lc3NhZ2UgPSAiZmFpbGVkIHRvIGFwcGx5IG5ldyBNSUIgcHJvZmlsZSIgKTsKICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPjsKICAgIH0KfQoKLyogZ2VuZXJhdGUgZXJyb3Igc3lzbG9ncyAqLwp0ZW1wbGF0ZSBycGMtZmFpbHVyZSggJHJwYywgJG1lc3NhZ2UgPSAidW5rbm93biBlcnJvciIgKSB7CiAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5lcnJvciIsICJldmVudC1taWItYWNjb3VudGluZy1vcHRpb25zLWNvbmZpZ3VyYXRpb24tZXRoZXJsaWtlIC0gIiBfICRtZXNzYWdlICk7CiAgICBmb3ItZWFjaCAoICRycGMvL3hubTplcnJvciApIHsKICAgICAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5lcnJvciIsIG1lc3NhZ2UgKTsKICAgIH0KfQo=";
                <md5> "f8c18a65cc3b3a0b817446f42297710f";
            }
            <script> {
                <name> "event-mib-accounting-options-configuration-physical.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGV2ZW50LW1pYi1hY2NvdW50aW5nLW9wdGlvbnMtY29uZmlndXJhdGlvbi1waHlzaWNhbC5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBBbmRyZXcgU2hhcnAgYXNoYXJwQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzkwMjcgJAogKiAkRGF0ZTogMjAxNC0xMi0xMSAxMTo1MDo1NSArMDEwMCAoVGh1LCAxMSBEZWMgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogTUlCIGFjY291bnRpbmcgb3B0aW9ucyBmb3IgZ2VuZXJpYyBpbnRlcmZhY2VzCiAqCiAqICAgQXNzdW1wdGlvbnMKICogICAxLiBubyBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBzY3JpcHQKICogICAyLiBtb25pdG9yaW5nIG9mIGFsbCBnZS0gYW5kIHhlLSBwaHlzaWNhbCBpbnRlcmZhY2VzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIyLjEwIC0gZXZlbnQtbWliLWFjY291bnRpbmctb3B0aW9ucy1jb25maWd1cmF0aW9uLXBoeXNpY2FsLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJNSUIgYWNjb3VudGluZyBvcHRpb25zIGZvciBnZW5lcmljIGludGVyZmFjZXMiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKbnMgZXh0ID0gImh0dHA6Ly94bWxzb2Z0Lm9yZy9YU0xUL25hbWVzcGFjZSI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgaWYgKCAkY29ubmVjdGlvbi8vc2VsZjo6eG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwYy1mYWlsdXJlKCRycGMgPSAkY29ubmVjdGlvbiwgJG1lc3NhZ2UgPSAiZmFpbGVkIHRvIG9wZW4gY29ubmVjdGlvbiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQoKICAgICAgICAvKiBnZXQgcGh5c2ljYWwgaWZJbmRleGVzICovCiAgICAgICAgdmFyICRwaHlzSWZpbmRleGVzIDo9IHsgY2FsbCBnZXQtcGh5cy1pZmluZGV4ZXMoICRjb25uZWN0aW9uICk7IH0KCiAgICAgICAgLyogY3JlYXRlIG1pYi1wcm9maWxlIGNvbmZpZyAqLwogICAgICAgIHZhciAkbWliUHJvZmlsZSA9IHsgY2FsbCBjcmVhdGUtbWliLXByb2ZpbGUoICRjb25uZWN0aW9uLCAkaWZpbmRleGVzID0gJHBoeXNJZmluZGV4ZXMgKTsgfQoKICAgICAgICAvKiB1cGRhdGUgY29uZmlnIGJ5IHJlcGxhY2luZyBtaWIgcHJvZmlsZSB3aXRoIG5ldyBvbmUgKi8KICAgICAgICBjYWxsIHVwZGF0ZS1jb25maWcoICRjb25uZWN0aW9uLCAkeG1sID0gJG1pYlByb2ZpbGUgKTsKCiAgICAgICAgLyogYWxsIGJlaW5nIHdlbGwgbG9nIHN1Y2Nlc3NmdWwgcnVuIG9mIHNjcmlwdCAqLwogICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIubm90aWNlIiwgImV2ZW50LW1pYi1hY2NvdW50aW5nLW9wdGlvbnMtY29uZmlndXJhdGlvbi1waHlzaWNhbCAtIHByb2ZpbGUgdXBkYXRlZCBzdWNjZXNzZnVsbHkiKTsKCiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UoICRjb25uZWN0aW9uICk7CiAgICAgIH0KfQoKLyogZ2V0IGFsbCBwaHlzaWNhbCBYRSBhbmQgR0UgaW50ZXJmYWNlcyAqLwp0ZW1wbGF0ZSBnZXQtcGh5cy1pZmluZGV4ZXMoICRjb25uZWN0aW9uICkgewogICAgdmFyICRnZXRJbnRlcmZhY2VJbmZvcm1hdGlvbiA9IDxnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uPiB7CiAgICAgICAgPGludGVyZmFjZS1uYW1lPiAiW2d4XWUtKiI7CiAgICB9CiAgICB2YXIgJGludGVyZmFjZUluZm9ybWF0aW9uID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uICwgJGdldEludGVyZmFjZUluZm9ybWF0aW9uICk7CgogICAgaWYgKCAkaW50ZXJmYWNlSW5mb3JtYXRpb24vL3NlbGY6OnhubTplcnJvciApIHsKICAgICAgICBjYWxsIHJwYy1mYWlsdXJlKCRycGMgPSAkaW50ZXJmYWNlSW5mb3JtYXRpb24sICRtZXNzYWdlID0gImZhaWxlZCB0byBnZXQgaW50ZXJmYWNlIGluZm9ybWF0aW9uIik7CiAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgfQogICAgdmFyICRwaHlzaWNhbElmcyA6PSB7CiAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlSW5mb3JtYXRpb24vL3BoeXNpY2FsLWludGVyZmFjZVsgc25tcC1pbmRleCBdICkgewogICAgICAgICAgICA8c25tcC1pbmRleD4gc25tcC1pbmRleDsKICAgICAgICB9CiAgICB9CiAgICBjb3B5LW9mICRwaHlzaWNhbElmczsKfQoKdGVtcGxhdGUgY3JlYXRlLW1pYi1wcm9maWxlKCAkY29ubmVjdGlvbiwgJGlmaW5kZXhlcyApIHsKICAgIGlmICghICRpZmluZGV4ZXMvc25tcC1pbmRleCApIHsKICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiAibm8gaWZsIGluZGV4ZXMgcGFzc2VkIjsKICAgIH0KICAgIHZhciAkeG1sID0gPGFjY291bnRpbmctb3B0aW9ucz4gewogICAgICAgIDxmaWxlPiB7CiAgICAgICAgICAgIDxuYW1lPiAibWlic3RhdEdlbk9pZHMiOwogICAgICAgICAgICA8ZmlsZXM+ICIyNCI7CiAgICAgICAgICAgIDx0cmFuc2Zlci1pbnRlcnZhbD4gIjYwIjsKICAgICAgICB9CiAgICAgICAgPG1pYi1wcm9maWxlIHJlcGxhY2U9InJlcGxhY2UiPiB7CiAgICAgICAgICAgIDxuYW1lPiAibWlicHJvZmlsZUdlbk9pZHMiOwogICAgICAgICAgICA8ZmlsZT4gIm1pYnN0YXRHZW5PaWRzIjsKICAgICAgICAgICAgPGludGVydmFsPiAiNjAiOwogICAgICAgICAgICA8b3BlcmF0aW9uPiAiZ2V0IjsKICAgICAgICAgICAgZm9yLWVhY2ggKCRpZmluZGV4ZXMvc25tcC1pbmRleCkgewogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gImlmRGVzY3IuIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS40LjEuMjYzNi4zLjMuMS4xLjI2LiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuNC4xLjI2MzYuMy4zLjEuMS4xNy4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4yLjIuMS45LiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuMi4xLjIuMi4xLjQuIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS4yLjEuMzEuMS4xLjEuMTUuIiBfIC47IH0KICAgICAgICAgICAgICAgIDxvYmplY3QtbmFtZXM+IHsgPG5hbWU+ICIuMS4zLjYuMS4yLjEuMi4yLjEuNi4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4zMS4xLjEuMS4xOC4iIF8gLjsgfQogICAgICAgICAgICAgICAgPG9iamVjdC1uYW1lcz4geyA8bmFtZT4gIi4xLjMuNi4xLjIuMS4yLjIuMS44LiIgXyAuOyB9CiAgICAgICAgICAgICAgICA8b2JqZWN0LW5hbWVzPiB7IDxuYW1lPiAiLjEuMy42LjEuMi4xLjIuMi4xLjcuIiBfIC47IH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGNvcHktb2YgJHhtbDsKfQoKLyogYXBwbHkgbmV3IE1JQiBwcm9maWxlICovCnRlbXBsYXRlIHVwZGF0ZS1jb25maWcoICRjb25uZWN0aW9uLCAkeG1sICkgewogICAgLyogYWJvcnQgaWYgbm90IFhNTCBjb25maWcgcHJvdmlkZWQgKi8KICAgIGlmIChqY3M6ZW1wdHkoICR4bWwgKSApIHsKICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiAiTUlCIHByb2ZpbGUgdG8gYXBwbHkgaXMgbWlzc2luZyI7CiAgICB9CiAgICB2YXIgJGNvbmZpZ3VyYXRpb24gPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgIGNvcHktb2YgJHhtbDsKICAgIH0KICAgIHZhciAkbG9hZCA6PSB7IGNhbGwgamNzOmxvYWQtY29uZmlndXJhdGlvbiggJGNvbm5lY3Rpb24sICRjb25maWd1cmF0aW9uLCAkYWN0aW9uID0gInJlcGxhY2UiICk7IH0KICAgIGlmICggJGxvYWQvL3hubTplcnJvciApIHsKICAgICAgICBjYWxsIHJwYy1mYWlsdXJlKCAkcnBjID0gJGxvYWQsICRtZXNzYWdlID0gImZhaWxlZCB0byBhcHBseSBuZXcgTUlCIHByb2ZpbGUiICk7CiAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj47CiAgICB9Cn0KCi8qIGdlbmVyYXRlIGVycm9yIHN5c2xvZ3MgKi8KdGVtcGxhdGUgcnBjLWZhaWx1cmUoICRycGMsICRtZXNzYWdlID0gInVua25vd24gZXJyb3IiICkgewogICAgZXhwciBqY3M6c3lzbG9nICggInVzZXIuZXJyb3IiLCAiZXZlbnQtbWliLWFjY291bnRpbmctb3B0aW9ucy1jb25maWd1cmF0aW9uLXBoeXNpY2FsIC0gIiBfICRtZXNzYWdlICk7CiAgICBmb3ItZWFjaCAoICRycGMvL3hubTplcnJvciApIHsKICAgICAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5lcnJvciIsIG1lc3NhZ2UgKTsKICAgIH0KfQo=";
                <md5> "3d5519c6be15f80ca445f95b8fdfbbe7";
            }
            <script> {
                <name> "event-sfp-data.slax";
                <type> "event";
                <base64> "";
                <md5> "e7882f41e7c8c51670493815ca82cdab";
            }
            <script> {
                <name> "iceaaa-autoclean-tmp.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjEwCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzOTAyNyAkCiAqICREYXRlOiAyMDE0LTEyLTExIDExOjUwOjU1ICswMTAwIChUaHUsIDExIERlYyAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBpY2VhYWEtYXV0b2NsZWFuLXRtcCIgKi8KLyogQERFU0NSSVBUSU9OID0gIm9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbCIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp0ZW1wbGF0ZSBqdW5vc2NyaXB0KCkgewogICAgLyogcnVuIHNjcmlwdCBvbiBtYXN0ZXIgUkUgb25seSAuLi4gKi8KICAgIGlmICggJGp1bm9zLWNvbnRleHQvcmUtbWFzdGVyICkgewogICAgICAgIHZhciAkYXV0b2NsZWFuU3RhdHVzID0gPHRydWU+OwogICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgIGNvcHktb2YgJGF1dG9jbGVhblN0YXR1czsKICAgICAgICB9CiAgICB9Cn0K";
                <md5> "b8d7b9260ccd4809207a9162ab321cf8";
            }
            <script> {
                <name> "iceaaa-clean-cache.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1jbGVhbi1jYWNoZS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzkwMjcgJAogKiAkRGF0ZTogMjAxNC0xMi0xMSAxMTo1MDo1NSArMDEwMCAoVGh1LCAxMSBEZWMgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogcmVtb3ZlIHVudXNlZCBjb25maWcgY2FjaGUgZmlsZXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBpY2VhYWEtY2xlYW4tY2FjaGUuc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gInJlbW92ZSB1bnVzZWQgY29uZmlnIGNhY2hlIGZpbGVzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIGRhdGUgPSAiaHR0cDovL2V4c2x0Lm9yZy9kYXRlcy1hbmQtdGltZXMiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgICAgIDxwb2xpY3k+IHsKICAgICAgICAgICAgPG5hbWU+ICJJQ0VBQUEtQ0xFQU4tQ0FDSEUiOwogICAgICAgICAgICA8ZXZlbnRzPiAiSUNFQUFBLUNMRUFOLUNBQ0hFIjsKICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgIDxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImljZWFhYS1jbGVhbi1jYWNoZS5zbGF4IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKPHhzbDprZXkgbmFtZT0icHBwb2Utc3Vic2NyaWJlcnMiIG1hdGNoPSJzdWJzY3JpYmVycy1pbmZvcm1hdGlvbi9zdWJzY3JpYmVyIiB1c2U9InNlc3Npb24taWQiPjsKCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgdmFyICRmaWxlUGF0aCA9ICIvbWZzL3Zhci90bXAiOwoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgc3Vic2NyaWJlci1pbmZvcm1hdGlvbiBmb3IgcHBwb2Ugc2Vzc2lvbnMgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVyID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgIDxkZXRhaWw+OwogICAgICAgIH0KICAgICAgICB2YXIgJHN1YnNjcmliZXJzID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXIgKTsKCiAgICAgICAgLyogZ2V0IGZpbGUgbGlzdCAqLwogICAgICAgIHZhciAkZ2V0LWZpbGUtbGlzdCA9IDxmaWxlLWxpc3Q+IHsKICAgICAgICAgICAgPHBhdGg+ICRmaWxlUGF0aDsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkZmlsZS1saXN0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWZpbGUtbGlzdCApOwoKICAgICAgICAvKiBkZWxldGUgY2FjaGUgZmlsZXMgaWYgY29ycmVzcG9uZGluZyBwcHBvZSBzZXNzaW9uIGlzIG1pc3NpbmcgKi8KICAgICAgICBmb3ItZWFjaCggJGZpbGUtbGlzdC8vZmlsZS1pbmZvcm1hdGlvbiApIHsKICAgICAgICAgICAgdmFyICRmaWxlTmFtZSA9IGpjczpyZWdleCggIl4oW1s6ZGlnaXQ6XV0qKV9bWzpkaWdpdDpdXSoiLCBmaWxlLW5hbWUgKTsKICAgICAgICAgICAgaWYoICRmaWxlTmFtZVsyXSApIHsKICAgICAgICAgICAgICAgIGZvci1lYWNoICggJHN1YnNjcmliZXJzICkgewogICAgICAgICAgICAgICAgICAgIGlmKCBub3QoIGtleSggInBwcG9lLXN1YnNjcmliZXJzIiwgJGZpbGVOYW1lWzJdICApL3JhZGl1cy1hY2NvdW50aW5nLWlkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmlsZS1kZWxldGUgPSA8ZmlsZS1kZWxldGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGggXyAiLyIgXyAkZmlsZU5hbWVbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRmaWxlLWRlbGV0ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8qIGRlbGV0ZSBpY2VhYWEtbWFuYWdlciBjb21taXQgYW5kIG1hY3JvIHJlc3VsdCBmaWxlcyBvbGRlciB0aGVuIDI0aCAoODY0MDBzKSAqLwogICAgICAgICAgICAgICAgaWYoIGNvbnRhaW5zKCBmaWxlLW5hbWUsICJpY2VhYWEtbWFuYWdlciIgKSApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoICggZGF0ZTpzZWNvbmRzKCBkYXRlOmR1cmF0aW9uKCkgKSAtIGZpbGUtZGF0ZSApID4gODY0MDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmlsZS1kZWxldGUgPSA8ZmlsZS1kZWxldGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGggXyAiLyIgXyBmaWxlLW5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRmaWxlLWRlbGV0ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvKiBjbG9zZSBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRjb25uZWN0aW9uICk7CiAgICB9Cn0K";
                <md5> "08f72041ca15c70682caea98eb3c177f";
            }
            <script> {
                <name> "iceaaa-messages.slax";
                <type> "event";
                <base64> "";
                <md5> "710ae82a63a914dcdadacbf6ee5a6aa6";
            }
            <script> {
                <name> "mib_acct-session-id.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IG1pYl9hY2N0LXNlc3Npb24taWQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuMTAKICogUGxhdGZvcm0gICAgICA6IE1YCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzOTAyNyAkCiAqICREYXRlOiAyMDE0LTEyLTExIDExOjUwOjU1ICswMTAwIChUaHUsIDExIERlYyAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBldmVudC1zY3JpcHQgd3JpdGluZyBhbGwgYWN0aXZlIFBQUG9FIHN1YnNjcmliZXIgaW4gdGhlIHV0aWwgTUlCCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIyLjEwIC0gbWliX2FjY3Qtc2Vzc2lvbi1pZC5zbGF4IiAqLwovKiBAREVTQ1JJUFRJT04gPSAiZXZlbnQtc2NyaXB0IHdyaXRpbmcgYWxsIGFjdGl2ZSBQUFBvRSBzdWJzY3JpYmVyIGluIHRoZSB1dGlsIE1JQiIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgICAgIDxwb2xpY3k+IHsKICAgICAgICAgICAgPG5hbWU+ICJNSUItQUNDVC1TRVNTSU9OLUlEIjsKICAgICAgICAgICAgPGV2ZW50cz4gIkVWRVJZLU1JTlVURSI7CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICA8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJtaWJfYWNjdC1zZXNzaW9uLWlkLnNsYXgiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cgo8eHNsOmtleSBuYW1lPSJzdWJzY3JpYmVyIiBtYXRjaD0ic3Vic2NyaWJlcnMtaW5mb3JtYXRpb24vc3Vic2NyaWJlciIgdXNlPSJyYWRpdXMtYWNjb3VudGluZy1pZCI+Owo8eHNsOmtleSBuYW1lPSJtaWIiIG1hdGNoPSJzbm1wLW9iamVjdC1pbmZvcm1hdGlvbi9zbm1wLW9iamVjdCIgdXNlPSJpbmRleC9pbmRleC12YWx1ZSI+OwoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBzaG93IHN1YnNjcmliZXJzIGNsaWVudC10eXBlIHBwcG9lIHN1YnNjcmliZXItc3RhdGUgYWN0aXZlIGRldGFpbCAqLwogICAgICAgIHZhciAkZ2V0LXN1YnNjcmliZXJzLWluZm8gPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgIDxjbGllbnQtdHlwZT4gInBwcG9lIjsKICAgICAgICAgICAgPHN1YnNjcmliZXItc3RhdGU+ICJhY3RpdmUiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVyLWluZm8gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlcnMtaW5mbyApOwoKICAgICAgICAvKiBzaG93IHNubXAgbWliIHdhbGsgZGVjaW1hbCBqbnhVdGlsU3RyaW5nVmFsdWUuMTEyLjExMi4xMTIuNDYgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVyLXNubXAgPSA8d2Fsay1zbm1wLW9iamVjdD4gewogICAgICAgICAgICAgICAgPGFzY2lpPjsKICAgICAgICAgICAgICAgIDxzbm1wLW9iamVjdC1uYW1lPiAiam54VXRpbFN0cmluZ1ZhbHVlLjExMi4xMTIuMTEyLjQ2IjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVyLXNubXAgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlci1zbm1wICk7CgogICAgICAgIC8qIGFkZCBtaXNzaW5nIHBwcG9lIHN1YnNjcmliZXIgdG8gdGhlIHV0aWwgTUlCIC4uLiAqLwogICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1pbmZvLy9zdWJzY3JpYmVyICkgewogICAgICAgICAgICB2YXIgJHNlc3Npb25JZCA9IHNlc3Npb24taWQ7CiAgICAgICAgICAgIHZhciAkcmFkaXVzQWNjdElkID0gcmFkaXVzLWFjY291bnRpbmctaWQ7CiAgICAgICAgICAgIHZhciAkaW5zdGFuY2UgPSAicHBwLiIgXyAkc2Vzc2lvbklkOwogICAgICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItc25tcCApIHsKICAgICAgICAgICAgICAgIGlmKCBub3QoIGtleSggIm1pYiIsICRpbnN0YW5jZSApL29iamVjdC12YWx1ZSApICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYmplY3QtdHlwZT4gInN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gJGluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgICAgICA8b2JqZWN0LXZhbHVlPiAkcmFkaXVzQWNjdElkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qIHJlbW92ZSBkaXNjb25uZWN0ZWQgcHBwb2Ugc3Vic2NyaWJlciB0aGUgdGhlIHV0aWwgTUlCIC4uLiAqLwogICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1zbm1wLy9zbm1wLW9iamVjdCApIHsKICAgICAgICAgICAgdmFyICRyYWRpdXNBY2N0SWQgPSBvYmplY3QtdmFsdWU7CiAgICAgICAgICAgIHZhciAkaW5zdGFuY2UgPSBpbmRleC9pbmRleC12YWx1ZTsKICAgICAgICAgICAgZm9yLWVhY2goICRzdWJzY3JpYmVyLWluZm8gKSB7CiAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJzdWJzY3JpYmVyIiwgJHJhZGl1c0FjY3RJZCApL3Nlc3Npb24taWQgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1jbGVhciA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgICAgICAgICAgPGluc3RhbmNlPiAkaW5zdGFuY2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1jbGVhciApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSB0aGUgY29ubmVjdGlvbiAgKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgfQp9Cg==";
                <md5> "bce759137b3c62ecf8eac3049c4db01a";
            }
            <script> {
                <name> "trap_ancp.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHRyYXBfYW5jcC5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzkwMjcgJAogKiAkRGF0ZTogMjAxNC0xMi0xMSAxMTo1MDo1NSArMDEwMCAoVGh1LCAxMSBEZWMgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogZ2VuZXJhdGVzIFNOTVAgdHJhcHMgYmFzZWQgb24gQU5DUCBzeXNsb2cKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSB0cmFwX2FuY3AiICovCi8qIEBERVNDUklQVElPTiA9ICJnZW5lcmF0ZXMgU05NUCB0cmFwcyBiYXNlZCBvbiBBTkNQIHN5c2xvZyIgKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKbnMgc3RyID0gImh0dHA6Ly9leHNsdC5vcmcvc3RyaW5ncyI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKLyogVGhpcyBpcyBhbiBldmVudCBzY3JpcHQgKi8KCnZhciAkZXZlbnQtZGVmaW5pdGlvbiA9IHsKICAgIDxldmVudC1vcHRpb25zPiB7CiAgICAgICAgPHBvbGljeT4gewogICAgICAgICAgICA8bmFtZT4gIkFOQ1AiOwogICAgICAgICAgICA8ZXZlbnRzPiAiU1lTVEVNIjsKICAgICAgICAgICAgPGF0dHJpYnV0ZXMtbWF0Y2g+IHsKICAgICAgICAgICAgICAgIDxmcm9tLWV2ZW50LWF0dHJpYnV0ZT4gIlNZU1RFTS5tZXNzYWdlIjsKICAgICAgICAgICAgICAgIDxjb25kaXRpb24+ICJtYXRjaGVzIjsKICAgICAgICAgICAgICAgIDx0by1ldmVudC1hdHRyaWJ1dGUtdmFsdWU+ICJhbmNwZF9zZXNzaW9uLipzdGF0ZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgIDxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gInRyYXBfYW5jcC5zbGF4IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gLyogLi4uIHBvbGljeSBFT0FNX0NGTV9USU1FT1VUIiAqLwogICAgfQp9CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgdGhlIHN5c2xvZyBtZXNzYWdlICovCiAgICAgICAgdmFyICRtZXNzYWdlID0gZXZlbnQtc2NyaXB0LWlucHV0L3RyaWdnZXItZXZlbnQvbWVzc2FnZTsKCiAgICAgICAgdmFyICRldmVudCA9IHsKICAgICAgICAgICAgaWYoIGNvbnRhaW5zKCAkbWVzc2FnZSwgInN0YXRlIGlzIHVwIiApICkgewogICAgICAgICAgICAgICAgPHZhbHVlPiAiVVAiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgPHZhbHVlPiAiRE9XTiI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciAkbWVzc2FnZVBhcnQgPSBzdWJzdHJpbmctYWZ0ZXIgKCAkbWVzc2FnZSwgIiBuZWlnaGJvciAiICk7CiAgICAgICAgdmFyICRuZWlnaGJvciA9IHN1YnN0cmluZy1iZWZvcmUgKCAkbWVzc2FnZVBhcnQsICIgIiApOwogICAgICAgIHZhciAkcmVhc29uID0gc3RyOnJlcGxhY2UgKCBzdWJzdHJpbmctYWZ0ZXIgKCAkbWVzc2FnZVBhcnQsICIgIiApLCAiICIsICItIiApOwoKICAgICAgICB2YXIgJGdldC1yb3V0ZS1pbmZvcm1hdGlvbiA9IDxnZXQtcm91dGUtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPGRlc3RpbmF0aW9uPiAkbmVpZ2hib3I7CiAgICAgICAgICAgIDx0YWJsZT4gImluZXQuMCI7CiAgICAgICAgICAgIDxwcm90b2NvbD4gImRpcmVjdCI7CiAgICAgICAgfQogICAgICAgIHZhciAkcm91dGUtaW5mb3JtYXRpb24gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtcm91dGUtaW5mb3JtYXRpb24gKTsKICAgICAgICBtdmFyICRpZmwgPSAkcm91dGUtaW5mb3JtYXRpb24vL3J0LWVudHJ5L25oL3ZpYTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPGJyaWVmPjsKICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAkaWZsOwogICAgICAgIH0KICAgICAgICB2YXIgJGludGVyZmFjZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gKTsKICAgICAgICB2YXIgJGxpbmstYWRkcmVzcy1wYXJ0cyA9IGpjczpzcGxpdCAoICJbWy5zcGFjZS5dXSIsICRpbnRlcmZhY2UtaW5mb3JtYXRpb24vL2xpbmstYWRkcmVzcyApOwogICAgICAgIHZhciAkdmxhbiA9IHsKICAgICAgICAgICAgaWYgKCBjb3VudCggJGxpbmstYWRkcmVzcy1wYXJ0cykgPiA0ICkgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbM10sICIuIiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbMl0sICIuIiApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIHN0YXJ0cy13aXRoKCAkaWZsLCAieGUtIiApICkgewogICAgICAgICAgICBzZXQgJGlmbCA9ICJcXCIgXyAkaWZsOwogICAgICAgIH0KCiAgICAgICAgLyogZ2VuZXJhdGUgc25tcCB0cmFwICovCiAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT1BTkNQLVNFU1NJT04tIiBfICRldmVudCBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNV09aWZEZXNjLCAiICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzVdPSIgXyAkaWZsIF8gIiwgIgogICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs3XT1tZXNzYWdlLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbN109IiBfICRyZWFzb24gXyAiLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzExXT1uZWlnaGJvciwgIiAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxMV09IiBfICRuZWlnaGJvciBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMTJdPXZsYW4sICIgICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzEyXT0iIF8gJHZsYW47CiAgICAgICAgfQogICAgICAgIHZhciAkc25tcFJlc3VsdCA9IGpjczppbnZva2UgKCAkcmVxdWVzdFNubXBUcmFwICk7CgogICAgICAgIC8qIGNsb3NlIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQo=";
                <md5> "aa53b2793e278ec42f18eb424f7a2da8";
            }
            <script> {
                <name> "trap_eoam.slax";
                <type> "event";
                <base64> "";
                <md5> "b5bd06b2f3105a785e2a2fdf191ca9f6";
            }
            <script> {
                <name> "write_ancp_session_radius_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "6024bbd470d4e516a7a36dbd5cf2cf9f";
            }
            <script> {
                <name> "write_interfaces_queue_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "d2fc5aeb511f09fb7667701aeb60e186";
            }
            <script> {
                <name> "write_subscribers_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "5a2c8409a3693658807f8bbb624196cb";
            }
            <script> {
                <name> "iceaaa-autoclean-tmp.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjEwCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzOTAyNyAkCiAqICREYXRlOiAyMDE0LTEyLTExIDExOjUwOjU1ICswMTAwIChUaHUsIDExIERlYyAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBpY2VhYWEtYXV0b2NsZWFuLXRtcCIgKi8KLyogQERFU0NSSVBUSU9OID0gIm9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbCIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp0ZW1wbGF0ZSBqdW5vc2NyaXB0KCkgewogICAgLyogcnVuIHNjcmlwdCBvbiBtYXN0ZXIgUkUgb25seSAuLi4gKi8KICAgIGlmICggJGp1bm9zLWNvbnRleHQvcmUtbWFzdGVyICkgewogICAgICAgIHZhciAkYXV0b2NsZWFuU3RhdHVzID0gPHRydWU+OwogICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgIGNvcHktb2YgJGF1dG9jbGVhblN0YXR1czsKICAgICAgICB9CiAgICB9Cn0K";
                <md5> "b8d7b9260ccd4809207a9162ab321cf8";
            }
            <script> {
                <name> "iceaaa-request-support-information.slax";
                <type> "op";
                <base64> "";
                <md5> "caac09147559265a463b045cf9d00654";
            }
            <script> {
                <name> "iceaaa-show-subscriber.slax";
                <type> "op";
                <base64> "";
                <md5> "76f40d04831c3dcae44e3806946bf0a9";
            }
            <script> {
                <name> "iceaaa-show-version.slax";
                <type> "op";
                <base64> "";
                <md5> "39c64e18f52ba8cf34cea7977e92ec07";
            }
            <script> {
                <name> "iceaaa_combo_1.slax";
                <type> "op";
                <base64> "";
                <md5> "efb4d52080a6c5afb44dec082483798d";
            }
            <script> {
                <name> "Interface-Activation.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgKICogQXV0aG9yICAgICAgICA6IEFuZHJldyBTaGFycCBhc2hhcnBAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjEwCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPIC8gSnVub3MgU3BhY2UKICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrIC8gMTMuMVAyCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2OiAzOTAyNyAkCiAqICREYXRlOiAyMDE0LTEyLTExIDExOjUwOjU1ICswMTAwIChUaHUsIDExIERlYyAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBFbmFibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpLgogKgogKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKbnMganNwYWNlID0gImh0dHA6Ly9qc3BhY2UtdXRpbHMvYXNoYXJwQGp1bmlwZXIubmV0IjsKCm5zIGZ1bmMgZXh0ZW5zaW9uID0gImh0dHA6Ly9leHNsdC5vcmcvZnVuY3Rpb25zIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKLyogKioqKioqKioqKioqKioqKiogKi8KLyogU2NyaXB0IEFubm90YXRpb24gKi8KLyogKioqKioqKioqKioqKioqKiogKi8KCi8qIEBDT05URVhUID0gIi9kZXZpY2UvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZVtub3Qoc3RhcnRzLXdpdGgobmFtZSwiZnhwMCIpKV0iICovCi8qIEBOQU1FID0gIlIyLjEwIC0gSW50ZXJmYWNlLUFjdGl2YXRpb24iICovCi8qIEBERVNDUklQVElPTiA9ICJFbmFibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpIiAqLwovKiBARVhFQ1VUSU9OVFlQRSA9ICJHUk9VUEVERVhFQ1VUSU9OIiAqLwoKLyogKioqKioqKiAqLwovKiBHbG9iYWxzICovCi8qICoqKioqKiogKi8KdmFyICRzY3JpcHRuYW1lID0gIkludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgiOwp2YXIgJHJlc3VsdHM7CnZhciAkaW50ZXJmYWNlczsKdmFyICRpbnRlcmZhY2UtcmVnZXg7CnZhciAkZGV2aWNlbmFtZTsKdmFyICRwaHlzaW50bmFtZTsKCnZhciAkYXJndW1lbnRzID0gewogICAgPGFyZ3VtZW50PiB7CiAgICAgICAgPG5hbWU+ICJDT05URVhUIjsKICAgICAgICA8ZGVzY3JpcHRpb24+ICJUaGUgY29udGV4dCBhc3NvY2lhdGVkIHdpdGggdGhpcyBzY3JpcHQuIjsKICAgIH0KfQpwYXJhbSAkQ09OVEVYVDsKCm1hdGNoIC8gewogICAgPG9wLXNjcmlwdC1yZXN1bHRzPiB7CgogICAgICAgIHZhciAkaW50ZXJmYWNlcyA9IGpjczpzcGxpdCgiXFx8IiwgJENPTlRFWFQpOwoKICAgICAgICAvKiBDcmVhdGUgY29uZmlndXJhdGlvbiBmb3IgZWFjaCBzZWxlY3RlZCBpbnRlcmZhY2UsICAqLwogICAgICAgIC8qIHRoZSBmaXJzdCBpbnRlcmZhY2UgaXMgYXQgcG9zaXRpb25bMl0gaW4gdGhlIGFycmF5ICovCiAgICAgICAgdmFyICRjb25maWd1cmF0aW9uLWNoYW5nZSA9IDxjb25maWd1cmF0aW9uPiB7CiAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW50ZXJmYWNlLXJlZ2V4ID0gamNzOnJlZ2V4KCAiL2RldmljZShcXFsuKlxcXSkvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZShcXFsuKlxcXSkiLCAoLikgKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJGRldmljZW5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJHBoeXNpbnRuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkcGh5c2ludG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIDxlbmFibGU+OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogQSBjb25uZWN0aW9uIG11c3QgYmUgb3BlbmVkICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKICAgICAgICAvKiBhYm9ydCBpZiBubyBjb25uZWN0aW9uIHRvIGxvY2FsIG1nZCAqLwogICAgICAgIGlmICgkY29ubmVjdGlvbi8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjb25uZWN0aW9uLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gYW5kIGNoYW5nZSBhcmUgc2V0IGFzIHBhcmFtZXRlcnMgdG8gdGhlIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24gdGVtcGxhdGUKICAgICAgICAgKiB3aGljaCBwZXJmb3JtcyB0aGUgY2hhbmdlLiAgVGhlIDo9IG9wZXJhdG9yIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlICRyZXN1bHRzIHZhcmlhYmxlCiAgICAgICAgICogaXMgYSBub2RlLXNldCByYXRoZXIgdGhhbiBhIHJlc3VsdCB0cmVlIGZyYWdtZW50LgogICAgICAgICAqLwogICAgICAgIHZhciAkcmVzdWx0cyA6PSB7IGNhbGwgamNzOmxvYWQtY29uZmlndXJhdGlvbiggJGNvbm5lY3Rpb24sICRjb25maWd1cmF0aW9uID0gJGNvbmZpZ3VyYXRpb24tY2hhbmdlICk7IH0KCiAgICAgICAgLyogQ2hlY2sgZm9yIGVycm9ycyAtIHJlcG9ydCB0aGVtIGlmIHRoZXkgb2NjdXJyZWQuICovCiAgICAgICAgaWYgKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkcmVzdWx0cywgJG1lc3NhZ2UgPSAiRXJyb3IgYXBwbHlpbmcgY29uZmlndXJhdGlvbi4iKTsKICAgICAgICAgICAgZm9yLWVhY2ggKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgICAgIDxIVE1MPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZW5hYmxlZCByZXN1bHRzOiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIyIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkFuIGVycm9yIGhhcyBiZWVuIGVuY291bnRlcmVkOiAiIF8gbWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgICAgIDxIVE1MPiB7CiAgICAgICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGVuYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIxIik7CiAgICAgICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlKHMpIGhhdmUgbm93IGJlZW4gZW5hYmxlZC4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGludC1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZGV2bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwaW50bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICRwaW50bm0gXyAiIDsgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHJlc3VsdHMvY29tbWl0LXJlc3VsdHMvcm91dGluZy1lbmdpbmUvY29tbWl0LXN1Y2Nlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkNvbW1pdCBzdWNjZXNzLiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRyZXN1bHRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5pbmZvIiwgIlNDUklQVF9BQ1RJT05fSUZfRU5BQkxFOiBTY3JpcHQgYWN0aW9uIHRha2VuIHRvIGVuYWJsZSBwaHlzaWNhbCBpbnRlcmZhY2UuIik7CiAgICAgICAgdmFyICRjbG9zZS1yZXN1bHRzID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgICAgIGlmICgkY2xvc2UtcmVzdWx0cy8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjbG9zZS1yZXN1bHRzLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjbG9zaW5nIGNvbm5lY3Rpb24uIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CiAgICB9Cn0KCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7CiAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgZm9yLWVhY2ggKCRycGMvL3hubTplcnJvcikgewogICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKICB9Cn0K";
                <md5> "045f300a60e7f8f0f93741eafd6d1216";
            }
            <script> {
                <name> "Interface-Deactivation.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuMTAKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8gLyBKdW5vcyBTcGFjZQogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisgLyAxMy4xUDIKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM5MDI3ICQKICogJERhdGU6IDIwMTQtMTItMTEgMTE6NTA6NTUgKzAxMDAgKFRodSwgMTEgRGVjIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IERpc2FibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpLgogKgogKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKbnMganNwYWNlID0gImh0dHA6Ly9qc3BhY2UtdXRpbHMvYXNoYXJwQGp1bmlwZXIubmV0IjsKCm5zIGZ1bmMgZXh0ZW5zaW9uID0gImh0dHA6Ly9leHNsdC5vcmcvZnVuY3Rpb25zIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKLyogKioqKioqKioqKioqKioqKiogKi8KLyogU2NyaXB0IEFubm90YXRpb24gKi8KLyogKioqKioqKioqKioqKioqKiogKi8KCi8qIEBDT05URVhUID0gIi9kZXZpY2UvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZVtub3Qoc3RhcnRzLXdpdGgobmFtZSwiZnhwMCIpKV0iICovCi8qIEBOQU1FID0gIlIyLjEwIC0gSW50ZXJmYWNlLURlYWN0aXZhdGlvbiIgKi8KLyogQERFU0NSSVBUSU9OID0gIkRpc2FibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpIiAqLwovKiBARVhFQ1VUSU9OVFlQRSA9ICJHUk9VUEVERVhFQ1VUSU9OIiAqLwovKiBAQ09ORklSTUFUSU9OID0gIkFyZSB5b3Ugc3VyZSB0aGF0IHlvdSB3YW50IHRvIGRpc2FibGUgdGhlIHNlbGVjdGVkIGludGVyZmFjZShzKT8iICovCgovKiAqKioqKioqICovCi8qIEdsb2JhbHMgKi8KLyogKioqKioqKiAqLwp2YXIgJHNjcmlwdG5hbWUgPSAiSW50ZXJmYWNlLURlYWN0aXZhdGlvbi5zbGF4IjsKdmFyICRyZXN1bHRzOwp2YXIgJGludGVyZmFjZXM7CnZhciAkaW50ZXJmYWNlLXJlZ2V4Owp2YXIgJGRldmljZW5hbWU7CnZhciAkcGh5c2ludG5hbWU7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiQ09OVEVYVCI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiVGhlIGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NyaXB0LiI7CiAgICB9Cn0KcGFyYW0gJENPTlRFWFQ7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICB2YXIgJGludGVyZmFjZXMgPSBqY3M6c3BsaXQoIlxcfCIsICRDT05URVhUKTsKCiAgICAgICAgLyogQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggc2VsZWN0ZWQgaW50ZXJmYWNlLCAgKi8KICAgICAgICAvKiB0aGUgZmlyc3QgaW50ZXJmYWNlIGlzIGF0IHBvc2l0aW9uWzJdIGluIHRoZSBhcnJheSAqLwogICAgICAgIHZhciAkY29uZmlndXJhdGlvbi1jaGFuZ2UgPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgIGZvci1lYWNoICggJGludGVyZmFjZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnRlcmZhY2UtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgIHZhciAkZGV2aWNlbmFtZSA9IHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKCRpbnRlcmZhY2UtcmVnZXhbMl0sIltuYW1lPVwiIiwiIiksIlwiXSIsIiIpOwogICAgICAgICAgICAgICAgICAgIHZhciAkcGh5c2ludG5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRwaHlzaW50bmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgPGRpc2FibGU+OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBBIGNvbm5lY3Rpb24gbXVzdCBiZSBvcGVuZWQgKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwogICAgICAgIC8qIGFib3J0IGlmIG5vIGNvbm5lY3Rpb24gdG8gbG9jYWwgbWdkICovCiAgICAgICAgaWYgKCRjb25uZWN0aW9uLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGNvbm5lY3Rpb24vLi4sICRtZXNzYWdlID0gIkVycm9yIGNvbm5lY3Rpbmcgb24gbWdkIG9uIHRoaXMgUkUiKTsKICAgICAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICAgKiBUaGUgY29ubmVjdGlvbiBhbmQgY2hhbmdlIGFyZSBzZXQgYXMgcGFyYW1ldGVycyB0byB0aGUgamNzOmxvYWQtY29uZmlndXJhdGlvbiB0ZW1wbGF0ZQogICAgICAgICAqIHdoaWNoIHBlcmZvcm1zIHRoZSBjaGFuZ2UuICBUaGUgOj0gb3BlcmF0b3IgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGUgJHJlc3VsdHMgdmFyaWFibGUKICAgICAgICAgKiBpcyBhIG5vZGUtc2V0IHJhdGhlciB0aGFuIGEgcmVzdWx0IHRyZWUgZnJhZ21lbnQuCiAgICAgICAgKi8KICAgICAgICB2YXIgJHJlc3VsdHMgOj0geyBjYWxsIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24oICRjb25uZWN0aW9uLCAkY29uZmlndXJhdGlvbiA9ICRjb25maWd1cmF0aW9uLWNoYW5nZSApOyB9CgogICAgICAgIC8qIENoZWNrIGZvciBlcnJvcnMgLSByZXBvcnQgdGhlbSBpZiB0aGV5IG9jY3VycmVkLiAqLwogICAgICAgIGlmICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJHJlc3VsdHMsICRtZXNzYWdlID0gIkVycm9yIGFwcGx5aW5nIGNvbmZpZ3VyYXRpb24uIik7CiAgICAgICAgZm9yLWVhY2ggKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBkaXNhYmxlZCByZXN1bHRzOiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiQW4gZXJyb3IgaGFzIGJlZW4gZW5jb3VudGVyZWQ6ICIgXyBtZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZGlzYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjEiKTsKICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiVGhlIGZvbGxvd2luZyBpbnRlcmZhY2UocykgaGF2ZSBub3cgYmVlbiBkaXNhYmxlZC4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGludC1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZGV2bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwaW50bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICRwaW50bm0gXyAiIDsgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHJlc3VsdHMvY29tbWl0LXJlc3VsdHMvcm91dGluZy1lbmdpbmUvY29tbWl0LXN1Y2Nlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkNvbW1pdCBzdWNjZXNzLiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRyZXN1bHRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmluZm8iLCAiU0NSSVBUX0FDVElPTl9JRl9ESVNBQkxFOiBTY3JpcHQgYWN0aW9uIHRha2VuIHRvIGRpc2FibGUgcGh5c2ljYWwgaW50ZXJmYWNlLiIpOwogICAgICAgIHZhciAkY2xvc2UtcmVzdWx0cyA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgICAgICBpZiAoJGNsb3NlLXJlc3VsdHMvLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uLiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQogICAgfQp9CgoKdGVtcGxhdGUgcnBjX2ZhaWx1cmUoJHJwYywgJG1lc3NhZ2UgPSAiRm9sbG93aW5nIGVycm9ycyBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2F0aGVyIGRhdGE6ICIpIHsKICBleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsICRtZXNzYWdlKTsKICBmb3ItZWFjaCAoJHJwYy8veG5tOmVycm9yKSB7CiAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsIG1lc3NhZ2UpOwogIH0KfQo=";
                <md5> "dfbd76afdf74aa81ad21062542950c90";
            }
            <script> {
                <name> "jspace-lib.slax";
                <type> "op";
                <base64> "";
                <md5> "ddde6a2453e4d59ea9e3bb5e37290e22";
            }
            <script> {
                <name> "juniper-commit.slax";
                <type> "op";
                <base64> "";
                <md5> "57ddfdb3c2c1f6e441962b48cfde9462";
            }
            <script> {
                <name> "Logical_Interface-Activation.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IExvZ2ljYWxfSW50ZXJmYWNlLUFjdGl2YXRpb24uc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuMTAKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8gLyBKdW5vcyBTcGFjZQogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisgLyAxMy4xUDIKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM5MDI3ICQKICogJERhdGU6IDIwMTQtMTItMTEgMTE6NTA6NTUgKzAxMDAgKFRodSwgMTEgRGVjIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IEVuYWJsZSBsb2dpY2FsIHNlbGVjdGVkIGludGVyZmFjZShzKS4KICoKICovCgp2ZXJzaW9uIDEuMDsKCi8qIE5hbWVzcGFjZSBkZWNsYXJhdGlvbnMgKi8KbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKbnMganNwYWNlID0gImh0dHA6Ly9qc3BhY2UtdXRpbHMvYXNoYXJwQGp1bmlwZXIubmV0IjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwoKLyogSW1wb3J0cyAqLwppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvZGV2aWNlL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcy9pbnRlcmZhY2UvdW5pdCIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBMb2dpY2FsX0ludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJFbmFibGUgbG9naWNhbCBzZWxlY3RlZCBpbnRlcmZhY2UocykiICovCi8qIEBFWEVDVVRJT05UWVBFID0gIkdST1VQRURFWEVDVVRJT04iICovCgovKiBHbG9iYWwgdmFyaWFibGVzICovCnZhciAkc2NyaXB0bmFtZSA9ICJMb2dpY2FsX0ludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgiOwp2YXIgJHJlc3VsdHM7CnZhciAkcmVnZXg7CnZhciAkcmVzdWx0LXJlZ2V4Owp2YXIgJGxpbmVzOwp2YXIgJGRldmljZW5hbWU7CnZhciAkcGh5c2ludG5hbWU7CnZhciAkbG9naW50bmFtZXM7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiQ09OVEVYVCI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiVGhlIGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NyaXB0LiI7CiAgICB9Cn0KcGFyYW0gJENPTlRFWFQ7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewogICAgICAgIC8qIFNwbGl0IGNvbnRleHQgaW50byBlYWNoIHBoeXNpY2FsIGludGVyZmFjZSAqLwogICAgICAgIHZhciAkaW50ZXJmYWNlcyA9IGpjczpzcGxpdCgiXFx8IiwgJENPTlRFWFQpOwoKICAgICAgICAvKiBTdGFydCBvZiB0aGUgY29uZmlndXJhdGlvbiBmaWxlLiAqLwogICAgICAgIHZhciAkY29uZmlndXJhdGlvbi1jaGFuZ2UgPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICAgICAgLyogTG9vcCB0aHJvdWdoIGVhY2ggcGh5c2ljYWwgaW50ZXJmYWNlKi8KCiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoJGludGVyZmFjZXMpIHsKICAgICAgICAgICAgICAgICAgICAvKiBpZGVudGlmeSBlYWNoIGNvbXBvbmVudCAoZGV2aWNlLCBwaHlzaWNhbCBpbnRlcmZhY2UsIHVuaXQpICovCiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnRlcmZhY2UtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9jb25maWd1cmF0aW9uL2ludGVyZmFjZXMvaW50ZXJmYWNlKFxcWy4qXFxdKS91bml0KFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgIHZhciAkZGV2aWNlbmFtZSA9IHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKCRpbnRlcmZhY2UtcmVnZXhbMl0sIltuYW1lPVwiIiwiIiksIlwiXSIsIiIpOwogICAgICAgICAgICAgICAgICAgIHZhciAkcGh5c2ludG5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgIHZhciAkbG9naW50bmFtZXMgPSBqY3M6c3BsaXQoIm5hbWU9IixzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzRdLCIgb3IgIiwiIiksIlsiLCIiKSwiXSIsIiIpLCJcIiIsIiIpKTsKICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkcGh5c2ludG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIExvb3AgdGhyb3VnaCBlYWNoIGxvZ2ljYWwgaW50ZXJmYWNlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGZvci1lYWNoICgkbG9naW50bmFtZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcG9zaXRpb24oKSA+IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVuaXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICguKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpc2FibGUgZGVsZXRlPSJkaXNhYmxlIj47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSAvKiBFbmQgb2YgaW50ZXJmYWNlIG5vZGUgKi8KICAgICAgICAgICAgICAgIH0gLyogRm9yIGVhY2ggcGh5c2ljYWwgaW50ZXJmYWNlKi8KICAgICAgICAgICAgfSAvKiBFbmQgb2YgaW50ZXJmYWNlcyBub2RlICovCiAgICAgICAgfSAvKiBFbmQgb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSAqLwoKICAgICAgICAvKiBBIGNvbm5lY3Rpb24gbXVzdCBiZSBvcGVuZWQgKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwogICAgICAgIC8qIGFib3J0IGlmIG5vIGNvbm5lY3Rpb24gdG8gbG9jYWwgbWdkICovCiAgICAgICAgaWYgKCRjb25uZWN0aW9uLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGNvbm5lY3Rpb24vLi4sICRtZXNzYWdlID0gIkVycm9yIGNvbm5lY3Rpbmcgb24gbWdkIG9uIHRoaXMgUkUiKTsKICAgICAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgICAgIH0KICAgICAgICAvKgogICAgICAgICAqIFRoZSBjb25uZWN0aW9uIGFuZCBjaGFuZ2UgYXJlIHNldCBhcyBwYXJhbWV0ZXJzIHRvIHRoZSBqY3M6bG9hZC1jb25maWd1cmF0aW9uIHRlbXBsYXRlCiAgICAgICAgICogd2hpY2ggcGVyZm9ybXMgdGhlIGNoYW5nZS4gIFRoZSA6PSBvcGVyYXRvciBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSAkcmVzdWx0cyB2YXJpYWJsZQogICAgICAgICAqIGlzIGEgbm9kZS1zZXQgcmF0aGVyIHRoYW4gYSByZXN1bHQgdHJlZSBmcmFnbWVudC4KICAgICAgICAqLwogICAgICAgIHZhciAkcmVzdWx0cyA6PSB7IGNhbGwgamNzOmxvYWQtY29uZmlndXJhdGlvbiggJGNvbm5lY3Rpb24sICRjb25maWd1cmF0aW9uID0gJGNvbmZpZ3VyYXRpb24tY2hhbmdlICk7IH0KCiAgICAgICAgLyogQ2hlY2sgZm9yIGVycm9ycyAtIHJlcG9ydCB0aGVtIGlmIHRoZXkgb2NjdXJyZWQuICovCiAgICAgICAgaWYgKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkcmVzdWx0cywgJG1lc3NhZ2UgPSAiRXJyb3IgYXBwbHlpbmcgY29uZmlndXJhdGlvbiIpOwogICAgICAgICAgICBmb3ItZWFjaCAoICRyZXN1bHRzLy94bm06ZXJyb3IgKSB7CiAgICAgICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBlbmFibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByIG1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBlbmFibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiMSIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiVGhlIGxvZ2ljYWwgaW50ZXJmYWNlKHMpIGhhdmUgbm93IGJlZW4gZW5hYmxlZC4iOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRyZXN1bHRzL2NvbW1pdC1yZXN1bHRzL3JvdXRpbmctZW5naW5lL2NvbW1pdC1zdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkNvbW1pdCBzdWNjZXNzLiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRyZXN1bHRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmluZm8iLCAiU0NSSVBUX0FDVElPTl9MSUZfRU5BQkxFOiBTY3JpcHQgYWN0aW9uIHRha2VuIHRvIGVuYWJsZSBsb2dpY2FsIGludGVyZmFjZS4iKTsKICAgICAgICAvKiBUaGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuICovCiAgICAgICAgdmFyICRjbG9zZS1yZXN1bHRzID0gamNzOmNsb3NlKCRjb25uZWN0aW9uKTsKICAgICAgICBpZiAoJGNsb3NlLXJlc3VsdHMvLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uLiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQogICAgfQp9Cgp0ZW1wbGF0ZSBycGNfZmFpbHVyZSgkcnBjLCAkbWVzc2FnZSA9ICJGb2xsb3dpbmcgZXJyb3JzIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnYXRoZXIgZGF0YTogIikgewogICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgICBmb3ItZWFjaCAoJHJwYy8veG5tOmVycm9yKSB7CiAgICAgICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKICAgIH0KfQo=";
                <md5> "66f75f7a6686fe938a91b2df7aae1d54";
            }
            <script> {
                <name> "Logical_Interface-Deactivation.slax";
                <type> "op";
                <base64> "";
                <md5> "bff5fe2b9302669078b4f02bb2851791";
            }
            <script> {
                <name> "op-sfp-data.slax";
                <type> "op";
                <base64> "";
                <md5> "f023bc9d500a4bcd4f1d11853d78e487";
            }
            <script> {
                <name> "op-show-optics-hw.slax";
                <type> "op";
                <base64> "";
                <md5> "98e7813682dba8c21c3791190ce86645";
            }
            <script> {
                <name> "PPPoE-Show_IP_Count.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfSVBfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM5MDI3ICQKICogJERhdGU6IDIwMTQtMTItMTEgMTE6NTA6NTUgKzAxMDAgKFRodSwgMTEgRGVjIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IFNob3cgbnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyAoZ3JvdXBlZCBieSBJUHY0LCBJUHY2IGZyYW1lZCBhbmQgZGVsZWdhdGVkIGFkZHJlc3NlcykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgovKiBOYW1lc3BhY2UgZGVjbGFyYXRpb25zICovCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKLyogSW1wb3J0cyAqLwppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBATkFNRSA9ICJSMi4xMCAtIFBQUG9FLVNob3dfSVBfQ291biIgKi8KLyogQERFU0NSSVBUSU9OID0gIlNob3cgbnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyAoZ3JvdXBlZCBieSBJUHY0LCBJUHY2IGZyYW1lZCBhbmQgZGVsZWdhdGVkIGFkZHJlc3NlcykuIiAqLwoKLyogR2xvYmFsIHZhcmlhYmxlcyAqLwp2YXIgJHNjcmlwdG5hbWUgPSAiUFBQb0UtU2hvd19JUF9Db3VudC5zbGF4IjsKdmFyICRnZXQtc3Vic2NyaWJlcnMtY2xpZW50LXR5cGUtcHBwb2UtZGV0YWlsLXJwYzsKdmFyICRyZXN1bHRzOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKICAgICAgICB2YXIgJHR0eSA9ICRqdW5vcy1jb250ZXh0L3R0eTsKCiAgICAgICAgLyogUmVxdWVzdCBzdWJzY3JpYmVyIGluZm9ybWF0aW9uIGZpbHRlcmVkIG9uIFBQUG9FICovCiAgICAgICAgdmFyICAkZ2V0LXN1YnNjcmliZXJzLWNsaWVudC10eXBlLXBwcG9lLWRldGFpbC1ycGMgPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgIDxjbGllbnQtdHlwZT4icHBwb2UiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRyZXN1bHRzID0gamNzOmludm9rZSggJGdldC1zdWJzY3JpYmVycy1jbGllbnQtdHlwZS1wcHBvZS1kZXRhaWwtcnBjICk7CgogICAgICAgIHZhciAkaXB2NC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXAtYWRkcmVzcyk7CiAgICAgICAgdmFyICRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQgPSBjb3VudCgkcmVzdWx0cy9zdWJzY3JpYmVyW3N0YXRlID09ICJBY3RpdmUiXS9pcHY2LXByZWZpeCk7CiAgICAgICAgdmFyICRpcHY2ZnJhbWVkLWFkZHJlc3MtY291bnQgPSBjb3VudCgkcmVzdWx0cy9zdWJzY3JpYmVyW3N0YXRlID09ICJBY3RpdmUiXS9pcHY2LXVzZXItcHJlZml4KTsKCiAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJOdW1iZXIgb2YgdXNlZCBJUCBhZGRyZXNzZXMgYWNyb3NzIFBQUG9FIHNlc3Npb25zIjsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCI3Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjEiPjsKICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY0IjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIklQdjYgZGVsZWdhdGVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIklQdjYgZnJhbWVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoICR0dHkgIT0gIm5vbi10dHkiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOm91dHB1dCgiSVB2NDogIiBfICRpcHY0LWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjYgZGVsZWdhdGVkOiAiIF8gJGlwdjZkZWxlZ2F0ZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOm91dHB1dCgiSVB2NiBmcmFtZWQ6ICIgXyAkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRpcHY0LWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJGlwdjZkZWxlZ2F0ZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=";
                <md5> "180471f9dd181e388ebeb248d98b996d";
            }
            <script> {
                <name> "PPPoE-Show_Sessions_Count.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfU2Vzc2lvbnNfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldCwgRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi4xMAogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzkwMjcgJAogKiAkRGF0ZTogMjAxNC0xMi0xMSAxMTo1MDo1NSArMDEwMCAoVGh1LCAxMSBEZWMgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogU2hvdyBudW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyBwZXIgaW50ZXJmYWNlIGFuZCBjaGFzc2lzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2RldmljZSIgKi8KLyogQE5BTUUgPSAiUjIuMTAgLSBQUFBvRS1TaG93X1Nlc3Npb25zX0NvdW50IiAqLwovKiBAREVTQ1JJUFRJT04gPSAiU2hvdyBudW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyBwZXIgaW50ZXJmYWNlIGFuZCBjaGFzc2lzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIGpzcGFjZSA9ICJodHRwOi8vanNwYWNlLXV0aWxzL2FzaGFycEBqdW5pcGVyLm5ldCI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiZGlzcGxheSI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiYWxsfHVzZWQiOwogICAgfQp9CnBhcmFtICRkaXNwbGF5ID0gImFsbCI7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICBtdmFyICRzdW1QUFBvRSA9IDA7CiAgICAgICAgbXZhciAkc3VtTDJUUCA9IDA7CgogICAgICAgIHZhciAkdHR5ID0gJGp1bm9zLWNvbnRleHQvdHR5OwoKICAgICAgICB2YXIgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gPSA8Z2V0LWludGVyZmFjZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8dGVyc2U+OwogICAgICAgIH0KICAgICAgICB2YXIgJGludGVyZmFjZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gKTsKCiAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJOdW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiNyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIxIj47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiSW50ZXJmYWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlNlc3Npb25zIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlBQUG9FIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkwyVFAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICBmb3ItZWFjaCggJGludGVyZmFjZS1pbmZvcm1hdGlvbi8vcGh5c2ljYWwtaW50ZXJmYWNlICkgewoKICAgICAgICAgICAgaWYgKCBzdGFydHMtd2l0aChuYW1lLCAiZ2UiKSB8fCBzdGFydHMtd2l0aCggbmFtZSwgInhlIiApICkgewoKICAgICAgICAgICAgICAgIHZhciAkZ2V0LXN1YnNjcmliZXJzLWludCA9IDxnZXQtc3Vic2NyaWJlcnM+IHsKICAgICAgICAgICAgICAgICAgICA8cGh5c2ljYWwtaW50ZXJmYWNlPiBuYW1lOwogICAgICAgICAgICAgICAgICAgIDxjbGllbnQtdHlwZT4gInBwcG9lIjsKICAgICAgICAgICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciAkc3Vic2NyaWJlci1pbmZvcm1hdGlvbi1pbnQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlcnMtaW50ICk7CgogICAgICAgICAgICAgICAgdmFyICRzdW1JbnRQUFBvRSA9IGNvdW50KCAkc3Vic2NyaWJlci1pbmZvcm1hdGlvbi1pbnQvc3Vic2NyaWJlclsgYWNjZXNzLXR5cGUgPT0gIlBQUG9FIiBdICk7CiAgICAgICAgICAgICAgICB2YXIgJHN1bUludEwyVFAgPSBjb3VudCggJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50L3N1YnNjcmliZXJbIGNvbnRhaW5zKCBTdGF0ZSwgIlR1bm5lbGVkIiApIF0gKTsKCiAgICAgICAgICAgICAgICBpZiAoICRzdW1JbnRQUFBvRSA+IDAgfHwgJGRpc3BsYXkgPT0gImFsbCIgKSB7CgogICAgICAgICAgICAgICAgICAgIHNldCAkc3VtUFBQb0UgPSAkc3VtUFBQb0UgKyAkc3VtSW50UFBQb0U7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzdW1MMlRQID0gJHN1bUwyVFAgKyAkc3VtSW50TDJUUDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIGpjczpwcmludGYoICJJbnRlcmZhY2U6ICUtMTVzIFNlc3Npb25zOiAlNXMgUFBQb0U6ICU1cyBMMlRQOiAlNXMiLCBuYW1lLCAkc3VtSW50UFBQb0UsICRzdW1JbnRQUFBvRSAtICRzdW1JbnRMMlRQLCAkc3VtSW50TDJUUCApICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKG5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bUludFBQUG9FKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRQUFBvRSAtICRzdW1JbnRMMlRQKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRMMlRQKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIGpjczpwcmludGYoICJDaGFzc2lzOiAlMTdzIFNlc3Npb25zOiAlNXMgUFBQb0U6ICU1cyBMMlRQOiAlNXNcciIsICIgIiwgJHN1bVBQUG9FLCAkc3VtUFBQb0UgLSAkc3VtTDJUUCwgJHN1bUwyVFAgKSApOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6IDIwcHggIWltcG9ydGFudDsiPiB7CiAgICAgICAgICAgICAgICA8dGQ+IHsgZXhwciAoICIiICk7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCJDaGFzc2lzIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtUFBQb0UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bVBQUG9FIC0gJHN1bUwyVFApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bUwyVFApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRjb25uZWN0aW9uICk7CiAgICB9CgogICAgfSAvKiBib2R5ICovCiAgICB9IC8qIGhlYWQgKi8KICAgIH0gLyogaHRtbCAqLwp9Cg==";
                <md5> "6ee7b7ca516cdc998a54d18ad16ff0d9";
            }
            <script> {
                <name> "show-subscriber.slax";
                <type> "op";
                <base64> "";
                <md5> "6464cb09f0676469ddf71fe969d4fbcb";
            }

        } /* ... embedded scripts */
    
        /* parse credentials for selected devices */
        var $devices = jspace:credentials();
    
        /* counter for result summary */
        mvar $deviceCounter = 0;
        mvar $connectionSuccess = 0;
        mvar $connectionFailed = 0;
        mvar $installSuccess = 0;
        mvar $installFailed = 0;
        mvar $commitSuccess = 0;
        mvar $commitFailed = 0;
        mvar $autocleanSuccess = 0;
        mvar $autocleanFailed = 0;
    
        mvar $results = <info> "installer results";
        mvar $csvResultBNG = "BNG%2CRESULT%2CCOMMIT%2CMESSAGE%2CAUTOCLEAN%2CMESSAGE%0A";
        mvar $csvResultFiles = "BNG%2CFILES%2CRESULT%2CMD5%2CMESSAGE%0A";
    
        if ( $devices ) {
            for-each( $devices/device) {
                set $deviceCounter = $deviceCounter +1;
    
                var $local = jcs:open( (target) , (user) , (passwd) );
                var $devicename = (host);
    
                if ( $local//self::xnm:error ) {
                    set $connectionFailed = $connectionFailed +1;
                    append $results += <device> {
                        <host> $devicename;
                        <connection-error>;
                    }
                } else {
                    set $connectionSuccess = $connectionSuccess +1;
    
                    mvar $commitResult = false();
                    var $fileResult := <result> {
                        for-each ( $embedded//script ) {
                            call file-put( $local, $re = "re0", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                            call file-put( $local, $re = "re1", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                        }
                    }
                    if ( $fileResult//error ) {
                        set $installFailed = $installFailed +1;
                        set $commitResult = <xnm:error> {
                            <message> "not commited because script install failed";
                        }
                    } else {
                        set $installSuccess = $installSuccess +1;
                        if ( $commit == "true" ) { 
                            var $commit-configuration = <commit-configuration> {
                                <log> "autoclean via installer";
                                <force-synchronize>;
                            }
                            set $commitResult = jcs:execute( $local, $commit-configuration );
                            if ( $commitResult//commit-success ) {
                                set $commitSuccess = $commitSuccess +1;
                            } else {
                                set $commitFailed = $commitFailed +1;
                            }
                        }
                    }
    
                    var $autoclean-tmp = <command> "op url /var/db/scripts/op/iceaaa-autoclean-tmp.slax";
                    var $autocleanResult = jcs:execute( $local, $autoclean-tmp );
                    if ( $autocleanResult//self::xnm:error ) {
                        set $autocleanFailed = $autocleanFailed +1;
                    } else {
                        set $autocleanSuccess = $autocleanSuccess +1;
                    }
    
                    append $results += <device> {
                        <host> $devicename;
                        <files> {
                            copy-of $fileResult;
                        }
                        if ($commitResult) {
                            <commit> {
                                copy-of $commitResult;
                            }
                        }
                        <autoclean> {
                            if ( $autocleanResult//self::xnm:error ) {
                                copy-of $autocleanResult;
                            } else {
                                <enabled>;
                            }
                        }
                    }
                }
                var $closeResult = jcs:close( $local );
            }
        }
        <output> {
            <HTML> {
                <HEAD> {
                    <title> "iCEAAA Scripts Version R2.10";
                    <style type="text/css"> {
                        expr "body { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000;border-style: solid;border-color: transparent;background-color: white}";
                        expr "td { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000; }";
                        expr "p { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 14px;color:#000; }";
                        expr "table { font-size: 1.0em;border-collapse: collapse;width: 99% }";
                        expr "progress[value] { background-color: #eee; border-radius: 2px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset; }";
                        expr "#tableheader { font-weight: bolder;text-align: center;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderleft { font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderright { font-weight: bolder;text-align: right;background-color: #7592A9;color: #fff }";
                        expr "#tablereverse { font-size: 16px; font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#celltitle { font-weight: bolder }";
                        expr "#cellwarning { text-align: center; background-color: #ff0000; color: #fff; font-weight: bolder; }";
                        expr "#cellamber { text-align: center; background-color: #f87431; color: #fff; font-weight: bolder; }";
                        expr "#center {text-align: center}";
                        expr "#failed { color: red }";
                        expr "#failed2 { color: red; font-style: italic; }";
                        expr "#content { margin-bottom: 15px; }";
                        expr ".footer { position: fixed; bottom: 0px; width: 100%; background-color: white; margin: 0px; }";
                    }
                }
                <BODY> {
                    /* Java Script ... */
                    <script> {
                        expr "function toggleVisibility(id) {";
                        expr "    if(document.getElementById(id).style.display == 'table-row-group') {";
                        expr "        document.getElementById(id).style.display = 'none';";
                        expr "    } else {";
                        expr "        document.getElementById(id).style.display = 'table-row-group';";
                        expr "    }";
                        expr "}";
                        expr "function openInNewWindow() {";
                        expr "    var myWindow = window.open('about:blank', 'ExportWindow', 'scrollbars=yes,menubar=yes,location=no');";
                        expr "    myWindow.document.write( document.getElementsByTagName( 'html' )[0].outerHTML );";
                        expr "    var openButton = myWindow.document.getElementById('openInNewWindowButton');";
                        expr "    openButton.parentNode.removeChild( openButton );";
                        expr "}";
                    }
                    <div id="content"> {
                        <p style="text-align: center; font-family: Verdana, Georgia, Arial, sans-serif, bold; font-size: 18px; color:#000;"> { 
                            expr "iCEAAA Scripts Installer Version R2.10";
                        }
                        <p> { 
                            expr "Summary Result for " _ $deviceCounter _ " Devices";
                        }
                        <table> {
                            <colgroup> {
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:1%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "SUCCESSFUL";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FAILED";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Connections (NETCONF)";
                                }
                                <td> {
                                    expr $connectionSuccess;
                                }
                                <td> {
                                    expr $connectionFailed;
                                }
                                mvar $connectionPercent = 0;
                                <td> {
                                    if ($connectionSuccess > 0) {
                                        set $connectionPercent = floor($connectionSuccess div ($connectionSuccess + $connectionFailed) * 100 );
                                    }
                                    <progress max="100" value=$connectionPercent>;
                                }
                                <td> {
                                    expr $connectionPercent _ "%";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Installation";
                                }
                                <td> {
                                    expr $installSuccess;
                                }
                                <td> {
                                    expr $installFailed;
                                }
                                mvar $installPercent = 0;
                                <td> {
                                    if ($installSuccess > 0) {
                                        set $installPercent = floor($installSuccess div ($installSuccess + $installFailed) * 100 );
                                    }
                                    <progress max="100" value=$installPercent>;
                                }
                                <td> {
                                    expr $installPercent _ "%";
                                }
                            }
                            if ( $commit == "true" ) {
                                <tr> {
                                    <td> {
                                        expr "Commit";
                                    }
                                    <td> {
                                        expr $commitSuccess;
                                    }
                                    <td> {
                                        expr $commitFailed;
                                    }
                                    mvar $commitPercent = 0;
                                    <td> {
                                        if ($commitSuccess > 0) {
                                            set $commitPercent = floor($commitSuccess div ($commitSuccess + $commitFailed) * 100 );
                                        }
                                        <progress max="100" value=$commitPercent>;
                                    }
                                    <td> {
                                        expr $commitPercent _ "%";
                                    }
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Autoclean Enabled";
                                }
                                <td> {
                                    expr $autocleanSuccess;
                                }
                                <td> {
                                    expr $autocleanFailed;
                                }
                                mvar $autocleanPercent = 0;
                                <td> {
                                    if ($autocleanSuccess > 0) {
                                        set $autocleanPercent = floor($autocleanSuccess div ($autocleanSuccess + $autocleanFailed) * 100 );
                                    }
                                    <progress max="100" value=$autocleanPercent>;
                                }
                                <td> {
                                    expr $autocleanPercent _ "%";
                                }
                            }
                        }
                        <br>;
                        <input id="openInNewWindowButton" type="Button" value="Open in Window" onclick="openInNewWindow(); return false;">;
                        <p> { 
                            expr "Detailed Result";
                        }
                        <table> {
                            <colgroup> {
                                <col style="width:15%; white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "BNG";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FILES";
                                }
                                <th id="tableheaderleft"> {
                                    expr "RESULT";
                                }
                                <th id="tableheaderleft"> {
                                    expr "MD5";
                                }
                            }
                            for-each ( $results//device ) {
                                var $bng = host;
                                var $detailsTag = "details" _ $bng;
                                set $csvResultBNG = $csvResultBNG _ $bng _ "%2C";
                                <tr> {
                                    <td> {
                                        expr $bng;
                                    }
                                    <td> {
                                        <input type="Button" value="Details" onclick="toggleVisibility('" _ $detailsTag _ "');">;
                                    }
                                    if ( .//error || .//xnm:error || .//connection-error ) {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <td id="failed"> {
                                            expr "failed";
                                        }
                                    } else { 
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C";
                                        <td> {
                                            expr "successful";
                                        }
                                    }
                                    <td> {
                                        expr "";
                                    }
                                }
                                <tbody id=$detailsTag style="display: none;"> {
                                    if ( $commit == "true" ) {
                                        /* commit result ... */
                                        if ( .//commit-success ) {
                                            set $csvResultBNG = $csvResultBNG _ "successful%2C%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td> {
                                                    expr "successful";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                        } else {
                                            set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td id="failed"> {
                                                    expr "failed";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                            for-each ( ./commit//xnm:error ) {
                                                var $lines = jcs:break-lines( message );
                                                for-each( $lines ) {
                                                    set $csvResultBNG = $csvResultBNG _ .;
                                                    <tr> {
                                                        <td> {
                                                            expr "";
                                                        }
                                                        <td colspan="3" id="failed2"> {
                                                            expr "error: " _ .;
                                                        }
                                                    }
                                                }
                                            }
                                            set $csvResultBNG = $csvResultBNG _ "%2C";
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "%2C%2C";
                                    }
                                    /* autoclean result ... */
                                    if ( .//autoclean/enabled ) {
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C%0A";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td> {
                                                expr "successful";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td id="failed"> {
                                                expr "failed";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                        for-each ( ./autoclean//xnm:error ) {
                                            var $lines = jcs:break-lines( message );
                                            for-each( $lines ) {
                                                set $csvResultBNG = $csvResultBNG _ .;
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        }
                                        set $csvResultBNG = $csvResultBNG _ "%0A";
                                    }
                                    /* file results ... */
                                    for-each ( .//file ) {
                                        set $csvResultFiles = $csvResultFiles _ $bng _ "%2C" _ name _ "%2C" _ result _ "%2C" _ md5 _ "%2C";
                                        if ( error ) {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td id="failed"> {
                                                    expr result;
                                                }
                                                <td id="failed"> {
                                                    expr md5;
                                                }
                                            }
                                            for-each ( error/message ) {
                                                set $csvResultFiles = $csvResultFiles _ . _" ";
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        } else {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td> {
                                                    expr result;
                                                }
                                                <td> {
                                                    expr md5;
                                                }
                                            }
                                        }
                                        set $csvResultFiles = $csvResultFiles _"%0A";
                                    }
                                }
                            }
                        }
                        <br>;
                        set $csvResultBNG = str:replace( $csvResultBNG, " ", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, " ", "%20" );
                        set $csvResultBNG = str:replace( $csvResultBNG, ",", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, ",", "%20" );
                        <a href="data:application/octet-stream," _ $csvResultBNG _ ""> {
                            expr "Download CSV BNG";
                        }
                        <a href="data:application/octet-stream," _ $csvResultFiles _ ""> {
                            expr "Download CSV Files";
                        }
                        <br>;
                    }
                    var $duration = date:seconds() - date:seconds( $localtime );
                    <p class="footer" style="text-align: left; font-family: Verdana, Georgia, Arial, sans-serif; font-size: 9px; color:#000;"> { 
                        expr "Date: " _ $localtime _ " Execution Time: " _ $duration _ "s";
                    }
                } /* ... BODY */
            }
        }
    }
}

/*
 * Copy script file from base64 string to routing-engine.
 */
template file-put( $local, $re, $type, $name, $base64, $md5 ) {
    var $filename = $re _ ":/var/db/scripts/" _ $type _ "/" _ $name;
    var $filePut = {
        <file-put> {
            <filename> $filename;
            <encoding> "base64";
            <permission> "644";
            <delete-if-exist>;
            <file-contents> $base64;
        }
    }
    var $result = jcs:execute( $local, $filePut );
    var $return := <file> {
        <name> $filename;
        <re> $re;
        if ( $result//self::xnm:error ) {
            <result> "failed";
            <md5> "unknown";
            <error> {
                for-each( $result//self::xnm:error ) {
                    <message> message;
                }
            }
        } else {
            <result> "successful";
            var $getChecksum = <get-checksum-information> { 
                <path> $filename;
            }
            var $checksum = jcs:execute( $local, $getChecksum );
            if ( $checksum//checksum == $md5 ) {
                <md5> "okay";
            } else {
                <md5> "failed";
                <error>;
            }
        }
    }
    copy-of $return;
}
/*
 * This function reads the credentials that are automatically supplied to the script 
 * when the annotation to pass the device credentials is used. this is a requirement
 * for a locally executed grouped execution script, as the script must handle all
 * device connections.
 */
<func:function name="jspace:credentials"> {
    if( $CONTEXT ) {
        var $splitCredentials = str:split( $credentials, "\\;" );
        var $targets := {
            for-each ( $splitCredentials ) {
                var $splitCredential = str:split( ., "\\:" );
                var $user-target = str:split($splitCredential[1], "\@");
                var $host = substring-before( substring-after( $deviceipmap, substring-after( $splitCredential[1], "@" ) _ "\":\"" ), "\"" );
                <device> {
                    <target> {
                        expr $user-target[2];
                    }
                    <user> {
                        expr $user-target[1];
                    }
                    <passwd> {
                        expr $splitCredential[2];
                    }
                    <host> {
                        expr $host;
                    }
                }
            }
        }
        <func:result select="$targets">;
    }
    else {
        <func:result select="false()">;
    }
}