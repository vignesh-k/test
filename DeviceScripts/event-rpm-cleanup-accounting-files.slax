/*
 * Filename      : event-rpm-cleanup.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : MX TRIO
 * Release       : Junos 12.2+
 * Version       : 1.0
 * 
 * Description   : Cleanup historic statistic files
 *
 */

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns date = "http://exslt.org/dates-and-times";

/* @NAME = "RPM Cleanup" */
/* @DESCRIPTION = "Cleanup historic statistic files" */

import "../import/junos.xsl";

var $local = jcs:open();

var $arguments = {
	<argument> {
		<name> "PATH";
		<description> "Path where files are located.";
	}
	<argument> {
		<name> "AGE";
		<description> "Age in seconds afterwhich removal occurs.";
	}
}
param $PATH;
param $AGE;
var $path-to-files = {
	if ( substring( $PATH , string-length( $PATH ) , 1 ) != "/" ) {
		expr $PATH _ "/";
	}
	else {
		expr $PATH;
	}
}

match / {
	<event-script-results> {

		/* abort if no connection to local mgd */
    if ($local/..//xnm:error) {
			call rpc_failure($rpc = $local/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
    }

    /* check current RE is master RE. Stop execution if not */
    var $re_status = { call is_master(); }
    if ($re_status != "master") {
      <xsl:message terminate="yes"> "Script not running on master RE. Stopping execution";
    }

    	var $file-list-rpc = <file-list> {
    		<path> $path-to-files;
    		<detail>;
    	}
    	var $results = jcs:execute( $local , $file-list-rpc );
    	if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error obtaining list of files");
			<xsl:message terminate="yes"> ;
		}
				
    	for-each ( $results/directory/file-information ) {
    		if ( ( date:seconds( date:duration() ) - (./file-date) ) > $AGE ) {
    			var $file-delete-rpc = <file-delete> {
    				<path> $path-to-files _ (./file-name);
				}
				var $file-delete = jcs:execute ( $local , $file-delete-rpc );
				if ($file-delete/..//xnm:error) {
    				call rpc_failure($rpc = $file-delete/.., $message = "Error removing file");
    				<xsl:message terminate="yes"> ;
				}
			}
		}
    	/* log successful run of script */
    	var $syslog-message = "Purge of accounting-option files in " _ $path-to-files _ " completed.";
		expr jcs:syslog("daemon.notice", $syslog-message);
		
		var $close-results = jcs:close( $local );
		if ($close-results/..//xnm:error) {
    		call rpc_failure($rpc = $close-results/.., $message = "Error closing connection");
    		<xsl:message terminate="yes"> ;
		}
	}
}

template is_master() {
  if ( event-script-input/junos-context ) {
    if ( event-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else if ( commit-script-input/junos-context ) {
    if ( commit-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else if ( op-script-input/junos-context ) {
    if ( op-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else {
    var $re_rpc = <get-route-engine-information> ;
    var $re = jcs:execute($local, $re_rpc);
    if ($re/..//xnm:error) {
      call rpc_failure($rpc = $re/.., $message = "Error communicating to determine if master");
      <xsl:message terminate="yes"> ;
    }

    /* if there is only one RE then is has to be master */
    if ( $re/route-engine ) {
      if ( count( $re/route-engine ) == 1 ) {
        <output> "master";
      }
      /* if there is more than one RE this XPath statement is only true on the master RE */
      else if ( $re/route-engine[mastership-state == "master"]/load-average-one ) {
        <output> "master";
      }
      else {
        <output> "backup";
      }
    }
    else {
      var $xml = { copy-of $re; }
      <xsl:message terminate="yes"> "ERROR: Unexpected response: " _ $xml;
    }
  }
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
	expr jcs:syslog("daemon.error", $message);
	for-each ($rpc//xnm:error) {
		expr jcs:syslog("daemon.error", message);
	}
}
