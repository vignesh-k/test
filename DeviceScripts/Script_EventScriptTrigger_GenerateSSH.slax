/* xxx */

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns redirect extension = "org.apache.xalan.xslt.extensions.Redirect";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Trigger event script _ Generate SSH Key" */
/* @DESCRIPTION = "Lalala." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'ServerIP','defaultvalue':'10.201.100.100'},{'name':'sshKey','defaultvalue':'AAAAB3NzaC1yc2EAAAADAQABAAABAQCorHEKBAovNSq4n59kZECfy3BrPg/dxqbPojnsf81RwoWWxCjM/4Kv2pMDdrPUorcpIU/QasLP2SgYE7m0ZfK3SQqdLewdxeMw8KSaQzEku8Qtqlw0m8Oo8HN8xxPGkNUqujQsnl9pbieZfAw1cWn7/UGzSAgnemeCtKlSUs1RVRnYfqHsbpd8CUVRBbzV5UNJRHV4Bx8khd+azguqQFlVQ1oUb/besZpkmps9AuZaLBuDi2R6QHkk0HfUiYPjEYZ7Qg3aKb4JGyPyRvzgJjnx3g1w99M2aq6ouU1PxvFz8piWoGiDlvmUc+Y62kAbSJa+8kn6SVYnxaRDSYKLGrp1'}]" */
/* @PASSDEVICECREDENTIALS = "true" */
		
mvar $counter = 0;
mvar $output = "";

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf. Kann mehrere Devices enthalten.";
	}
	<argument> {
		<name> "ServerIP";
		<description> "IP of server.";
	}
	<argument> {
		<name> "sshKey";
		<description> "SSH Key to write to known_hosts.";
	}
}
param $CONTEXT;
param $ServerIP;
param $sshKey;

match / {
	<op-script-results> {
		<output> "Context: " _ $CONTEXT _ " \nCredentials: " _ $credentials _ "\n";
		
		mvar $count = 1;    /*count of devices    */
		mvar $hostname;       /* credentials of user@ip           */
		mvar $splitHostname;  /* array of user and ip credentials */
		mvar $ip;             /* credentials ip address           */
		mvar $user;           /* credentials username             */
		mvar $password;       /* credentials password             */
		
		/* Split interfaces and Credentials */
		var $devices = jcs:split("\\|", $CONTEXT);
		var $splitCredentials = str:split( $credentials , "\\;" );
				
		/*var $results;*/
		
		/*<output> "Engine-ID fuer ist " _ $results/snmp-v3-general-information/snmp-v3-engine-information/engine-id _"."  _ $hostname;*/
		
		/* Loop through every device */
		for-each ( $devices ) {
			var $myDevice = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", (.) )[2];
			<output> $count _ " " _ . _ " -> " _ $myDevice _ ":" _ "\n\n";
			
			/* Using the count of unique devices found, the correct connection */
            /* parameters to be used can be derived from $splitCredentials     */
            var $splitCredential = str:split( $splitCredentials[$count] , "\\:" );
			set $count = $count + 1;
			
            set $hostname = $splitCredential[1];
            set $password = $splitCredential[2];
            set $splitHostname = str:split( $hostname[1] , "\@");
            set $user = $splitHostname[1];
            set $ip = $splitHostname[2];
			
            var $connection = jcs:open( $ip , $user , $password );

            if ($connection/..//xnm:error) {
            	call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
            	<xsl:message terminate="yes"> ;
			}
			
			var $filename = "/var/home/space/doSomeAction";
			/*var $contentToWrite = "CreateSSH;" _ $ip _ ";" _ $user _ "";*/
			var $contentToWrite = "CreateSSH;" _ $ServerIP _ ";" _ $sshKey _ "";
			
			<output> "Trying to write \n" _ $ServerIP _ "\n" _ $sshKey _ "";
			
			var $reRPC = <get-route-engine-information>;
			var $reResult = jcs:execute( $connection , $reRPC );
			
			/* Sets destination and source RE according to current RE. */
			var $reCur = { expr "re" _ $reResult/route-engine[mastership-priority="master"]/slot; }
			var $reDest = { expr "re" _ $reResult/route-engine[mastership-priority="backup"]/slot; }			
			
			var  $write-rpc_one = <file-put> {
				<filename> "" _ $filename;
				<permission> "644";
				<encoding> "ascii";
				<delete-if-exist>;
				<file-contents> $contentToWrite;
			}
            var $results_one = jcs:execute( $connection , $write-rpc_one );
			
			/*var  $write-rpc_two = <file-put> {
				<filename> "re1:" _ $filename;
				<permission> "644";
				<encoding> "ascii";
				<delete-if-exist>;
				<file-contents> $contentToWrite;
			}*/
			/*<output> "Copying from " _ $reCur _ " to " _ $reDest _ ".";*/
			var  $write-rpc_two = {
				<file-copy> {
					<destination> $reDest _ ":" _ $filename;
					<source> $reCur _ ":" _ $filename;
				}
			}
            var $results_two = jcs:execute( $connection, $write-rpc_two );
			
            if ($results_one/..//xnm:error) {
            	/*call rpc_failure($rpc = $results_one/.., $message = "Error executing command show configuration interfaces");*/
				<output> "Could not create file on " _ $reCur _ ":";
				<output> $results_two/..//xnm:error;
            	<xsl:message terminate="yes"> ;
			}
			if ($results_two/..//xnm:error) {
            	/*call rpc_failure($rpc = $results_two/.., $message = "Error executing command show configuration interfaces");*/
				<output> "Could not create file on " _ $reDest _ ":";
				<output> $results_two/..//xnm:error;
            	<xsl:message terminate="yes"> ;
			}
			
			<output> "If no error was thrown: wrote files on re0 and re1.";
			
			/*mvar $booleanTester = true(); mvar $try = 0; var $maxTries = 3;
			while ( $booleanTester ) {
				var $lock-results = jcs:execute( $connection, "lock-configuration" );
				if( $lock-results//self::xnm:error ) {
					if ( $try > $maxTries ) {
						set $booleanTester = false();
						<output> "[LOG] ERR044: Konnte Datenbank nicht exklusiv belegen.";
						<xsl:message terminate="yes"> "Konnte Datenbank nicht exklusiv belegen.";
					}
					<output> "Fehler beim exklusiven Zugriff auf Datenbank. Vesuch Nummer " _ $try _ " von " _ $maxTries _ ". Versuche erneut.";
					expr jcs:sleep( 10 );	* Wait some seconds.. *
				} else {
					set $booleanTester = false();
				}
			}*/
			
			/* expr "Zeit: " _ format-number( date:hour-in-day(), "00" ) _ ":" _ format-number( date:minute-in-hour(), "00" ) _ ":" _ format-number( date:second-in-minute(), "00" ) _ "."; */
			mvar $hh = format-number( date:hour-in-day(), "00" );
			mvar $min = format-number( date:minute-in-hour(), "00" ) + 2;
			if ( ( $min div 60 ) > 1 ) {
				set $hh = ( $hh + 1 ) mod 24; set $min = $min mod 60;
			}
			
			var $setTime = format-number( $hh, "00" ) _ ":" _ format-number( $min, "00" ) _ ":" _ format-number( date:second-in-minute(), "00" );
			/*var $configRpcs = <load-configuration action="merge"> {
				<configuration> {
					<event-options> {
						<generate-event> {
							<name> "EVENT-SSH-CREATE";
							<time-of-day> $setTime;
						}
						<policy> {
							<name> "EVENT-SSH-CREATE";
							<events> "EVENT-SSH-CREATE";
							<then> {
								<event-script> {
									<name> "EVENT-SSH-CREATE.slax";
								}
							}
						}
						<event-script> {
							<file> {
								<name> "EVENT-SSH-CREATE.slax";
							}
						}
					}
				}
			}*/
			var $configRpcs = {
				<configuration> {
					<event-options> {
						<generate-event> {
							<name> "EVENT-SSH-CREATE";
							<time-of-day> $setTime;
						}
						<policy> {
							<name> "EVENT-SSH-CREATE";
							<events> "EVENT-SSH-CREATE";
							<then> {
								<event-script> {
									<name> "Script_Event_doCommand.slax";
								}
							}
						}
						<event-script> {
							<file> {
								<name> "Script_Event_doCommand.slax";
							}
						}
					}
				}
			}
			<output> "Trying to change configuration to create event. Time for event: " _ $setTime _ ".";
			var $load-config-results := { call jcs:load-configuration($connection, $configuration = $configRpcs); }
			if ($load-config-results//self::xnm:error) {
				<output> "Could not change configuration to create event. Reason: " _ $load-config-results//self::xnm:error;
			} else {
				<output> "Worked?! o.O";
				expr jcs:syslog("daemon.notice", "GenerateSSH: Created event. Time: " _ $setTime _ "." );
			}
			
			/*var $load-results = jcs:execute( $connection, $configRpcs );
			if ($load-results/..//xnm:error) {
				<output> "Could not change configuration to create event. Reason: " _ $load-results/..//xnm:error;
			}
			
			var $commit-results = jcs:execute($connection, "commit-configuration");
			if( $commit-results//self::xnm:error ) {
				<output> "Could not commit configuration. Reason: " _ $commit-results/..//xnm:error;
				*<xsl:message terminate="yes"> "Commit konnte nich durchgeführt werden.";*
				var $rollbackRPC = <load-configuration rollback=0>;
				var $rb-results = jcs:execute( $connection, $rollbackRPC );
				if( $rb-results//self::xnm:error ) {
					<output> "[LOG] ERR066 Rollback nicht erfolgreich.";
				} else {
					<output> "[LOG] Rollback erfolgreich.";
				}
			}
			
			var $unlockRpc = <unlock-database>;
			var $unlock-results = jcs:execute( $connection, $unlockRpc );
			if ($unlock-results/..//xnm:error) {
            	<output> "Could NOT unlock database. This has to be done manually, else the node will have some problems..";
				<output> $unlock-results/..//xnm:error;
			}*/
			
            var $close-results = jcs:close ( $connection );
            if ($close-results/..//xnm:error) {
            	call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
            	<xsl:message terminate="yes"> ;
			}
			
			<output> "Aaaaand.. done.";
			
			/*var $results = jcs:invoke( ., $get-rpc );*/
			/* Known Errors */
			/*if ( $results//self::xnm:error ) {
				for-each ( $results//self::xnm:error ) {
					<errors> message;
				}
			}*/

		}

		
		/*<output> "------------------------------------------------";
		<output> " ****  ****  **** End of script ****  ****  ****";
		<output> "------------------------------------------------";*/
		
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
	expr jcs:syslog("daemon.error", $message);
	for-each ($rpc//xnm:error) {
		expr jcs:syslog("daemon.error", message);
	}
}

/*

<configuration> {
	<event-options> {
		<generate-event> {
			<name> "EVENT-SSH-CREATE";
			<time-of-day> "06:00:00";
		}
		<policy> {
			<name> "EVENT-SSH-CREATE";
			<events> "EVENT-SSH-CREATE";
			<then> {
				<event-script> {
					<name> event-dom-signal-check.slax;
				}
			}
		}
		<event-script> {
			<file> {
				<name> event-dom-signal-check.slax;
			}
		}
	}
}


<configuration>
  <event-options>
    <generate-event operation="create">
      <name>EVENT-SSH-CREATE</name>
      <time-of-day>06:00:01</time-of-day>
    </generate-event>
    <policy operation="create">
      <name>EVENT-SSH-CREATE</name>
	  EVENT-SSH-CREATE
      <then>
        <event-script operation="create">
          <name>EVENT-SSH-CREATE.slax</name>
        </event-script>
      </then>
    </policy>
    <event-script>
      <file operation="create">
        <name>EVENT-SSH-CREATE.slax</name>
      </file>
    </event-script>
  </event-options>
</configuration>
*/