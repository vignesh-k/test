/*
 * Filename      : iceaaa-script-installer.slax
 * Author        : Christian Giese cgiese@juniper.net
 * Version       : D3.0.21
 *
 * Description   : ICEAAA Script Installer Version D3.0.21
 *
 */
 
/* Junos Space specific context, name and description */
/* @CONTEXT = "/device" */
/* @NAME = "ICEAAA Scripts Version D3.0.21" */
/* @DESCRIPTION = "Installer Script for ICEAAA Scripts" */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @VARIABLECONTEXT = "[{'name':'commit','selectionvalues':'false, true'}]" */
/* @CONFIRMATION = "Are you sure that you want to install the ICEAAA script version D3.0.21?"  */

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";
ns func extension = "http://exslt.org/functions";
ns jspace = "http://jspace-utils/asharp@juniper.net";

import "../import/junos.xsl";

var $arguments = {
    <argument> { 
        <name> "commit";
        <description> "commit configuration with autoclean enabled if value is true";
    }
}
param $CONTEXT;
param $commit;

var $version = "D3.0.21";

match / {
    <op-script-results> {
        var $localtime = date:date-time();

        var $embedded := <embedded-scripts> {
            <script> {
                <name> "iceaaa-dynamic-config.slax";
                <type> "commit";
                <base64> "";
                <md5> "4422e2176a3636f03abddcc8bd19ea5b";
            }
            <script> {
                <name> "a10nsp_flat-file.slax";
                <type> "event";
                <base64> "";
                <md5> "9afd25590f5fd7215bf1d1b8dca7bbdd";
            }
            <script> {
                <name> "clock-synchronization-alarm.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODU0NyAkCiAqICREYXRlOiAyMDE0LTExLTEwIDA5OjQwOjIzICswMTAwIChNb24sIDEwIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBnZW5lcmF0ZSBldmVudHMgYmFzZWQgb24gY2xvY2sgc3luY2hyb25pemF0aW9uIHN0YXR1cwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gY2xvY2stc3luY2hyb25pemF0aW9uLWFsYXJtLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJnZW5lcmF0ZSBldmVudHMgYmFzZWQgb24gY2xvY2sgc3luY2hyb25pemF0aW9uIHN0YXR1cyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKbnMgc3RyID0gImh0dHA6Ly9leHNsdC5vcmcvc3RyaW5ncyI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKLyogVGhpcyBpcyBhbiBldmVudCBzY3JpcHQgKi8KCnZhciAkZXZlbnQtZGVmaW5pdGlvbiA9IHsKICAgIDxldmVudC1vcHRpb25zPiB7CiAgICAgICAgPHBvbGljeT4gewogICAgICAgICAgICA8bmFtZT4gIkNMT0NLLVNZTkMiOwogICAgICAgICAgICA8ZXZlbnRzPiAiRVZFUlktTUlOVVRFIjsKICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgIDxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogZ2V0IGNsb2NrIHN5bmMgaW5mb3JtYXRpb24gKAogICAgICAgICAqICAgICBjbGk6IHNob3cgY2hhc3NpcyBzeW5jaHJvbml6YXRpb24gZXh0ZW5zaXZlCiAgICAgICAgICovCiAgICAgICAgdmFyICRnZXQtY2xvY2stc3luYy1pbmZvID0gPGdldC1jbG9jay1zeW5jaHJvbml6YXRpb24taW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgICAgIDxleHRlbnNpdmU+OwogICAgICAgIH0KICAgICAgICB2YXIgJGNsb2NrLXN5bmMtaW5mbyA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1jbG9jay1zeW5jLWluZm8gKTsKCiAgICAgICAgbXZhciAkc3RhdHVzUnggPSAiZGlzYWJsZWQiOwogICAgICAgIG12YXIgJHN0YXR1c1R4ID0gImRpc2FibGVkIjsKCiAgICAgICAgaWYgKCAkY2xvY2stc3luYy1pbmZvLy9jbG9jay1zeW5jaHJvbml6YXRpb24taW50ZXJmYWNlICkgewogICAgICAgICAgICBzZXQgJHN0YXR1c1J4ID0gc3RyOnJlcGxhY2UoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzLCAiICIsICItIiApOwogICAgICAgICAgICBzZXQgJHN0YXR1c1R4ID0gc3RyOnJlcGxhY2UoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzLCAiICIsICItIiApOwogICAgICAgIH0KCiAgICAgICAvKiBnZXQgdXRpbGl0eSBtaWIgaW5mb3JtYXRpb25zCiAgICAgICAgKiAgICAgY2xpOiBzaG93IHNubXAgbWliIHdhbGsgZGVjaW1hbCBqbnhVdGlsU3RyaW5nVmFsdWUuOTkuMTA4LjExMS45OS4xMDcuNDUuMTE1LjEyMS4xMTAuOTkuMTA0LjExNC4xMTEuMTEwLjEwNS4xMjIuOTcuMTE2LjEwNS4xMTEuMTEwCiAgICAgICAgKi8KICAgICAgICB2YXIgJGdldC1zbm1wLWNsb2NrLXN5bmMtaW5mbyA9IDx3YWxrLXNubXAtb2JqZWN0PiB7CiAgICAgICAgICAgICAgICA8ZGVjaW1hbD47CiAgICAgICAgICAgICAgICA8c25tcC1vYmplY3QtbmFtZT4gImpueFV0aWxTdHJpbmdWYWx1ZS45OS4xMDguMTExLjk5LjEwNy40NS4xMTUuMTIxLjExMC45OS4xMDQuMTE0LjExMS4xMTAuMTA1LjEyMi45Ny4xMTYuMTA1LjExMS4xMTAiOwogICAgICAgIH0KICAgICAgICB2YXIgJHNubXAtY2xvY2stc3luYy1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXNubXAtY2xvY2stc3luYy1pbmZvICk7CgogICAgICAgIG12YXIgJHN0YXR1c1J4U25tcCA9ICRzbm1wLWNsb2NrLXN5bmMtaW5mby8vc25tcC1vYmplY3RbIGluZGV4L2luZGV4LXZhbHVlID09ICJjbG9jay1zeW5jaHJvbml6YXRpb24taW50ZXJmYWNlLXJ4LXN0YXR1cyIgXS9vYmplY3QtdmFsdWU7CiAgICAgICAgbXZhciAkc3RhdHVzVHhTbm1wID0gJHNubXAtY2xvY2stc3luYy1pbmZvLy9zbm1wLW9iamVjdFsgaW5kZXgvaW5kZXgtdmFsdWUgPT0gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzIiBdL29iamVjdC12YWx1ZTsKCiAgICAgICAgaWYoIHN0cmluZy1sZW5ndGgoICRzdGF0dXNSeFNubXAgKSA8IDEgKSB7CiAgICAgICAgICAgIHNldCAkc3RhdHVzUnhTbm1wID0gIm5vbmUiOwogICAgICAgIH0KICAgICAgICBpZiggc3RyaW5nLWxlbmd0aCggJHN0YXR1c1R4U25tcCApIDwgMSApIHsKICAgICAgICAgICAgc2V0ICRzdGF0dXNUeFNubXAgPSAibm9uZSI7CiAgICAgICAgfQoKICAgICAgICBpZiAoICRzdGF0dXNSeCAhPSAkc3RhdHVzUnhTbm1wICkgewogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC10cmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzFdPWNsb2NrLXN5bmMtcngtIiBfICRzdGF0dXNSeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPXN0YXR1cywgIiAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRzdGF0dXNSeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPW9sZC1zdGF0dXMsICIgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICRzdGF0dXNSeFNubXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyICRzbm1wVHJhcFJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC10cmFwICk7CgogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzIjsKICAgICAgICAgICAgICAgIDxvYmplY3QtdmFsdWU+ICRzdGF0dXNSeDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoICRzdGF0dXNUeCAhPSAkc3RhdHVzVHhTbm1wICkgewogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC10cmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzFdPWNsb2NrLXN5bmMtdHgtIiBfICRzdGF0dXNUeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPXN0YXR1cywgIiAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRzdGF0dXNUeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPW9sZC1zdGF0dXMsICIgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICRzdGF0dXNUeFNubXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyICRzbm1wVHJhcFJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC10cmFwICk7CgogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzIjsKICAgICAgICAgICAgICAgIDxvYmplY3QtdmFsdWU+ICRzdGF0dXNUeDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSB0aGUgY29ubmVjdGlvbiAgKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgfQp9";
                <md5> "d70cad4cedcd89c5e7f0500ce665850b";
            }
            <script> {
                <name> "event-dom-signal-check.slax";
                <type> "event";
                <base64> "";
                <md5> "470d40f4e73585d1b2d84fef0842ffee";
            }
            <script> {
                <name> "event-mib-accounting-options-configuration-etherlike.slax";
                <type> "event";
                <base64> "";
                <md5> "d84ec0814da0ca304f28d1285a136c31";
            }
            <script> {
                <name> "event-mib-accounting-options-configuration-physical.slax";
                <type> "event";
                <base64> "";
                <md5> "db210c0d2e2cbaf81180e7b92bebd2c0";
            }
            <script> {
                <name> "event-sfp-data.slax";
                <type> "event";
                <base64> "";
                <md5> "5e9ee3e47d32d8db63208d8b393bda84";
            }
            <script> {
                <name> "iceaaa-autoclean-tmp.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IEQzLjAuMjEKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM1OTc3ICQKICogJERhdGU6IDIwMTQtMDQtMTUgMTE6NTg6MTQgKzAyMDAgKFR1ZSwgMTUgQXByIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IGV2ZW50LXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbAogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gaWNlYWFhLWF1dG9jbGVhbi10bXAiICovCi8qIEBERVNDUklQVElPTiA9ICJldmVudC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgICAgICB2YXIgJGF1dG9jbGVhblN0YXR1cyA9IDx0cnVlPjsKICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSIvbWZzL3Zhci90bXAvYXV0b2NsZWFuIiBhcHBlbmQ9Im5vIj4gewogICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgfQogICAgfQp9";
                <md5> "14f87669eb7d9c07c131ee93ec8e9a5e";
            }
            <script> {
                <name> "iceaaa-clean-cache.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1jbGVhbi1jYWNoZS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODA1OCAkCiAqICREYXRlOiAyMDE0LTEwLTE0IDEwOjQ5OjQzICswMjAwIChUdWUsIDE0IE9jdCAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiByZW1vdmUgdW51c2VkIGNvbmZpZyBjYWNoZSBmaWxlcwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gaWNlYWFhLWNsZWFuLWNhY2hlLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJyZW1vdmUgdW51c2VkIGNvbmZpZyBjYWNoZSBmaWxlcyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBkYXRlID0gImh0dHA6Ly9leHNsdC5vcmcvZGF0ZXMtYW5kLXRpbWVzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgICAgICA8cG9saWN5PiB7CiAgICAgICAgICAgIDxuYW1lPiAiSUNFQUFBLUNMRUFOLUNBQ0hFIjsKICAgICAgICAgICAgPGV2ZW50cz4gIklDRUFBQS1DTEVBTi1DQUNIRSI7CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICA8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJpY2VhYWEtY2xlYW4tY2FjaGUuc2xheCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCjx4c2w6a2V5IG5hbWU9InBwcG9lLXN1YnNjcmliZXJzIiBtYXRjaD0ic3Vic2NyaWJlcnMtaW5mb3JtYXRpb24vc3Vic2NyaWJlciIgdXNlPSJzZXNzaW9uLWlkIj47CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewogICAgICAgIHZhciAkZmlsZVBhdGggPSAiL21mcy92YXIvdG1wIjsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogZ2V0IHN1YnNjcmliZXItaW5mb3JtYXRpb24gZm9yIHBwcG9lIHNlc3Npb25zICovCiAgICAgICAgdmFyICRnZXQtc3Vic2NyaWJlciA9IDxnZXQtc3Vic2NyaWJlcnM+IHsKICAgICAgICAgICAgPGNsaWVudC10eXBlPiAicHBwb2UiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVycyA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1zdWJzY3JpYmVyICk7CgogICAgICAgIC8qIGdldCBmaWxlIGxpc3QgKi8KICAgICAgICB2YXIgJGdldC1maWxlLWxpc3QgPSA8ZmlsZS1saXN0PiB7CiAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGg7CiAgICAgICAgICAgIDxkZXRhaWw+OwogICAgICAgIH0KICAgICAgICB2YXIgJGZpbGUtbGlzdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1maWxlLWxpc3QgKTsKCiAgICAgICAgLyogZGVsZXRlIGNhY2hlIGZpbGVzIGlmIGNvcnJlc3BvbmRpbmcgcHBwb2Ugc2Vzc2lvbiBpcyBtaXNzaW5nICovCiAgICAgICAgZm9yLWVhY2goICRmaWxlLWxpc3QvL2ZpbGUtaW5mb3JtYXRpb24gKSB7CiAgICAgICAgICAgIHZhciAkZmlsZU5hbWUgPSBqY3M6cmVnZXgoICJeKFtbOmRpZ2l0Ol1dKilfW1s6ZGlnaXQ6XV0qIiwgZmlsZS1uYW1lICk7CiAgICAgICAgICAgIGlmKCAkZmlsZU5hbWVbMl0gKSB7CiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRzdWJzY3JpYmVycyApIHsKICAgICAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJwcHBvZS1zdWJzY3JpYmVycyIsICRmaWxlTmFtZVsyXSAgKS9yYWRpdXMtYWNjb3VudGluZy1pZCApICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gJGZpbGVQYXRoIF8gIi8iIF8gJGZpbGVOYW1lWzFdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZmlsZS1kZWxldGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvKiBkZWxldGUgaWNlYWFhLW1hbmFnZXIgY29tbWl0IGFuZCBtYWNybyByZXN1bHQgZmlsZXMgb2xkZXIgdGhlbiAyNGggKDg2NDAwcykgKi8KICAgICAgICAgICAgICAgIGlmKCBjb250YWlucyggZmlsZS1uYW1lLCAiaWNlYWFhLW1hbmFnZXIiICkgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAoIGRhdGU6c2Vjb25kcyggZGF0ZTpkdXJhdGlvbigpICkgLSBmaWxlLWRhdGUgKSA+IDg2NDAwICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gJGZpbGVQYXRoIF8gIi8iIF8gZmlsZS1uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZmlsZS1kZWxldGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UgKCAkY29ubmVjdGlvbiApOwogICAgfQp9";
                <md5> "b116aa011ff21367f4717801733255a8";
            }
            <script> {
                <name> "iceaaa-messages.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1tZXNzYWdlcy5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMy4xWDQ5LUQyOSsKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzk1MjQgJAogKiAkRGF0ZTogMjAxNS0wMS0yOSAxNjoxNDoxNiArMDEwMCAoVGh1LCAyOSBKYW4gMjAxNSkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogc2VuZCBzZXJ2aWNlIGRlLS9hY3RpdmF0ZSBzeXNsb2dzIG1lc3NhZ2VzLCB0cmFwcyBhbmQgWE1MIGZpbGVzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIkQzLjAuMjEgLSBpY2VhYWEtbWVzc2FnZXMuc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gInNlbmQgc2VydmljZSBkZS0vYWN0aXZhdGUgc3lzbG9ncyBtZXNzYWdlcywgdHJhcHMgYW5kIFhNTCBmaWxlcyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKcGFyYW0gJGljZWFhYS1tYW5hZ2VyOwpwYXJhbSAkZmlsdGVyOwoKPHhzbDprZXkgbmFtZT0iaW50ZXJmYWNlcyIgbWF0Y2g9ImludGVyZmFjZS1pbmZvcm1hdGlvbi9sb2dpY2FsLWludGVyZmFjZSIgdXNlPSJuYW1lIj47Cjx4c2w6a2V5IG5hbWU9Im1hY3JvIiBtYXRjaD0iZ3JvdXBzL2FwcGx5LW1hY3JvIiB1c2U9Im5hbWUiPjsKCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CgogICAgICAgIC8qIG9wZW4gY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY29ubmVjdGlvbiA9IGpjczpvcGVuKCk7CgogICAgICAgIC8qIGdldCBmaWxlIGxpc3QgKi8KICAgICAgICB2YXIgJGdldEZpbGVMaXN0ID0gPGZpbGUtbGlzdD4gewogICAgICAgICAgICA8cGF0aD4gIi9tZnMvdmFyL3RtcC9jb21taXQtKiI7CiAgICAgICAgfQogICAgICAgIHZhciAkZmlsZUxpc3QgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXRGaWxlTGlzdCApOwoKICAgICAgICBmb3ItZWFjaCggJGZpbGVMaXN0Ly9maWxlLWluZm9ybWF0aW9uICkgewogICAgICAgICAgICB2YXIgJGZpbGVOYW1lID0gamNzOnJlZ2V4KCAiLipjb21taXQtKC4qKSIsIGZpbGUtbmFtZSApOwogICAgICAgICAgICBpZiAoICRmaWxlTmFtZVsyXSApIHsKCiAgICAgICAgICAgICAgICAvKiByZWFkIGNvbW1pdC1yZXN1bHQgYW5kIGRlbGV0ZSBmaWxlICovCiAgICAgICAgICAgICAgICB2YXIgJGNvbW1pdFJlc3VsdCA9IGRvY3VtZW50KCAkZmlsZU5hbWVbMV0gKTsKICAgICAgICAgICAgICAgIHZhciAkZmlsZURlbGV0ZSA9IDxmaWxlLWRlbGV0ZT4gewogICAgICAgICAgICAgICAgICAgIDxwYXRoPiAkZmlsZU5hbWVbMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJGRlbGV0ZVJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGZpbGVEZWxldGUgKTsKCiAgICAgICAgICAgICAgICB2YXIgJHRpbWVzdGFtcCA9IHN0cjpyZXBsYWNlKCBzdHI6cmVwbGFjZSggJGZpbGVOYW1lWzJdLCAiLSIsICIgIiApLCAiXyIsICI6IiApOwoKICAgICAgICAgICAgICAgIG12YXIgJGljZWFhYU1hbmFnZXIgPSA8dGltZXN0YW1wPiAkdGltZXN0YW1wOwogICAgICAgICAgICAgICAgbXZhciAkaWNlYWFhTWFuYWdlclNlcnZpY2VzID0gMDsKICAgICAgICAgICAgICAgIG12YXIgJGljZWFhYU1hbmFnZXJGaWxlcyA9IDA7CiAgICAgICAgICAgICAgICBtdmFyICRpbnRlcmZhY2VJbmZvUmV0cnkgPSAwOwoKICAgICAgICAgICAgICAgIC8qIGNoZWNrIGNvbW1pdC1yZXN1bHQgYW5kIGdlbmVyYXRlIHN5c2xvZyBtZXNzYWdlcyBhbmQgU05NUCB0cmFwcyAqLwogICAgICAgICAgICAgICAgaWYgKCAkY29tbWl0UmVzdWx0Ly9jb21taXQtc3VjY2VzcyApIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyICRnZXRJbnRlcmZhY2VJbmZvID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAiKmUtKi4qIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbXZhciAkaW50ZXJmYWNlSW5mb3MgPSBqY3M6ZXhlY3V0ZSAoICRjb25uZWN0aW9uLCAkZ2V0SW50ZXJmYWNlSW5mbyApOwoKICAgICAgICAgICAgICAgICAgICB2YXIgJGdldE1hY3JvQ29uZmlnID0gewogICAgICAgICAgICAgICAgICAgICAgICA8Z2V0LWNvbmZpZ3VyYXRpb24gZGF0YWJhc2U9ImNvbW1pdHRlZCI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb25maWd1cmF0aW9uPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3Vwcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImljZWFhYS1keW5hbWljIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICRtYWNyb0NvbmZpZyA9IGpjczpleGVjdXRlICggJGNvbm5lY3Rpb24sICRnZXRNYWNyb0NvbmZpZyApOwoKICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRjb21taXRSZXN1bHQvL3hubTp3YXJuaW5nWyBjb250YWlucyggbWVzc2FnZSwgIlNFUlZJQ0UiICkgXSAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZUxpc3QgPSBqY3M6c3BsaXQoICIsIiwgbWVzc2FnZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRsaW5lSWQgPSAkbWVzc2FnZUxpc3RbMl07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdmxhbiA9ICRtZXNzYWdlTGlzdFszXTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlVmxhbiA9ICRtZXNzYWdlTGlzdFs0XTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpZmwgPSAkbWVzc2FnZUxpc3RbNV07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc2VydmljZU5hbWUgPSAkbWVzc2FnZUxpc3RbNl07CgogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRpZkRlc2MgPSAkaWZsOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN0YXJ0cy13aXRoKCAkaWZEZXNjLCAieGUtIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRpZkRlc2MgPSAiXFwiIF8gJGlmRGVzYzsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkZXZlbnQgPSAiU0VSVklDRS1BQ1RJVkFURSI7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJGFjdGl2YXRlID0gdHJ1ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRhY2NvdW50aW5nSWQgPSAkbWVzc2FnZUxpc3RbN107CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJGRlYWN0aXZhdGVDYXVzZSA9ICJOQSI7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJG9hbVRyYXAgPSB0cnVlKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAvKiB3cml0ZSB0byBzeXNsb2cgYW5kIGNoYW5nZSBldmVudCBzdHJpbmcgaW4gY2FzZSBvZiBzZXJ2aWNlIGRlLWFjdGl2YXRlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY29udGFpbnMoIG1lc3NhZ2UsICJTRVJWSUNFLUFDVElWQVRFIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5pbmZvIiwgIkxpbmUtSWQ6ICIgXyAkbGluZUlkIF8gIiBWTEFOOiAiIF8gJHNlcnZpY2VWbGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiIFNlcnZpY2UtSWZsOiAiIF8gJGlmbCBfICIgVGltZXN0YW1wOiAiIF8gJHRpbWVzdGFtcCBfICIgLSAiIF8gJHNlcnZpY2VOYW1lIF8gIiBzZXJ2aWNlIGFjdGl2YXRlIGNvbW1pdHRlZCBhY2NvdW50aW5naWQ6ICIgXyAkYWNjb3VudGluZ0lkICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlTmFtZSA9PSAiZGhjcHJlbGF5IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJG9hbVRyYXAgPSBmYWxzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkbWVzc2FnZUxpc3RbOF0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRhY2NvdW50aW5nSWQgPSAkbWVzc2FnZUxpc3RbOF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRkZWFjdGl2YXRlQ2F1c2UgPSAkbWVzc2FnZUxpc3RbN107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5pbmZvIiwgIkxpbmUtSWQ6ICIgXyAkbGluZUlkIF8gIiBWTEFOOiAiIF8gJHNlcnZpY2VWbGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gIiBTZXJ2aWNlLUlmbDogIiBfICRpZmwgXyAiIFRpbWVzdGFtcDogIiBfICR0aW1lc3RhbXAgXyAiIC0gIiBfICRzZXJ2aWNlTmFtZSBfICIgc2VydmljZSBkZS1hY3RpdmF0ZSBjb21taXR0ZWQgd2l0aCBjYXVzZSAiIF8gJGRlYWN0aXZhdGVDYXVzZSBfICIgYWNjb3VudGluZ2lkOiAiIF8gJGFjY291bnRpbmdJZCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIuaW5mbyIsICJMaW5lLUlkOiAiIF8gJGxpbmVJZCBfICIgVkxBTjogIiBfICRzZXJ2aWNlVmxhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICIgU2VydmljZS1JZmw6ICIgXyAkaWZsIF8gIiBUaW1lc3RhbXA6ICIgXyAkdGltZXN0YW1wIF8gIiAtICIgXyAkc2VydmljZU5hbWUgXyAiIHNlcnZpY2UgZGUtYWN0aXZhdGUgY29tbWl0dGVkIGFjY291bnRpbmdpZDogIiBfICRhY2NvdW50aW5nSWQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkZXZlbnQgPSAiU0VSVklDRS1ERS1BQ1RJVkFURSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGFjdGl2YXRlID0gZmFsc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkb2FtVHJhcCA9IGZhbHNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJGljZWFhYS1tYW5hZ2VyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGljZWFhYU1hbmFnZXJTZXJ2aWNlcyA9ICRpY2VhYWFNYW5hZ2VyU2VydmljZXMgKzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBhcHBlbmQgdG8gaWNlYWFhLW1hbmFnZXIgaW5mbyAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kICRpY2VhYWFNYW5hZ2VyICs9IDxzZXJ2aWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGV2ZW50PiAkZXZlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmUtaWQ+ICRsaW5lSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2UtaWZsPiAkaWZsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlLW5hbWU+ICRzZXJ2aWNlTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZS12bGFuPiAkc2VydmljZVZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFucC10YWc+ICR2bGFuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY2NvdW50aW5nLWlkPiAkYWNjb3VudGluZ0lkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJGFjdGl2YXRlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGdldFN1YnNjcmliZXJzID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkPiAkYWNjb3VudGluZ0lkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaWVudC10eXBlPiAicHBwb2UiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzdWJzY3JpYmVycyA9IGpjczpleGVjdXRlICggJGNvbm5lY3Rpb24sICRnZXRTdWJzY3JpYmVycyApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRzdWJzY3JpYmVycy8vYWNjZXNzLXR5cGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzdWJzY3JpYmVyczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRyZXRyeSA9IHRydWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAkcmV0cnkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGlmbEluZm8gOj0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvci1lYWNoICggJGludGVyZmFjZUluZm9zICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGtleSggImludGVyZmFjZXMiLCAkaWZsICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRpZmxJbmZvLy9uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRyZXRyeSA9IGZhbHNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRpZmxJbmZvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkaW50ZXJmYWNlSW5mb1JldHJ5IDwgMTAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOnNsZWVwKDUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGludGVyZmFjZUluZm9SZXRyeSA9ICRpbnRlcmZhY2VJbmZvUmV0cnkgKzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkaW50ZXJmYWNlSW5mb3MgPSBqY3M6ZXhlY3V0ZSAoICRjb25uZWN0aW9uLCAkZ2V0SW50ZXJmYWNlSW5mbyApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkcmV0cnkgPSBmYWxzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJG1hY3JvIDo9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvci1lYWNoICggJG1hY3JvQ29uZmlnICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2Yga2V5KCAibWFjcm8iLCAiI0lDRUFBQSMiIF8gJGxpbmVJZCBfICIjIiBfICRzZXJ2aWNlVmxhbiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkbWFjcm8vL25hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJG1hY3JvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlYWN0aXZhdGUtY2F1c2U+ICRkZWFjdGl2YXRlQ2F1c2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISBjb250YWlucyggJGZpbHRlciwgJHNlcnZpY2VOYW1lICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTTk1QIHRyYXAgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmVxdWVzdFNubXBUcmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09IiBfICRldmVudCBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsyXT1MaW5lLUlkLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRsaW5lSWQgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109QU5QLVRhZywgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzNdPSIgXyAkdmxhbiBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs0XT1TZXJ2aWNlLVRhZywgIiAgICBfICJqbnhFdmVudEF2VmFsdWVbNF09IiBfICRzZXJ2aWNlVmxhbiBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs1XT1pZkRlc2MsICIgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbNV09IiBfICRpZkRlc2MgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNl09U2VydmljZS1OYW1lLCAiICAgXyAiam54RXZlbnRBdlZhbHVlWzZdPSIgXyAkc2VydmljZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBSZXN1bHQgPSBqY3M6ZXhlY3V0ZSAoICRjb25uZWN0aW9uLCAkcmVxdWVzdFNubXBUcmFwICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJG9hbVRyYXAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGdldE9hbUluZm8gPSA8Z2V0LWNmbS1pbnRlcmZhY2VzLWluZm9ybWF0aW9uPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAkaWZsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleHRlbnNpdmU+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRvYW1JbmZvID0gamNzOmV4ZWN1dGUgKCAkY29ubmVjdGlvbiwgJGdldE9hbUluZm8gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJG9hbUluZm8vL2NmbS1lbnRyeSApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRtYSA9ICRvYW1JbmZvLy9jZm0taW50ZXJmYWNlLXNlc3Npb24taWRlbnRpZmllci9jZm0tbWFpbnRlbmFuY2UtYXNzb2NpYXRpb24tbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJG1kID0gJG9hbUluZm8vL2NmbS1pbnRlcmZhY2Utc2Vzc2lvbi1pZGVudGlmaWVyL2NmbS1tYWludGVuYW5jZS1kb21haW4tbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGxldmVsID0gJG9hbUluZm8vL2NmbS1pbnRlcmZhY2Utc2Vzc2lvbi1pZGVudGlmaWVyL2NmbS1sZXZlbDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkc3RhdHVzID0gIlRJTUVPVVQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJG9hbUluZm8vL2NmbS1yZW1vdGUtbWVwLXN0YXRlID09ICJvayIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkc3RhdHVzID0gIk5PTkUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJG9hbUluZm8vL2NmbS1kZWZlY3QtcmRpLWluLXNvbWUtbWVwID09ICJ5ZXMiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRzdGF0dXMgPSAiUkRJIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcmVhZCBvYW0gc3RhdHVzIGZpbGUgLi4uIGUuZy4gL21mcy92YXIvdG1wL29hbS1nZS0wXzBfMC4xMDAwIC4uLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkb2FtRmlsZVBhdGggPSAiL21mcy92YXIvdG1wL29hbS0iIF8gJG1hOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkb2FtRmlsZSA9IGRvY3VtZW50KCAkb2FtRmlsZVBhdGggKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub3QoICRzdGF0dXMgPT0gJG9hbUZpbGUvL3N0YXR1cyApIHx8IG5vdCggJGlmbCA9PSAkb2FtRmlsZS8vaW50ZXJmYWNlICkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB1cGRhdGUgb2FtIHN0YXR1cyBmaWxlIC4uLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJG9hbUZpbGVOZXcgPSA8b2FtLXN0YXR1cz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1cz4gJHN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lc3RhbXA+ICRsb2NhbHRpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiAkaWZsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmUtaWQ+ICRsaW5lSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZS12bGFuPiAkc2VydmljZVZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YW5wLXRhZz4gJHZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWE+ICRtYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZD4gJG1kOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxldmVsPiAkbGV2ZWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpkb2N1bWVudCBtZXRob2Q9InhtbCIgaHJlZj0kb2FtRmlsZVBhdGg+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJG9hbUZpbGVOZXc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNOTVAgdHJhcCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHJlcXVlc3RTbm1wVHJhcE9hbSA9IDxyZXF1ZXN0LXNubXAtZ2VuZXJhdGUtdHJhcD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhcmlhYmxlLWJpbmRpbmdzPiAiam54RXZlbnRUcmFwRGVzY3JbMF09RXZlbnQtVHJhcCwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMV09ZXZlbnQsIGpueEV2ZW50QXZWYWx1ZVsxXT1FT0FNLUNGTS1BTEFSTS0iIF8gJHN0YXR1cyBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPUxpbmUtSWQsIGpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJGxpbmVJZCBfIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109QU5QLVRhZywgam54RXZlbnRBdlZhbHVlWzNdPSIgXyAkdmxhbiBfIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNF09U2VydmljZS1UYWcsIGpueEV2ZW50QXZWYWx1ZVs0XT0iIF8gJHNlcnZpY2VWbGFuIF8iLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs1XT1pZkRlc2MsIGpueEV2ZW50QXZWYWx1ZVs1XT0iIF8gJGlmRGVzYyBfIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbOF09TGV2ZWwsIGpueEV2ZW50QXZWYWx1ZVs4XT0iIF8gJGxldmVsIF8iLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs5XT1NRCwgam54RXZlbnRBdlZhbHVlWzldPSIgXyAkbWQgXyIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzEwXT1NQSwgam54RXZlbnRBdlZhbHVlWzEwXT0iIF8gJG1hOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc25tcFJlc3VsdE9hbSA9IGpjczpleGVjdXRlICggJGNvbm5lY3Rpb24sICRyZXF1ZXN0U25tcFRyYXBPYW0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkaWNlYWFhLW1hbmFnZXIgJiYgJGljZWFhYU1hbmFnZXJTZXJ2aWNlcyA9PSAyMDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGljZWFhYU1hbmFnZXJGaWxlID0gIi9tZnMvdmFyL3RtcC9pY2VhYWEtbWFuYWdlci1jb21taXRfIiBfICRmaWxlTmFtZVsyXSBfICJfIiBfICRpY2VhYWFNYW5hZ2VyRmlsZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRpY2VhYWFNYW5hZ2VyRmlsZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29tbWl0LXJlc3VsdD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRpY2VhYWFNYW5hZ2VyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIuaW5mbyIsICJpY2VhYWEgZmlsZSBjb250YWluaW5nIHNlcnZpY2VzIGRlLS9hY3RpdmF0ZXMgY29tbWl0dGVkICIgXyAkaWNlYWFhTWFuYWdlckZpbGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkaWNlYWFhTWFuYWdlciA9IDx0aW1lc3RhbXA+ICR0aW1lc3RhbXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGljZWFhYU1hbmFnZXJTZXJ2aWNlcyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGljZWFhYU1hbmFnZXJGaWxlcyA9ICRpY2VhYWFNYW5hZ2VyRmlsZXMgKzE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8qIGNoZWNrIGZvciBlcnJvcnMgIHJlcG9ydCB0aGVtIGlmIHRoZXkgb2NjdXJyZWQgKi8KICAgICAgICAgICAgICAgICAgICBpZiAoICRjb21taXRSZXN1bHQvL3NlbGY6OnhubTplcnJvciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkY29tbWl0UmVzdWx0Ly94bm06d2FybmluZ1sgY29udGFpbnMoIG1lc3NhZ2UsICJTRVJWSUNFIiApIF0gICkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZUxpc3QgPSBqY3M6c3BsaXQoICIsIiwgbWVzc2FnZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbGluZUlkID0gJG1lc3NhZ2VMaXN0WzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR2bGFuID0gJG1lc3NhZ2VMaXN0WzNdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlVmxhbiA9ICRtZXNzYWdlTGlzdFs0XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaWZsID0gJG1lc3NhZ2VMaXN0WzVdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlTmFtZSA9ICRtZXNzYWdlTGlzdFs2XTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRpZkRlc2MgPSAkaWZsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdGFydHMtd2l0aCggJGlmRGVzYywgInhlLSIgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGlmRGVzYyA9ICJcXCIgXyAkaWZEZXNjOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJGV2ZW50ID0gIlNFUlZJQ0UtQUNUSVZBVEUiOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHdyaXRlIHRvIHN5c2xvZyBhbmQgY2hhbmdlIGV2ZW50IHN0cmluZyBpbiBjYXNlIG9mIHNlcnZpY2UgZGUtYWN0aXZhdGUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY29udGFpbnMoIG1lc3NhZ2UsICJTRVJWSUNFLUFDVElWQVRFIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIuaW5mbyIsICJMaW5lLUlkOiAiIF8gJGxpbmVJZCBfICIgVkxBTjogIiBfICRzZXJ2aWNlVmxhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiIFNlcnZpY2UtSWZsOiAiIF8gJGlmbCBfICIgVGltZXN0YW1wOiAiIF8gJHRpbWVzdGFtcCBfICIgLSAiIF8gJHNlcnZpY2VOYW1lIF8gIiBzZXJ2aWNlIGFjdGl2YXRlIGZhaWxlZCIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5pbmZvIiwgIkxpbmUtSWQ6ICIgXyAkbGluZUlkIF8gIiBWTEFOOiAiIF8gJHNlcnZpY2VWbGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICIgU2VydmljZS1JZmw6ICIgXyAkaWZsIF8gIiBUaW1lc3RhbXA6ICIgXyAkdGltZXN0YW1wIF8gIiAtICIgXyAkc2VydmljZU5hbWUgXyAiIHNlcnZpY2UgZGUtYWN0aXZhdGUgZmFpbGVkIiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkZXZlbnQgPSAiU0VSVklDRS1ERS1BQ1RJVkFURSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkaWNlYWFhLW1hbmFnZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGljZWFhYU1hbmFnZXJTZXJ2aWNlcyA9ICRpY2VhYWFNYW5hZ2VyU2VydmljZXMgKzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogYXBwZW5kIHRvIGljZWFhYS1tYW5hZ2VyIGluZm8gKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQgJGljZWFhYU1hbmFnZXIgKz0gPHNlcnZpY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGV2ZW50PiAkZXZlbnQgXyAiLUNPTU1JVC1FUlJPUiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lLWlkPiAkbGluZUlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZS1pZmw+ICRpZmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlLW5hbWU+ICRzZXJ2aWNlTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2Utdmxhbj4gJHNlcnZpY2VWbGFuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YW5wLXRhZz4gJHZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNOTVAgdHJhcCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhcmlhYmxlLWJpbmRpbmdzPiAiam54RXZlbnRUcmFwRGVzY3JbMF09RXZlbnQtVHJhcCwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT0iIF8gJGV2ZW50IF8iLUNPTU1JVC1FUlJPUiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPUxpbmUtSWQsICIgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJGxpbmVJZCBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVszXT1BTlAtVGFnLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICR2bGFuIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzRdPVNlcnZpY2UtVGFnLCAiICAgIF8gImpueEV2ZW50QXZWYWx1ZVs0XT0iIF8gJHNlcnZpY2VWbGFuIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzVdPWlmRGVzYywgIiAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVs1XT0iIF8gJGlmRGVzYyBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs2XT1TZXJ2aWNlLU5hbWUsICIgICBfICJqbnhFdmVudEF2VmFsdWVbNl09IiBfICRzZXJ2aWNlTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc25tcFJlc3VsdCA9IGpjczpleGVjdXRlICggJGNvbm5lY3Rpb24sICRyZXF1ZXN0U25tcFRyYXAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRpY2VhYWEtbWFuYWdlciAmJiAkaWNlYWFhTWFuYWdlclNlcnZpY2VzID09IDIwMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaWNlYWFhTWFuYWdlckZpbGUgPSAiL21mcy92YXIvdG1wL2ljZWFhYS1tYW5hZ2VyLWNvbW1pdF8iIF8gJGZpbGVOYW1lWzJdIF8gIl8iIF8gJGljZWFhYU1hbmFnZXJGaWxlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9JGljZWFhYU1hbmFnZXJGaWxlIGFwcGVuZD0ieWVzIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb21taXQtcmVzdWx0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJGljZWFhYU1hbmFnZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5pbmZvIiwgImljZWFhYSBmaWxlIGNvbnRhaW5pbmcgc2VydmljZXMgZGUtL2FjdGl2YXRlcyBjb21taXR0ZWQgIiBfICRpY2VhYWFNYW5hZ2VyRmlsZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRpY2VhYWFNYW5hZ2VyID0gPHRpbWVzdGFtcD4gJHRpbWVzdGFtcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkaWNlYWFhTWFuYWdlclNlcnZpY2VzID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkaWNlYWFhTWFuYWdlckZpbGVzID0gJGljZWFhYU1hbmFnZXJGaWxlcyArMTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggJGljZWFhYS1tYW5hZ2VyICYmICRpY2VhYWFNYW5hZ2VyU2VydmljZXMgPiAwICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaWNlYWFhTWFuYWdlckZpbGUgPSAiL21mcy92YXIvdG1wL2ljZWFhYS1tYW5hZ2VyLWNvbW1pdF8iIF8gJGZpbGVOYW1lWzJdIF8gIl8iIF8gJGljZWFhYU1hbmFnZXJGaWxlczsKICAgICAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRpY2VhYWFNYW5hZ2VyRmlsZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPGNvbW1pdC1yZXN1bHQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJGljZWFhYU1hbmFnZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5pbmZvIiwgImljZWFhYSBmaWxlIGNvbnRhaW5pbmcgc2VydmljZXMgZGUtL2FjdGl2YXRlcyBjb21taXR0ZWQgIiBfICRpY2VhYWFNYW5hZ2VyRmlsZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIuaW5mbyIsICJpY2VhYWEtbWVzc2FnZXMgZmluaXNoZWQiICk7CgogICAgICAgIC8qIGNsb3NlIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQ==";
                <md5> "d5c88723fb71e47d901b1e3d60cddda0";
            }
            <script> {
                <name> "mib_acct-session-id.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IG1pYl9hY2N0LXNlc3Npb24taWQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogRDMuMC4yMQogKiBQbGF0Zm9ybSAgICAgIDogTVgKICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NTQ3ICQKICogJERhdGU6IDIwMTQtMTEtMTAgMDk6NDA6MjMgKzAxMDAgKE1vbiwgMTAgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IGV2ZW50LXNjcmlwdCB3cml0aW5nIGFsbCBhY3RpdmUgUFBQb0Ugc3Vic2NyaWJlciBpbiB0aGUgdXRpbCBNSUIKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiRDMuMC4yMSAtIG1pYl9hY2N0LXNlc3Npb24taWQuc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gImV2ZW50LXNjcmlwdCB3cml0aW5nIGFsbCBhY3RpdmUgUFBQb0Ugc3Vic2NyaWJlciBpbiB0aGUgdXRpbCBNSUIiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgICAgICA8cG9saWN5PiB7CiAgICAgICAgICAgIDxuYW1lPiAiTUlCLUFDQ1QtU0VTU0lPTi1JRCI7CiAgICAgICAgICAgIDxldmVudHM+ICJFVkVSWS1NSU5VVEUiOwogICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgPGV2ZW50LXNjcmlwdD4gewogICAgICAgICAgICAgICAgICAgIDxuYW1lPiAibWliX2FjY3Qtc2Vzc2lvbi1pZC5zbGF4IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKPHhzbDprZXkgbmFtZT0ic3Vic2NyaWJlciIgbWF0Y2g9InN1YnNjcmliZXJzLWluZm9ybWF0aW9uL3N1YnNjcmliZXIiIHVzZT0icmFkaXVzLWFjY291bnRpbmctaWQiPjsKPHhzbDprZXkgbmFtZT0ibWliIiBtYXRjaD0ic25tcC1vYmplY3QtaW5mb3JtYXRpb24vc25tcC1vYmplY3QiIHVzZT0iaW5kZXgvaW5kZXgtdmFsdWUiPjsKCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogc2hvdyBzdWJzY3JpYmVycyBjbGllbnQtdHlwZSBwcHBvZSBzdWJzY3JpYmVyLXN0YXRlIGFjdGl2ZSBkZXRhaWwgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVycy1pbmZvID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgIDxzdWJzY3JpYmVyLXN0YXRlPiAiYWN0aXZlIjsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkc3Vic2NyaWJlci1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXJzLWluZm8gKTsKCiAgICAgICAgLyogc2hvdyBzbm1wIG1pYiB3YWxrIGRlY2ltYWwgam54VXRpbFN0cmluZ1ZhbHVlLjExMi4xMTIuMTEyLjQ2ICovCiAgICAgICAgdmFyICRnZXQtc3Vic2NyaWJlci1zbm1wID0gPHdhbGstc25tcC1vYmplY3Q+IHsKICAgICAgICAgICAgICAgIDxhc2NpaT47CiAgICAgICAgICAgICAgICA8c25tcC1vYmplY3QtbmFtZT4gImpueFV0aWxTdHJpbmdWYWx1ZS4xMTIuMTEyLjExMi40NiI7CiAgICAgICAgfQogICAgICAgIHZhciAkc3Vic2NyaWJlci1zbm1wID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXItc25tcCApOwoKICAgICAgICAvKiBhZGQgbWlzc2luZyBwcHBvZSBzdWJzY3JpYmVyIHRvIHRoZSB1dGlsIE1JQiAuLi4gKi8KICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItaW5mby8vc3Vic2NyaWJlciApIHsKICAgICAgICAgICAgdmFyICRzZXNzaW9uSWQgPSBzZXNzaW9uLWlkOwogICAgICAgICAgICB2YXIgJHJhZGl1c0FjY3RJZCA9IHJhZGl1cy1hY2NvdW50aW5nLWlkOwogICAgICAgICAgICB2YXIgJGluc3RhbmNlID0gInBwcC4iIF8gJHNlc3Npb25JZDsKICAgICAgICAgICAgZm9yLWVhY2goICRzdWJzY3JpYmVyLXNubXAgKSB7CiAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJtaWIiLCAkaW5zdGFuY2UgKS9vYmplY3QtdmFsdWUgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgICAgICAgICA8aW5zdGFuY2U+ICRpbnN0YW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHJhZGl1c0FjY3RJZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICRzbm1wTWliUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiByZW1vdmUgZGlzY29ubmVjdGVkIHBwcG9lIHN1YnNjcmliZXIgdGhlIHRoZSB1dGlsIE1JQiAuLi4gKi8KICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItc25tcC8vc25tcC1vYmplY3QgKSB7CiAgICAgICAgICAgIHZhciAkcmFkaXVzQWNjdElkID0gb2JqZWN0LXZhbHVlOwogICAgICAgICAgICB2YXIgJGluc3RhbmNlID0gaW5kZXgvaW5kZXgtdmFsdWU7CiAgICAgICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1pbmZvICkgewogICAgICAgICAgICAgICAgaWYoIG5vdCgga2V5KCAic3Vic2NyaWJlciIsICRyYWRpdXNBY2N0SWQgKS9zZXNzaW9uLWlkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXIgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLWNsZWFyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYmplY3QtdHlwZT4gInN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gJGluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogY2xvc2UgdGhlIGNvbm5lY3Rpb24gICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQ==";
                <md5> "61d91174254530591f6d3bc452098af6";
            }
            <script> {
                <name> "trap_ancp.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHRyYXBfYW5jcC5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzOTA5MiAkCiAqICREYXRlOiAyMDE0LTEyLTE2IDEwOjUxOjQwICswMTAwIChUdWUsIDE2IERlYyAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBnZW5lcmF0ZXMgU05NUCB0cmFwcyBiYXNlZCBvbiBBTkNQIHN5c2xvZwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gdHJhcF9hbmNwIiAqLwovKiBAREVTQ1JJUFRJT04gPSAiZ2VuZXJhdGVzIFNOTVAgdHJhcHMgYmFzZWQgb24gQU5DUCBzeXNsb2ciICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgICAgIDxwb2xpY3k+IHsKICAgICAgICAgICAgPG5hbWU+ICJBTkNQIjsKICAgICAgICAgICAgPGV2ZW50cz4gIlNZU1RFTSI7CiAgICAgICAgICAgIDxhdHRyaWJ1dGVzLW1hdGNoPiB7CiAgICAgICAgICAgICAgICA8ZnJvbS1ldmVudC1hdHRyaWJ1dGU+ICJTWVNURU0ubWVzc2FnZSI7CiAgICAgICAgICAgICAgICA8Y29uZGl0aW9uPiAibWF0Y2hlcyI7CiAgICAgICAgICAgICAgICA8dG8tZXZlbnQtYXR0cmlidXRlLXZhbHVlPiAiYW5jcGRfc2Vzc2lvbi4qc3RhdGUiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICA8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJ0cmFwX2FuY3Auc2xheCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IC8qIC4uLiBwb2xpY3kgRU9BTV9DRk1fVElNRU9VVCIgKi8KICAgIH0KfQoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogZ2V0IHRoZSBzeXNsb2cgbWVzc2FnZSAqLwogICAgICAgIHZhciAkbWVzc2FnZSA9IGV2ZW50LXNjcmlwdC1pbnB1dC90cmlnZ2VyLWV2ZW50L21lc3NhZ2U7CgogICAgICAgIHZhciAkZXZlbnQgPSB7CiAgICAgICAgICAgIGlmKCBjb250YWlucyggJG1lc3NhZ2UsICJzdGF0ZSBpcyB1cCIgKSApIHsKICAgICAgICAgICAgICAgIDx2YWx1ZT4gIlVQIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIDx2YWx1ZT4gIkRPV04iOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgJG1lc3NhZ2VQYXJ0ID0gc3Vic3RyaW5nLWFmdGVyICggJG1lc3NhZ2UsICIgbmVpZ2hib3IgIiApOwogICAgICAgIHZhciAkbmVpZ2hib3IgPSBzdWJzdHJpbmctYmVmb3JlICggJG1lc3NhZ2VQYXJ0LCAiICIgKTsKICAgICAgICB2YXIgJHJlYXNvbiA9IHN0cjpyZXBsYWNlICggc3Vic3RyaW5nLWFmdGVyICggJG1lc3NhZ2VQYXJ0LCAiICIgKSwgIiAiLCAiLSIgKTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlcyA9IDxnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uPiB7CiAgICAgICAgICAgIDx0ZXJzZT47CiAgICAgICAgICAgIDxpbnRlcmZhY2UtbmFtZT4gIiplLSouMVs2LTldIjsKICAgICAgICB9CiAgICAgICAgdmFyICRpbnRlcmZhY2VzID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWludGVyZmFjZXMgKTsKCiAgICAgICAgdmFyICRuZXR3b3JrID0gamNzOnBhcnNlLWlwKCRuZWlnaGJvciBfICIvMzAiKVs0XTsKICAgICAgICBtdmFyICRpZmwgPSAkaW50ZXJmYWNlcy8vbG9naWNhbC1pbnRlcmZhY2VbIGpjczpwYXJzZS1pcCguLy9pZmEtbG9jYWwpWzRdID09ICRuZXR3b3JrIF0vbmFtZTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPGJyaWVmPjsKICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAkaWZsOwogICAgICAgIH0KICAgICAgICB2YXIgJGludGVyZmFjZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gKTsKICAgICAgICB2YXIgJGxpbmstYWRkcmVzcy1wYXJ0cyA9IGpjczpzcGxpdCAoICJbWy5zcGFjZS5dXSIsICRpbnRlcmZhY2UtaW5mb3JtYXRpb24vL2xpbmstYWRkcmVzcyApOwogICAgICAgIHZhciAkdmxhbiA9IHsKICAgICAgICAgICAgaWYgKCBjb3VudCggJGxpbmstYWRkcmVzcy1wYXJ0cykgPiA0ICkgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbM10sICIuIiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbMl0sICIuIiApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIHN0YXJ0cy13aXRoKCAkaWZsLCAieGUtIiApICkgewogICAgICAgICAgICBzZXQgJGlmbCA9ICJcXCIgXyAkaWZsOwogICAgICAgIH0KCiAgICAgICAgLyogZ2VuZXJhdGUgc25tcCB0cmFwICovCiAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT1BTkNQLVNFU1NJT04tIiBfICRldmVudCBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNV09aWZEZXNjLCAiICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzVdPSIgXyAkaWZsIF8gIiwgIgogICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs3XT1tZXNzYWdlLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbN109IiBfICRyZWFzb24gXyAiLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzExXT1uZWlnaGJvciwgIiAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxMV09IiBfICRuZWlnaGJvciBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMTJdPXZsYW4sICIgICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzEyXT0iIF8gJHZsYW47CiAgICAgICAgfQogICAgICAgIHZhciAkc25tcFJlc3VsdCA9IGpjczppbnZva2UgKCAkcmVxdWVzdFNubXBUcmFwICk7CgogICAgICAgIC8qIGNsb3NlIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQ==";
                <md5> "47d6681721513db7a4e0e95027af8d42";
            }
            <script> {
                <name> "trap_eoam.slax";
                <type> "event";
                <base64> "";
                <md5> "3c916102dd8b4cbc6ab050056fd1c778";
            }
            <script> {
                <name> "write_ancp_session_radius_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "6758ba47ddd2d9498a87e17c0b8d6a67";
            }
            <script> {
                <name> "write_interfaces_queue_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "ec48ab022f680cc0acb7c66fcdbdd8fe";
            }
            <script> {
                <name> "write_multicast_accounting_options.slax";
                <type> "event";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHdyaXRlX211bHRpY2FzdF9hY2NvdW50aW5nX29wdGlvbnMuc2xheAogKiBBdXRob3IgICAgICAgIDogRnJhbmsgUmVpbWVyIGZyZWltZXJAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IEQzLjAuMjEKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM5NjE0ICQKICogJERhdGU6IDIwMTUtMDItMDQgMTE6NDU6MTcgKzAxMDAgKFdlZCwgMDQgRmViIDIwMTUpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IHdyaXRlIGFjY291bnRpbmcgcmVjb3JkcyBvZiBNdWx0aWNhc3QgcmVsYXRlZCBpbmZvcm1hdGlvbgogKgogKiAgIEFzc3VtcHRpb25zCiAqICAgMS4gbm8gcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgc2NyaXB0CiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIkQzLjAuMjEgLSB3cml0ZV9pbnRlcmZhY2VzX3F1ZXVlX2FjY291bnRpbmdfb3B0aW9ucyIgKi8KLyogQERFU0NSSVBUSU9OID0gIndyaXRlIGFjY291bnRpbmcgcmVjb3JkcyBvZiBDb1MgaW5mb3JtYXRpb24gZm9yIHNlbGVjdGVkIGludGVyZmFjZXMiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKbnMgZXh0ID0gImh0dHA6Ly94bWxzb2Z0Lm9yZy9YU0xUL25hbWVzcGFjZSI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgaWYgKCAkY29ubmVjdGlvbi8vc2VsZjo6eG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwYy1mYWlsdXJlKCRycGMgPSAkY29ubmVjdGlvbiwgJG1lc3NhZ2UgPSAiZmFpbGVkIHRvIG9wZW4gY29ubmVjdGlvbiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQoKICAgICAgICBtdmFyICRhbGxfcmVjb3JkczsKCiAgICAgICAgLyogQ29sbGVjdCBJR01QIGZyb20gInNob3cgaWdtcCBzdGF0aXN0aWNzIiAqLwogICAgICAgIGFwcGVuZCAkYWxsX3JlY29yZHMgKz0geyBjYWxsIGdldF9pZ21wX3N0YXRpc3RpY3MoICRjb25uZWN0aW9uICk7IH0KCiAgICAgICAgLyogQ29sbGVjdCBJbnB1dCBhbmQgT3V0cHV0IERyb3BzIHBlciBwaHlzaWNhbCBpbnRlcmZhY2UgKi8KICAgICAgICAvKiBDb2xsZWN0IFBJTSBJbmZvcm1hdGlvbiBmb3IgTFNSIEZhY2luZyBQb3J0cyAqLwogICAgICAgIC8qIFRob3NlIHR3byBmdW5jdGlvbnMgYXJlIGNvbWJpbmVkIHRvIGF2b2lkIGEgZG91YmxlIGNhbGwgb2YgaW50ZXJmYWNlcyAqLwogICAgICAgIGFwcGVuZCAkYWxsX3JlY29yZHMgKz0geyBjYWxsIGdldF9waW1fc3RhdGlzdGljc19wZXJfaW50ZXJmYWNlKCAkY29ubmVjdGlvbiApOyB9CgogICAgICAgIC8qIENvbGxlY3QgTXVsdGljYXN0IFBhY2tldCBjb3VudGVycyBmb3IgYWxsIHBoeXNpY2FsIGludGVyZmFjZXMgKi8KICAgICAgICBhcHBlbmQgJGFsbF9yZWNvcmRzICs9IHsgY2FsbCBnZXRfbWNhc3RfaWZsX3N0YXRpc3RpY3MoICRjb25uZWN0aW9uICk7IH0KCiAgICAgICAgLyogQ29sbGVjdCBOdW1iZXIgb2YgUm91dGluZyBFbnRyaWVzICovCiAgICAgICAgYXBwZW5kICRhbGxfcmVjb3JkcyArPSB7IGNhbGwgZ2V0X21jYXN0X3JvdXRlX2VudHJpZXMoICRjb25uZWN0aW9uICk7IH0KCiAgICAgICAgLyogQW5kIEZpbmFsbHksIHdyaXRlIHRoZSByZWNvcmRzIHRvIGZpbGUgKi8KICAgICAgICBjYWxsIHdyaXRlX2FjY291bnRpbmcgKCRjb25uZWN0aW9uLCAkcmVjb3JkcyA9ICRhbGxfcmVjb3Jkcyk7CgoKICAgICAgICAvKiBjbG9zZSBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRjb25uZWN0aW9uICk7CiAgICAgIH0KfQoKLyoKICogRnVuY3Rpb24gdG8gY29sbGVjdCBJR01QIHN0YXRpc3RpY3MKICogVGhlIGZ1bmN0aW9uIHJldHVybnMgYW4gYXJyYXkgb2YgcmVhZHkgdG8gYmUgdXNlZCBhY2NvdW50aW5nIHJlY29yZHMKICovCnRlbXBsYXRlIGdldF9pZ21wX3N0YXRpc3RpY3MoICRjb25uZWN0aW9uICkgewogICAgdmFyICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3JwYyA9IDxnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uPjsKICAgIHZhciAkZ2V0LWlnbXAtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQgPSBqY3M6ZXhlY3V0ZSgkY29ubmVjdGlvbiAsICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3JwYyk7CgogICAgdmFyICRpZ21wX3JlY29yZHMgOj0gewogICAgICAgIDxpZ21wPiAibWVtYmVyc2hpcC1xdWVyeS1yZWNlaXZlZC1jb3VudCwiICAgICBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1hbGwvbWdtLXN0YXRpc3RpY3MtZ3JvdXAvbWdtLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iTWVtYmVyc2hpcCBRdWVyeSJdL3JlY2VpdmVkLWNvdW50OwogICAgICAgIDxpZ21wPiAibWVtYmVyc2hpcC1xdWVyeS1zZW50LWNvdW50LCIgICAgICAgICBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1hbGwvbWdtLXN0YXRpc3RpY3MtZ3JvdXAvbWdtLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iTWVtYmVyc2hpcCBRdWVyeSJdL3NlbnQtY291bnQ7CiAgICAgICAgPGlnbXA+ICJtZW1iZXJzaGlwLXF1ZXJ5LWVycm9yLWNvdW50LCIgICAgICAgIF8gJGdldC1pZ21wLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L21nbS1zdGF0aXN0aWNzLWFsbC9tZ20tc3RhdGlzdGljcy1ncm91cC9tZ20tc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJNZW1iZXJzaGlwIFF1ZXJ5Il0vZXJyb3ItY291bnQ7CgogICAgICAgIDxpZ21wPiAidjItbWVtYmVyc2hpcC1yZXBvcnQtcmVjZWl2ZWQtY291bnQsIiBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1hbGwvbWdtLXN0YXRpc3RpY3MtZ3JvdXAvbWdtLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iVjIgTWVtYmVyc2hpcCBSZXBvcnQiXS9yZWNlaXZlZC1jb3VudDsKICAgICAgICA8aWdtcD4gInYyLW1lbWJlcnNoaXAtcmVwb3J0LXNlbnQtY291bnQsIiAgICAgXyAkZ2V0LWlnbXAtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvbWdtLXN0YXRpc3RpY3MtYWxsL21nbS1zdGF0aXN0aWNzLWdyb3VwL21nbS1zdGF0aXN0aWNbc3RhdGlzdGljLW5hbWU9IlYyIE1lbWJlcnNoaXAgUmVwb3J0Il0vc2VudC1jb3VudDsKICAgICAgICA8aWdtcD4gInYyLW1lbWJlcnNoaXAtcmVwb3J0LWVycm9yLWNvdW50LCIgICAgXyAkZ2V0LWlnbXAtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvbWdtLXN0YXRpc3RpY3MtYWxsL21nbS1zdGF0aXN0aWNzLWdyb3VwL21nbS1zdGF0aXN0aWNbc3RhdGlzdGljLW5hbWU9IlYyIE1lbWJlcnNoaXAgUmVwb3J0Il0vZXJyb3ItY291bnQ7CgogICAgICAgIDxpZ21wPiAidjMtbWVtYmVyc2hpcC1yZXBvcnQtcmVjZWl2ZWQtY291bnQsIiBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1hbGwvbWdtLXN0YXRpc3RpY3MtZ3JvdXAvbWdtLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iVjMgTWVtYmVyc2hpcCBSZXBvcnQiXS9yZWNlaXZlZC1jb3VudDsKICAgICAgICA8aWdtcD4gInYzLW1lbWJlcnNoaXAtcmVwb3J0LXNlbnQtY291bnQsIiAgICAgXyAkZ2V0LWlnbXAtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvbWdtLXN0YXRpc3RpY3MtYWxsL21nbS1zdGF0aXN0aWNzLWdyb3VwL21nbS1zdGF0aXN0aWNbc3RhdGlzdGljLW5hbWU9IlYzIE1lbWJlcnNoaXAgUmVwb3J0Il0vc2VudC1jb3VudDsKICAgICAgICA8aWdtcD4gInYzLW1lbWJlcnNoaXAtcmVwb3J0LWVycm9yLWNvdW50LCIgICAgXyAkZ2V0LWlnbXAtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvbWdtLXN0YXRpc3RpY3MtYWxsL21nbS1zdGF0aXN0aWNzLWdyb3VwL21nbS1zdGF0aXN0aWNbc3RhdGlzdGljLW5hbWU9IlYzIE1lbWJlcnNoaXAgUmVwb3J0Il0vZXJyb3ItY291bnQ7CgogICAgICAgIDxpZ21wPiAiYmFkLXJlY2VpdmUtaWYsIiAgICAgICAgICAgICAgICAgICAgICBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1nbG9iYWwvbWdtLW90aGVyLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iQmFkIFJlY2VpdmUgSWYiXS9zdGF0aXN0aWMtY291bnQ7CiAgICAgICAgPGlnbXA+ICJ0b3RhbC1pbnRlcmZhY2VzLCIgICAgICAgICAgICAgICAgICAgIF8gJGdldC1pZ21wLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L21nbS1zdGF0aXN0aWNzLWdsb2JhbC9tZ20tb3RoZXItc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJUb3RhbCBJbnRlcmZhY2VzIl0vc3RhdGlzdGljLWNvdW50OwogICAgICAgIDxpZ21wPiAibWF4LXJ4LXJhdGUtcHBzLCIgICAgICAgICAgICAgICAgICAgICBfICRnZXQtaWdtcC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9tZ20tc3RhdGlzdGljcy1nbG9iYWwvbWdtLW90aGVyLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iTWF4IFJ4IHJhdGUgKHBwcykiXS9zdGF0aXN0aWMtY291bnQ7CiAgICB9CiAgICBjb3B5LW9mICRpZ21wX3JlY29yZHM7Cn0KCi8qCiAqIEZ1bmN0aW9uIHRvIGNvbGxlY3QgaW50ZXJmYWNlIHJlbGF0ZWQgTXVsdGljYXN0IGNvdW50ZXIKICogSW5wdXQgYW5kIE91dHB1dCBkcm9wcyBhcmUgY29sbGVjdGVkIGZvciBldmVyeSBYRSBhbmQgR0UgaW50ZXJmYWNlLgogKiBDb2xsZWN0aW5nIGFsbCBMU1IgRmFjaW5nIGludGVyZmFjZXMgYmFzZWQgb24gdGhlIGRlc2NyaXB0aW9uCiAqIEFmdGVyIHRoYXQgUElNIGluZm9ybWF0aW9uIHdpbGwgYmUgY29sbGVjdGVkIG9uIGEgcGVyIGludGVyZmFjZSBiYXNpcwogKi8KdGVtcGxhdGUgZ2V0X3BpbV9zdGF0aXN0aWNzX3Blcl9pbnRlcmZhY2UoICRjb25uZWN0aW9uICkgewoKICAgIC8qIEdldCBhbGwgcGh5c2ljYWwgaW50ZXJmYWNlcyB0aGF0IGFyZSBvZiB0eXBlIFhFIG9yIEdFCiAgICAgKiBUaGVuIGZpbHRlciBmb3IgdGhlIGNvcnJlY3QgZGVzY3JpcHRpb24gYW5kIGdldCB0aGUgaWZsIGJlbG93IHRoZSBwaHlzaWNhbCBpbnRlcmZhY2UKICAgICAqLwogICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uX3JwYyA9IDxnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uPiB7CiAgICAgICAgPGludGVyZmFjZS1uYW1lPiAiW3hnXWUtKiI7CiAgICAgICAgPGV4dGVuc2l2ZT47CiAgICB9CiAgICB2YXIgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb25fcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uICwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb25fcnBjICk7CgogICAgdmFyICRwaW1faWZsX3JlY29yZHMgOj0gewogICAgICAgIGZvci1lYWNoICggJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb25fcmVzdWx0L3BoeXNpY2FsLWludGVyZmFjZVtzdGFydHMtd2l0aChkZXNjcmlwdGlvbiwnI20jdXBsaW5rX2xzciMnKXx8c3RhcnRzLXdpdGgoZGVzY3JpcHRpb24sJyNtI21zYW4jJyldICkgewogICAgICAgICAgICA8ZHJvcF9yZWNvcmRzPiAiaW5wdXQtZHJvcHMoIiBfIG5hbWUgXyAiKSwiIF8gaW5wdXQtZXJyb3ItbGlzdC9pbnB1dC1kcm9wczsKICAgICAgICAgICAgPGRyb3BfcmVjb3Jkcz4gIm91dHB1dC1kcm9wcygiIF8gbmFtZSBfICIpLCIgXyBvdXRwdXQtZXJyb3ItbGlzdC9vdXRwdXQtZHJvcHM7CiAgICAgICAgfQoKICAgICAgICBmb3ItZWFjaCAoICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uX3Jlc3VsdC9waHlzaWNhbC1pbnRlcmZhY2Vbc3RhcnRzLXdpdGgoZGVzY3JpcHRpb24sJyNtI3VwbGlua19sc3IjJyldL2xvZ2ljYWwtaW50ZXJmYWNlICkgewogICAgICAgICAgICB2YXIgJGdldC1waW0tc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9ycGMgPSA8Z2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uPiB7CiAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiAsICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcnBjICk7CiAgICAgICAgICAgIDxwaW1faWZsPiAidjItaGVsbG8tcmVjZWl2ZWQtY291bnQoIiBfICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L3N0YXRpc3RpY3MtZmFtaWx5L3BpbS1zdGF0aXN0aWNzLWludGVyZmFjZS9waW0taW50ZXJmYWNlLW5hbWUgXyAiKSwiIF8gJGdldC1waW0tc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvc3RhdGlzdGljcy1mYW1pbHkvcGltLXN0YXRpc3RpY3MtaW50ZXJmYWNlL3BpbS1zdGF0aXN0aWNbc3RhdGlzdGljLW5hbWU9IlYyIEhlbGxvIl0vcmVjZWl2ZWQtY291bnQ7CiAgICAgICAgICAgIDxwaW1faWZsPiAidjItaGVsbG8tc2VudC1jb3VudCgiIF8gJGdldC1waW0tc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvc3RhdGlzdGljcy1mYW1pbHkvcGltLXN0YXRpc3RpY3MtaW50ZXJmYWNlL3BpbS1pbnRlcmZhY2UtbmFtZSBfICIpLCIgXyAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9zdGF0aXN0aWNzLWZhbWlseS9waW0tc3RhdGlzdGljcy1pbnRlcmZhY2UvcGltLXN0YXRpc3RpY1tzdGF0aXN0aWMtbmFtZT0iVjIgSGVsbG8iXS9zZW50LWNvdW50OwogICAgICAgICAgICA8cGltX2lmbD4gInYyLWhlbGxvLWVycm9yLWNvdW50KCIgXyAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9zdGF0aXN0aWNzLWZhbWlseS9waW0tc3RhdGlzdGljcy1pbnRlcmZhY2UvcGltLWludGVyZmFjZS1uYW1lIF8gIiksIiBfICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L3N0YXRpc3RpY3MtZmFtaWx5L3BpbS1zdGF0aXN0aWNzLWludGVyZmFjZS9waW0tc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJWMiBIZWxsbyJdL2Vycm9yLWNvdW50OwoKICAgICAgICAgICAgPHBpbV9pZmw+ICJ2Mi1qb2luLXBydW5lLXJlY2VpdmVkLWNvdW50KCIgXyAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9zdGF0aXN0aWNzLWZhbWlseS9waW0tc3RhdGlzdGljcy1pbnRlcmZhY2UvcGltLWludGVyZmFjZS1uYW1lIF8gIiksIiBfICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L3N0YXRpc3RpY3MtZmFtaWx5L3BpbS1zdGF0aXN0aWNzLWludGVyZmFjZS9waW0tc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJWMiBKb2luIFBydW5lIl0vcmVjZWl2ZWQtY291bnQ7CiAgICAgICAgICAgIDxwaW1faWZsPiAidjItam9pbi1wcnVuZS1zZW50LWNvdW50KCIgXyAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9zdGF0aXN0aWNzLWZhbWlseS9waW0tc3RhdGlzdGljcy1pbnRlcmZhY2UvcGltLWludGVyZmFjZS1uYW1lIF8gIiksIiBfICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L3N0YXRpc3RpY3MtZmFtaWx5L3BpbS1zdGF0aXN0aWNzLWludGVyZmFjZS9waW0tc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJWMiBKb2luIFBydW5lIl0vc2VudC1jb3VudDsKICAgICAgICAgICAgPHBpbV9pZmw+ICJ2Mi1qb2luLXBydW5lLWVycm9yLWNvdW50KCIgXyAkZ2V0LXBpbS1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3Jlc3VsdC9zdGF0aXN0aWNzLWZhbWlseS9waW0tc3RhdGlzdGljcy1pbnRlcmZhY2UvcGltLWludGVyZmFjZS1uYW1lIF8gIiksIiBfICRnZXQtcGltLXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0L3N0YXRpc3RpY3MtZmFtaWx5L3BpbS1zdGF0aXN0aWNzLWludGVyZmFjZS9waW0tc3RhdGlzdGljW3N0YXRpc3RpYy1uYW1lPSJWMiBKb2luIFBydW5lIl0vZXJyb3ItY291bnQ7CiAgICAgICAgfQogICAgfQogICAgY29weS1vZiAkcGltX2lmbF9yZWNvcmRzOwp9CgovKgogKiBGdW5jdGlvbiB0byBjb2xsZWN0IE11bGljYXN0IElucHV0IEtpbG8gUGFja2V0cyBmb3IgYWxsCiAqIEludGVyZmFjZXMgdGhhdCBhcmUgTXVsdGljYXN0IGVuYWJsZWQKICovCnRlbXBsYXRlIGdldF9tY2FzdF9pZmxfc3RhdGlzdGljcyggJGNvbm5lY3Rpb24gKSB7CgogICAgdmFyICRtdWx0aWNhc3Qtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9ycGMgPSA8Z2V0LW11bHRpY2FzdC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uPjsKICAgIHZhciAkbXVsdGljYXN0LXN0YXRpc3RpY3MtaW5mb3JtYXRpb25fcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uICwgJG11bHRpY2FzdC1zdGF0aXN0aWNzLWluZm9ybWF0aW9uX3JwYyApOwoKCiAgICB2YXIgJG1jYXN0X2lmbF9yZWNvcmRzIDo9IHsKICAgICAgICBmb3ItZWFjaCAoICRtdWx0aWNhc3Qtc3RhdGlzdGljcy1pbmZvcm1hdGlvbl9yZXN1bHQvbXVsdGljYXN0LXN0YXRpc3RpY3MvbWMtc3RhdHMtaW50ZXJmYWNlICkgewogICAgICAgICAgICBpZiAoc3RhcnRzLXdpdGgoaW50ZXJmYWNlLW5hbWUsJ2dlLScpIHx8IHN0YXJ0cy13aXRoKGludGVyZmFjZS1uYW1lLCd4ZS0nKSApIHsKICAgICAgICAgICAgICAgIDxtY2FzdF9pZmw+ICJtYy1pbnB1dC1rYnl0ZXMoIiBfIGludGVyZmFjZS1uYW1lIF8gIiksIiBfIG1jLWlucHV0LWtieXRlczsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGNvcHktb2YgJG1jYXN0X2lmbF9yZWNvcmRzOwp9Cgp0ZW1wbGF0ZSBnZXRfbWNhc3Rfcm91dGVfZW50cmllcyAoICRjb25uZWN0aW9uICkgewoKCiAgICB2YXIgJG1jYXN0X3N1bW1hcnkgOj0gewogICAgICAgIHZhciAkZ2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbl9ycGMgPSA8Z2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8YWN0aXZlPjsKICAgICAgICAgICAgPHN1bW1hcnk+OwogICAgICAgICAgICA8aW5ldD47CiAgICAgICAgfQogICAgICAgIHZhciAkZ2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbl9yZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24gLCAkZ2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbl9ycGMgKTsKCgogICAgICAgIGlmICgkZ2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbl9yZXN1bHQvcm91dGUtZmFtaWx5L211bHRpY2FzdC1yb3V0ZS9tdWx0aWNhc3Qtcm91dGUtc3VtbWFyeS9tdWx0aWNhc3Qtcm91dGUtY291bnQpIHsKICAgICAgICAgICAgPG11bHRpY2FzdF9yb3V0ZV9zdW1tYXJ5PiAibXVsdGljYXN0LXJvdXRlLWNvdW50LCIgXyAkZ2V0LW11bHRpY2FzdC1yb3V0ZS1pbmZvcm1hdGlvbl9yZXN1bHQvcm91dGUtZmFtaWx5L211bHRpY2FzdC1yb3V0ZS9tdWx0aWNhc3Qtcm91dGUtc3VtbWFyeS9tdWx0aWNhc3Qtcm91dGUtY291bnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgPG11bHRpY2FzdF9yb3V0ZV9zdW1tYXJ5PiAibXVsdGljYXN0LXJvdXRlLWNvdW50LDAiOwogICAgICAgIH0KCgogICAgICAgIHZhciAkZ2V0LXBpbS1qb2luLWluZm9ybWF0aW9uX3NnX3JwYyA9IDxnZXQtcGltLWpvaW4taW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPHN1bW1hcnk+OwogICAgICAgICAgICA8c2c+OwogICAgICAgIH0KICAgICAgICB2YXIgJGdldC1waW0tam9pbi1pbmZvcm1hdGlvbl9zZ19yZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24gLCAkZ2V0LXBpbS1qb2luLWluZm9ybWF0aW9uX3NnX3JwYyApOwoKICAgICAgICBpZiAoJGdldC1waW0tam9pbi1pbmZvcm1hdGlvbl9zZ19yZXN1bHQvam9pbi1mYW1pbHkvam9pbi1zdW1tYXJ5W211bHRpY2FzdC1yb3V0ZS10eXBlPSIocyxnKSJdL211bHRpY2FzdC1yb3V0ZS1jb3VudCkgewogICAgICAgICAgICA8bXVsdGljYXN0X3JvdXRlX3N1bW1hcnk+ICJqb2luLXN1bW1hcnktc291cmNlLWdyb3VwLCIgXyAkZ2V0LXBpbS1qb2luLWluZm9ybWF0aW9uX3NnX3Jlc3VsdC9qb2luLWZhbWlseS9qb2luLXN1bW1hcnlbbXVsdGljYXN0LXJvdXRlLXR5cGU9IihzLGcpIl0vbXVsdGljYXN0LXJvdXRlLWNvdW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIDxtdWx0aWNhc3Rfcm91dGVfc3VtbWFyeT4gImpvaW4tc3VtbWFyeS1zb3VyY2UtZ3JvdXAsMCI7CiAgICAgICAgfQoKICAgICAgICB2YXIgJGdldC1waW0tam9pbi1pbmZvcm1hdGlvbl9zdGFyLWdfcnBjID0gPGdldC1waW0tam9pbi1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8c3VtbWFyeT47CiAgICAgICAgICAgIDxzdGFyLWc+OwogICAgICAgIH0KCiAgICAgICAgdmFyICRnZXQtcGltLWpvaW4taW5mb3JtYXRpb25fc3Rhci1nX3Jlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiAsICRnZXQtcGltLWpvaW4taW5mb3JtYXRpb25fc3Rhci1nX3JwYyApOwogICAgICAgIGlmICgkZ2V0LXBpbS1qb2luLWluZm9ybWF0aW9uX3N0YXItZ19yZXN1bHQvam9pbi1mYW1pbHkvam9pbi1zdW1tYXJ5W211bHRpY2FzdC1yb3V0ZS10eXBlPSIoKixnKSJdL211bHRpY2FzdC1yb3V0ZS1jb3VudCkgewogICAgICAgICAgICA8bXVsdGljYXN0X3JvdXRlX3N1bW1hcnk+ICJqb2luLXN1bW1hcnktc3Rhci1ncm91cCwiIF8gJGdldC1waW0tam9pbi1pbmZvcm1hdGlvbl9zdGFyLWdfcmVzdWx0L2pvaW4tZmFtaWx5L2pvaW4tc3VtbWFyeVttdWx0aWNhc3Qtcm91dGUtdHlwZT0iKCosZykiXS9tdWx0aWNhc3Qtcm91dGUtY291bnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgPG11bHRpY2FzdF9yb3V0ZV9zdW1tYXJ5PiAiam9pbi1zdW1tYXJ5LXN0YXItZ3JvdXAsMCI7CiAgICAgICAgfQogICAgfQogICAgY29weS1vZiAkbWNhc3Rfc3VtbWFyeTsKfQoKdGVtcGxhdGUgd3JpdGVfYWNjb3VudGluZygkY29ubmVjdGlvbiwgJHJlY29yZHMpIHsKICAgIHZhciAkZmlsZSA9ICJtY2FzdF9zdGF0cyI7CiAgICB2YXIgJGxheW91dCA9ICJtYy1zdGF0cyI7CiAgICB2YXIgJGZpZWxkcyA9ICJuYW1lLG9iamVjdC12YWx1ZSI7CgogICAgZm9yLWVhY2ggKCRyZWNvcmRzLy8qKSB7CiAgICAgICAgdmFyICRhZGRfcmVjb3JkX3RhaWxfZHJvcCA9IDxhZGQtYWNjb3VudGluZy1maWxlLXJlY29yZD4gewogICAgICAgICAgICA8ZmlsZT4gJGZpbGU7CiAgICAgICAgICAgIDxsYXlvdXQ+ICRsYXlvdXQ7CiAgICAgICAgICAgIDxmaWVsZHM+ICRmaWVsZHM7CiAgICAgICAgICAgIDxkYXRhPiAuOwogICAgICAgIH0KICAgICAgICB2YXIgJGRvbmVfcmVjb3JkX3RhaWxfZHJvcCA9IGpjczpleGVjdXRlKCRjb25uZWN0aW9uLCAkYWRkX3JlY29yZF90YWlsX2Ryb3ApOwogICAgICAgIGlmICgkZG9uZV9yZWNvcmRfdGFpbF9kcm9wLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGRvbmVfcmVjb3JkX3RhaWxfZHJvcC8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgYWRkaW5nIGFjY291bnRpbmcgZmlsZSByZWNvcmQiKTsKICAgICAgICB9CiAgICB9Cn0KCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gZ2F0aGVyIGRhdGE6ICIpIHsKICAgICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgICAgIGZvci1lYWNoICgkcnBjLy94bm06ZXJyb3IpIHsKICAgICAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsIG1lc3NhZ2UpOwogICAgfQp9Cg==";
                <md5> "176a363ee792b58b027aef06595815ed";
            }
            <script> {
                <name> "write_subscribers_accounting_options.slax";
                <type> "event";
                <base64> "";
                <md5> "0e4c05c2fe983a4074804cdd8a34e91e";
            }
            <script> {
                <name> "iceaaa-autoclean-tmp.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IEQzLjAuMjEKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM1OTc3ICQKICogJERhdGU6IDIwMTQtMDQtMTUgMTE6NTg6MTQgKzAyMDAgKFR1ZSwgMTUgQXByIDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IG9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbAogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gaWNlYWFhLWF1dG9jbGVhbi10bXAiICovCi8qIEBERVNDUklQVElPTiA9ICJvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgICAgICB2YXIgJGF1dG9jbGVhblN0YXR1cyA9IDx0cnVlPjsKICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSIvbWZzL3Zhci90bXAvYXV0b2NsZWFuIiBhcHBlbmQ9Im5vIj4gewogICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgfQogICAgfQp9";
                <md5> "a9de8c23ec4d35c38b3dc580939ce6ad";
            }
            <script> {
                <name> "iceaaa-request-support-information.slax";
                <type> "op";
                <base64> "";
                <md5> "56c40aa5e62444f7562050192234059e";
            }
            <script> {
                <name> "iceaaa-show-subscriber.slax";
                <type> "op";
                <base64> "";
                <md5> "91e8b81258a5675d6c625eb0d8ae42f8";
            }
            <script> {
                <name> "iceaaa-show-version.slax";
                <type> "op";
                <base64> "";
                <md5> "12a11080dfbfe252ed83ce6db66c9c65";
            }
            <script> {
                <name> "iceaaa_combo_1.slax";
                <type> "op";
                <base64> "";
                <md5> "4095bd789f4520a12a7d8dc750da312c";
            }
            <script> {
                <name> "Interface-Activation.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgKICogQXV0aG9yICAgICAgICA6IEFuZHJldyBTaGFycCBhc2hhcnBAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IEQzLjAuMjEKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8gLyBKdW5vcyBTcGFjZQogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisgLyAxMy4xUDIKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM4MDU5ICQKICogJERhdGU6IDIwMTQtMTAtMTQgMTE6MDQ6NDMgKzAyMDAgKFR1ZSwgMTQgT2N0IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IEVuYWJsZSBzZWxlY3RlZCBpbnRlcmZhY2UocykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKbnMgZnVuYyBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9mdW5jdGlvbnMiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiAqKioqKioqKioqKioqKioqKiAqLwovKiBTY3JpcHQgQW5ub3RhdGlvbiAqLwovKiAqKioqKioqKioqKioqKioqKiAqLwoKLyogQENPTlRFWFQgPSAiL2RldmljZS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlW25vdChzdGFydHMtd2l0aChuYW1lLCJmeHAwIikpXSIgKi8KLyogQE5BTUUgPSAiRDMuMC4yMSAtIEludGVyZmFjZS1BY3RpdmF0aW9uIiAqLwovKiBAREVTQ1JJUFRJT04gPSAiRW5hYmxlIHNlbGVjdGVkIGludGVyZmFjZShzKSIgKi8KLyogQEVYRUNVVElPTlRZUEUgPSAiR1JPVVBFREVYRUNVVElPTiIgKi8KCi8qICoqKioqKiogKi8KLyogR2xvYmFscyAqLwovKiAqKioqKioqICovCnZhciAkc2NyaXB0bmFtZSA9ICJJbnRlcmZhY2UtQWN0aXZhdGlvbi5zbGF4IjsKdmFyICRyZXN1bHRzOwp2YXIgJGludGVyZmFjZXM7CnZhciAkaW50ZXJmYWNlLXJlZ2V4Owp2YXIgJGRldmljZW5hbWU7CnZhciAkcGh5c2ludG5hbWU7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiQ09OVEVYVCI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiVGhlIGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NyaXB0LiI7CiAgICB9Cn0KcGFyYW0gJENPTlRFWFQ7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICB2YXIgJGludGVyZmFjZXMgPSBqY3M6c3BsaXQoIlxcfCIsICRDT05URVhUKTsKCiAgICAgICAgLyogQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggc2VsZWN0ZWQgaW50ZXJmYWNlLCAgKi8KICAgICAgICAvKiB0aGUgZmlyc3QgaW50ZXJmYWNlIGlzIGF0IHBvc2l0aW9uWzJdIGluIHRoZSBhcnJheSAqLwogICAgICAgIHZhciAkY29uZmlndXJhdGlvbi1jaGFuZ2UgPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGludGVyZmFjZS1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgdmFyICRkZXZpY2VuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgdmFyICRwaHlzaW50bmFtZSA9IHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKCRpbnRlcmZhY2UtcmVnZXhbM10sIltuYW1lPSIsIiIpLCJdIiwiIiksIlwiIiwiIik7CiAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHBoeXNpbnRuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICA8ZW5hYmxlPjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qIEEgY29ubmVjdGlvbiBtdXN0IGJlIG9wZW5lZCAqLwogICAgICAgIHZhciAkY29ubmVjdGlvbiA9IGpjczpvcGVuKCk7CiAgICAgICAgLyogYWJvcnQgaWYgbm8gY29ubmVjdGlvbiB0byBsb2NhbCBtZ2QgKi8KICAgICAgICBpZiAoJGNvbm5lY3Rpb24vLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY29ubmVjdGlvbi8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY29ubmVjdGluZyBvbiBtZ2Qgb24gdGhpcyBSRSIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQoKICAgICAgICAvKgogICAgICAgICAqIFRoZSBjb25uZWN0aW9uIGFuZCBjaGFuZ2UgYXJlIHNldCBhcyBwYXJhbWV0ZXJzIHRvIHRoZSBqY3M6bG9hZC1jb25maWd1cmF0aW9uIHRlbXBsYXRlCiAgICAgICAgICogd2hpY2ggcGVyZm9ybXMgdGhlIGNoYW5nZS4gIFRoZSA6PSBvcGVyYXRvciBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSAkcmVzdWx0cyB2YXJpYWJsZQogICAgICAgICAqIGlzIGEgbm9kZS1zZXQgcmF0aGVyIHRoYW4gYSByZXN1bHQgdHJlZSBmcmFnbWVudC4KICAgICAgICAgKi8KICAgICAgICB2YXIgJHJlc3VsdHMgOj0geyBjYWxsIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24oICRjb25uZWN0aW9uLCAkY29uZmlndXJhdGlvbiA9ICRjb25maWd1cmF0aW9uLWNoYW5nZSApOyB9CgogICAgICAgIC8qIENoZWNrIGZvciBlcnJvcnMgLSByZXBvcnQgdGhlbSBpZiB0aGV5IG9jY3VycmVkLiAqLwogICAgICAgIGlmICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJHJlc3VsdHMsICRtZXNzYWdlID0gIkVycm9yIGFwcGx5aW5nIGNvbmZpZ3VyYXRpb24uIik7CiAgICAgICAgICAgIGZvci1lYWNoICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgICAgICA8SEVBRD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGVuYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiMiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJBbiBlcnJvciBoYXMgYmVlbiBlbmNvdW50ZXJlZDogIiBfIG1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBlbmFibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiMSIpOwogICAgICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJUaGUgZm9sbG93aW5nIGludGVyZmFjZShzKSBoYXZlIG5vdyBiZWVuIGVuYWJsZWQuIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnQtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRldm5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcGludG5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAkcGludG5tIF8gIiA7ICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRyZXN1bHRzL2NvbW1pdC1yZXN1bHRzL3JvdXRpbmctZW5naW5lL2NvbW1pdC1zdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJDb21taXQgc3VjY2Vzcy4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkcmVzdWx0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uaW5mbyIsICJTQ1JJUFRfQUNUSU9OX0lGX0VOQUJMRTogU2NyaXB0IGFjdGlvbiB0YWtlbiB0byBlbmFibGUgcGh5c2ljYWwgaW50ZXJmYWNlLiIpOwogICAgICAgIHZhciAkY2xvc2UtcmVzdWx0cyA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgICAgICBpZiAoJGNsb3NlLXJlc3VsdHMvLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uLiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQogICAgfQp9Cgp0ZW1wbGF0ZSBycGNfZmFpbHVyZSgkcnBjLCAkbWVzc2FnZSA9ICJGb2xsb3dpbmcgZXJyb3JzIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnYXRoZXIgZGF0YTogIikgewogIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmVycm9yIiwgJG1lc3NhZ2UpOwogIGZvci1lYWNoICgkcnBjLy94bm06ZXJyb3IpIHsKICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmVycm9yIiwgbWVzc2FnZSk7CiAgfQp9Cg==";
                <md5> "35dd4e5365b4a0b5ba38a1e0590f863d";
            }
            <script> {
                <name> "Interface-Deactivation.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogRDMuMC4yMQogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTyAvIEp1bm9zIFNwYWNlCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKyAvIDEzLjFQMgogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldjogMzgwNTkgJAogKiAkRGF0ZTogMjAxNC0xMC0xNCAxMTowNDo0MyArMDIwMCAoVHVlLCAxNCBPY3QgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogRGlzYWJsZSBzZWxlY3RlZCBpbnRlcmZhY2UocykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKbnMgZnVuYyBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9mdW5jdGlvbnMiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiAqKioqKioqKioqKioqKioqKiAqLwovKiBTY3JpcHQgQW5ub3RhdGlvbiAqLwovKiAqKioqKioqKioqKioqKioqKiAqLwoKLyogQENPTlRFWFQgPSAiL2RldmljZS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlW25vdChzdGFydHMtd2l0aChuYW1lLCJmeHAwIikpXSIgKi8KLyogQE5BTUUgPSAiRDMuMC4yMSAtIEludGVyZmFjZS1EZWFjdGl2YXRpb24iICovCi8qIEBERVNDUklQVElPTiA9ICJEaXNhYmxlIHNlbGVjdGVkIGludGVyZmFjZShzKSIgKi8KLyogQEVYRUNVVElPTlRZUEUgPSAiR1JPVVBFREVYRUNVVElPTiIgKi8KLyogQENPTkZJUk1BVElPTiA9ICJBcmUgeW91IHN1cmUgdGhhdCB5b3Ugd2FudCB0byBkaXNhYmxlIHRoZSBzZWxlY3RlZCBpbnRlcmZhY2Uocyk/IiAqLwoKLyogKioqKioqKiAqLwovKiBHbG9iYWxzICovCi8qICoqKioqKiogKi8KdmFyICRzY3JpcHRuYW1lID0gIkludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheCI7CnZhciAkcmVzdWx0czsKdmFyICRpbnRlcmZhY2VzOwp2YXIgJGludGVyZmFjZS1yZWdleDsKdmFyICRkZXZpY2VuYW1lOwp2YXIgJHBoeXNpbnRuYW1lOwoKdmFyICRhcmd1bWVudHMgPSB7CiAgICA8YXJndW1lbnQ+IHsKICAgICAgICA8bmFtZT4gIkNPTlRFWFQiOwogICAgICAgIDxkZXNjcmlwdGlvbj4gIlRoZSBjb250ZXh0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHNjcmlwdC4iOwogICAgfQp9CnBhcmFtICRDT05URVhUOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgdmFyICRpbnRlcmZhY2VzID0gamNzOnNwbGl0KCJcXHwiLCAkQ09OVEVYVCk7CgogICAgICAgIC8qIENyZWF0ZSBjb25maWd1cmF0aW9uIGZvciBlYWNoIHNlbGVjdGVkIGludGVyZmFjZSwgICovCiAgICAgICAgLyogdGhlIGZpcnN0IGludGVyZmFjZSBpcyBhdCBwb3NpdGlvblsyXSBpbiB0aGUgYXJyYXkgKi8KICAgICAgICB2YXIgJGNvbmZpZ3VyYXRpb24tY2hhbmdlID0gPGNvbmZpZ3VyYXRpb24+IHsKICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW50ZXJmYWNlLXJlZ2V4ID0gamNzOnJlZ2V4KCAiL2RldmljZShcXFsuKlxcXSkvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZShcXFsuKlxcXSkiLCAoLikgKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJGRldmljZW5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJHBoeXNpbnRuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkcGh5c2ludG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNhYmxlPjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogQSBjb25uZWN0aW9uIG11c3QgYmUgb3BlbmVkICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKICAgICAgICAvKiBhYm9ydCBpZiBubyBjb25uZWN0aW9uIHRvIGxvY2FsIG1nZCAqLwogICAgICAgIGlmICgkY29ubmVjdGlvbi8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjb25uZWN0aW9uLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gYW5kIGNoYW5nZSBhcmUgc2V0IGFzIHBhcmFtZXRlcnMgdG8gdGhlIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24gdGVtcGxhdGUKICAgICAgICAgKiB3aGljaCBwZXJmb3JtcyB0aGUgY2hhbmdlLiAgVGhlIDo9IG9wZXJhdG9yIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlICRyZXN1bHRzIHZhcmlhYmxlCiAgICAgICAgICogaXMgYSBub2RlLXNldCByYXRoZXIgdGhhbiBhIHJlc3VsdCB0cmVlIGZyYWdtZW50LgogICAgICAgICovCiAgICAgICAgdmFyICRyZXN1bHRzIDo9IHsgY2FsbCBqY3M6bG9hZC1jb25maWd1cmF0aW9uKCAkY29ubmVjdGlvbiwgJGNvbmZpZ3VyYXRpb24gPSAkY29uZmlndXJhdGlvbi1jaGFuZ2UgKTsgfQoKICAgICAgICAvKiBDaGVjayBmb3IgZXJyb3JzIC0gcmVwb3J0IHRoZW0gaWYgdGhleSBvY2N1cnJlZC4gKi8KICAgICAgICBpZiAoICRyZXN1bHRzLy94bm06ZXJyb3IgKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRyZXN1bHRzLCAkbWVzc2FnZSA9ICJFcnJvciBhcHBseWluZyBjb25maWd1cmF0aW9uLiIpOwogICAgICAgIGZvci1lYWNoICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgICAgICA8SEVBRD4gewogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZGlzYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIyIik7CiAgICAgICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkFuIGVycm9yIGhhcyBiZWVuIGVuY291bnRlcmVkOiAiIF8gbWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGRpc2FibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIxIik7CiAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlKHMpIGhhdmUgbm93IGJlZW4gZGlzYWJsZWQuIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnQtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRldm5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcGludG5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAkcGludG5tIF8gIiA7ICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRyZXN1bHRzL2NvbW1pdC1yZXN1bHRzL3JvdXRpbmctZW5naW5lL2NvbW1pdC1zdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJDb21taXQgc3VjY2Vzcy4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkcmVzdWx0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KICAgICAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5pbmZvIiwgIlNDUklQVF9BQ1RJT05fSUZfRElTQUJMRTogU2NyaXB0IGFjdGlvbiB0YWtlbiB0byBkaXNhYmxlIHBoeXNpY2FsIGludGVyZmFjZS4iKTsKICAgICAgICB2YXIgJGNsb3NlLXJlc3VsdHMgPSBqY3M6Y2xvc2UoICRjb25uZWN0aW9uICk7CiAgICAgICAgaWYgKCRjbG9zZS1yZXN1bHRzLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGNsb3NlLXJlc3VsdHMvLi4sICRtZXNzYWdlID0gIkVycm9yIGNsb3NpbmcgY29ubmVjdGlvbi4iKTsKICAgICAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgICAgIH0KICAgIH0KfQoKCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7CiAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgZm9yLWVhY2ggKCRycGMvL3hubTplcnJvcikgewogICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKICB9Cn0K";
                <md5> "ad05035000240f1b4a405f2657e37ae9";
            }
            <script> {
                <name> "jspace-lib.slax";
                <type> "op";
                <base64> "";
                <md5> "5d96e104fea6dc2e80ee417eccc78015";
            }
            <script> {
                <name> "juniper-commit.slax";
                <type> "op";
                <base64> "";
                <md5> "282b02a9872664b9a09218edd6f11104";
            }
            <script> {
                <name> "Logical_Interface-Activation.slax";
                <type> "op";
                <base64> "";
                <md5> "e18ed7dbcaeee9bfa1f7d4178a337e06";
            }
            <script> {
                <name> "Logical_Interface-Deactivation.slax";
                <type> "op";
                <base64> "";
                <md5> "40c40d5c42fd2632a71aaee9c1cfbcf0";
            }
            <script> {
                <name> "op-sfp-data.slax";
                <type> "op";
                <base64> "";
                <md5> "999bb6ac342c9908dba310750d6ab763";
            }
            <script> {
                <name> "op-show-optics-hw.slax";
                <type> "op";
                <base64> "";
                <md5> "98bb0889e0fd724897081d8ea45cd846";
            }
            <script> {
                <name> "PPPoE-Show_IP_Count.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfSVBfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldjogMzgwNTkgJAogKiAkRGF0ZTogMjAxNC0xMC0xNCAxMTowNDo0MyArMDIwMCAoVHVlLCAxNCBPY3QgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogU2hvdyBudW1iZXIgb2YgdXNlZCBJUCBhZGRyZXNzZXMgYWNyb3NzIFBQUG9FIHNlc3Npb25zIChncm91cGVkIGJ5IElQdjQsIElQdjYgZnJhbWVkIGFuZCBkZWxlZ2F0ZWQgYWRkcmVzc2VzKS4KICoKICovCgp2ZXJzaW9uIDEuMDsKCi8qIE5hbWVzcGFjZSBkZWNsYXJhdGlvbnMgKi8KbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7Cm5zIGpzcGFjZSA9ICJodHRwOi8vanNwYWNlLXV0aWxzL2FzaGFycEBqdW5pcGVyLm5ldCI7CgovKiBJbXBvcnRzICovCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CmltcG9ydCAianNwYWNlLWxpYi5zbGF4IjsKCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBOQU1FID0gIkQzLjAuMjEgLSBQUFBvRS1TaG93X0lQX0NvdW4iICovCi8qIEBERVNDUklQVElPTiA9ICJTaG93IG51bWJlciBvZiB1c2VkIElQIGFkZHJlc3NlcyBhY3Jvc3MgUFBQb0Ugc2Vzc2lvbnMgKGdyb3VwZWQgYnkgSVB2NCwgSVB2NiBmcmFtZWQgYW5kIGRlbGVnYXRlZCBhZGRyZXNzZXMpLiIgKi8KCi8qIEdsb2JhbCB2YXJpYWJsZXMgKi8KdmFyICRzY3JpcHRuYW1lID0gIlBQUG9FLVNob3dfSVBfQ291bnQuc2xheCI7CnZhciAkZ2V0LXN1YnNjcmliZXJzLWNsaWVudC10eXBlLXBwcG9lLWRldGFpbC1ycGM7CnZhciAkcmVzdWx0czsKCm1hdGNoIC8gewogICAgPG9wLXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgdmFyICR0dHkgPSAkanVub3MtY29udGV4dC90dHk7CgogICAgICAgIC8qIFJlcXVlc3Qgc3Vic2NyaWJlciBpbmZvcm1hdGlvbiBmaWx0ZXJlZCBvbiBQUFBvRSAqLwogICAgICAgIHZhciAgJGdldC1zdWJzY3JpYmVycy1jbGllbnQtdHlwZS1wcHBvZS1kZXRhaWwtcnBjID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+InBwcG9lIjsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkcmVzdWx0cyA9IGpjczppbnZva2UoICRnZXQtc3Vic2NyaWJlcnMtY2xpZW50LXR5cGUtcHBwb2UtZGV0YWlsLXJwYyApOwoKICAgICAgICB2YXIgJGlwdjQtYWRkcmVzcy1jb3VudCA9IGNvdW50KCRyZXN1bHRzL3N1YnNjcmliZXJbc3RhdGUgPT0gIkFjdGl2ZSJdL2lwLWFkZHJlc3MpOwogICAgICAgIHZhciAkaXB2NmRlbGVnYXRlZC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXB2Ni1wcmVmaXgpOwogICAgICAgIHZhciAkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXB2Ni11c2VyLXByZWZpeCk7CgogICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiTnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiNyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIxIj47CiAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiSVB2NCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY2IGRlbGVnYXRlZCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY2IGZyYW1lZCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjQ6ICIgXyAkaXB2NC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCJJUHY2IGRlbGVnYXRlZDogIiBfICRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjYgZnJhbWVkOiAiIF8gJGlwdjZmcmFtZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkaXB2NC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJGlwdjZmcmFtZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=";
                <md5> "ab74aac4689433a1316b489db2d0aec6";
            }
            <script> {
                <name> "PPPoE-Show_Sessions_Count.slax";
                <type> "op";
                <base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfU2Vzc2lvbnNfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldCwgRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBEMy4wLjIxCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODA1OSAkCiAqICREYXRlOiAyMDE0LTEwLTE0IDExOjA0OjQzICswMjAwIChUdWUsIDE0IE9jdCAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBTaG93IG51bWJlciBvZiBQUFBvRS9MMlRQIHNlc3Npb25zIHBlciBpbnRlcmZhY2UgYW5kIGNoYXNzaXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvZGV2aWNlIiAqLwovKiBATkFNRSA9ICJEMy4wLjIxIC0gUFBQb0UtU2hvd19TZXNzaW9uc19Db3VudCIgKi8KLyogQERFU0NSSVBUSU9OID0gIlNob3cgbnVtYmVyIG9mIFBQUG9FL0wyVFAgc2Vzc2lvbnMgcGVyIGludGVyZmFjZSBhbmQgY2hhc3NpcyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKdmFyICRhcmd1bWVudHMgPSB7CiAgICA8YXJndW1lbnQ+IHsKICAgICAgICA8bmFtZT4gImRpc3BsYXkiOwogICAgICAgIDxkZXNjcmlwdGlvbj4gImFsbHx1c2VkIjsKICAgIH0KfQpwYXJhbSAkZGlzcGxheSA9ICJhbGwiOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgbXZhciAkc3VtUFBQb0UgPSAwOwogICAgICAgIG12YXIgJHN1bUwyVFAgPSAwOwoKICAgICAgICB2YXIgJHR0eSA9ICRqdW5vcy1jb250ZXh0L3R0eTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPHRlcnNlPjsKICAgICAgICB9CiAgICAgICAgdmFyICRpbnRlcmZhY2UtaW5mb3JtYXRpb24gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uICk7CgogICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiTnVtYmVyIG9mIFBQUG9FL0wyVFAgc2Vzc2lvbnMiOwogICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjciKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMSI+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkludGVyZmFjZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJTZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJQUFBvRSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJMMlRQIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgZm9yLWVhY2goICRpbnRlcmZhY2UtaW5mb3JtYXRpb24vL3BoeXNpY2FsLWludGVyZmFjZSApIHsKCiAgICAgICAgICAgIGlmICggc3RhcnRzLXdpdGgobmFtZSwgImdlIikgfHwgc3RhcnRzLXdpdGgoIG5hbWUsICJ4ZSIgKSApIHsKCiAgICAgICAgICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVycy1pbnQgPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgICAgICAgICAgPHBoeXNpY2FsLWludGVyZmFjZT4gbmFtZTsKICAgICAgICAgICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXJzLWludCApOwoKICAgICAgICAgICAgICAgIHZhciAkc3VtSW50UFBQb0UgPSBjb3VudCggJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50L3N1YnNjcmliZXJbIGFjY2Vzcy10eXBlID09ICJQUFBvRSIgXSApOwogICAgICAgICAgICAgICAgdmFyICRzdW1JbnRMMlRQID0gY291bnQoICRzdWJzY3JpYmVyLWluZm9ybWF0aW9uLWludC9zdWJzY3JpYmVyWyBjb250YWlucyggU3RhdGUsICJUdW5uZWxlZCIgKSBdICk7CgogICAgICAgICAgICAgICAgaWYgKCAkc3VtSW50UFBQb0UgPiAwIHx8ICRkaXNwbGF5ID09ICJhbGwiICkgewoKICAgICAgICAgICAgICAgICAgICBzZXQgJHN1bVBQUG9FID0gJHN1bVBQUG9FICsgJHN1bUludFBQUG9FOwogICAgICAgICAgICAgICAgICAgIHNldCAkc3VtTDJUUCA9ICRzdW1MMlRQICsgJHN1bUludEwyVFA7CgogICAgICAgICAgICAgICAgICAgIGlmICggJHR0eSAhPSAibm9uLXR0eSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCBqY3M6cHJpbnRmKCAiSW50ZXJmYWNlOiAlLTE1cyBTZXNzaW9uczogJTVzIFBQUG9FOiAlNXMgTDJUUDogJTVzIiwgbmFtZSwgJHN1bUludFBQUG9FLCAkc3VtSW50UFBQb0UgLSAkc3VtSW50TDJUUCwgJHN1bUludEwyVFAgKSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByIChuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRQUFBvRSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtSW50UFBQb0UgLSAkc3VtSW50TDJUUCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtSW50TDJUUCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggJHR0eSAhPSAibm9uLXR0eSIpIHsKICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCBqY3M6cHJpbnRmKCAiQ2hhc3NpczogJTE3cyBTZXNzaW9uczogJTVzIFBQUG9FOiAlNXMgTDJUUDogJTVzXHIiLCAiICIsICRzdW1QUFBvRSwgJHN1bVBQUG9FIC0gJHN1bUwyVFAsICRzdW1MMlRQICkgKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIDx0ciBzdHlsZT0iaGVpZ2h0OiAyMHB4ICFpbXBvcnRhbnQ7Ij4gewogICAgICAgICAgICAgICAgPHRkPiB7IGV4cHIgKCAiIiApOyB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICBleHByICgiQ2hhc3NpcyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bVBQUG9FKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1QUFBvRSAtICRzdW1MMlRQKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1MMlRQKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UgKCAkY29ubmVjdGlvbiApOwogICAgfQoKICAgIH0gLyogYm9keSAqLwogICAgfSAvKiBoZWFkICovCiAgICB9IC8qIGh0bWwgKi8KfQ==";
                <md5> "9ed3823940d19698a8328b0fadce0888";
            }
            <script> {
                <name> "show-subscriber.slax";
                <type> "op";
                <base64> "";
                <md5> "70c7a6495da1aa8fad0d49b0e6df8cfe";
            }

        } /* ... embedded scripts */

        /* parse credentials for selected devices */
        var $devices = jspace:credentials();

        /* counter for result summary */
        mvar $deviceCounter = 0;
        mvar $connectionSuccess = 0;
        mvar $connectionFailed = 0;
        mvar $installSuccess = 0;
        mvar $installFailed = 0;
        mvar $commitSuccess = 0;
        mvar $commitFailed = 0;
        mvar $autocleanSuccess = 0;
        mvar $autocleanFailed = 0;

        mvar $results = <info> "installer results";
        mvar $csvResultBNG = "BNG%2CRESULT%2CCOMMIT%2CMESSAGE%2CAUTOCLEAN%2CMESSAGE%0A";
        mvar $csvResultFiles = "BNG%2CFILES%2CRESULT%2CMD5%2CMESSAGE%0A";

        if ( $devices ) {
            for-each( $devices/device) {
                set $deviceCounter = $deviceCounter +1;

                var $local = jcs:open( (target) , (user) , (passwd) );
                var $devicename = (host);

                if ( $local//self::xnm:error ) {
                    set $connectionFailed = $connectionFailed +1;
                    append $results += <device> {
                        <host> $devicename;
                        <connection-error>;
                    }
                } else {
                    set $connectionSuccess = $connectionSuccess +1;
    
                    mvar $commitResult = false();
                    var $fileResult := <result> {
                        for-each ( $embedded//script ) {
                            call file-put( $local, $re = "re0", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                            call file-put( $local, $re = "re1", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                        }
                    }
                    if ( $fileResult//error ) {
                        set $installFailed = $installFailed +1;
                        set $commitResult = <xnm:error> {
                            <message> "not commited because script install failed";
                        }
                    } else {
                        set $installSuccess = $installSuccess +1;
                        if ( $commit == "true" ) { 
                            var $commit-configuration = <commit-configuration> {
                                <log> "autoclean via installer";
                                <force-synchronize>;
                            }
                            set $commitResult = jcs:execute( $local, $commit-configuration );
                            if ( $commitResult//commit-success ) {
                                set $commitSuccess = $commitSuccess +1;
                            } else {
                                set $commitFailed = $commitFailed +1;
                            }
                        }
                    }

                    var $autoclean-tmp = <command> "op url /var/db/scripts/op/iceaaa-autoclean-tmp.slax";
                    var $autocleanResult = jcs:execute( $local, $autoclean-tmp );
                    if ( $autocleanResult//self::xnm:error ) {
                        set $autocleanFailed = $autocleanFailed +1;
                    } else {
                        set $autocleanSuccess = $autocleanSuccess +1;
                    }

                    append $results += <device> {
                        <host> $devicename;
                        <files> {
                            copy-of $fileResult;
                        }
                        if ($commitResult) {
                            <commit> {
                                copy-of $commitResult;
                            }
                        }
                        <autoclean> {
                            if ( $autocleanResult//self::xnm:error ) {
                                copy-of $autocleanResult;
                            } else {
                                <enabled>;
                            }
                        }
                    }
                }
                var $closeResult = jcs:close( $local );
            }
        }
        <output> {
            <HTML> {
                <HEAD> {
                    <title> "ICEAAA Scripts Version D3.0.21";
                    <style type="text/css"> {
                        expr "body { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000;border-style: solid;border-color: transparent;background-color: white}";
                        expr "td { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000; }";
                        expr "p { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 14px;color:#000; }";
                        expr "table { font-size: 1.0em;border-collapse: collapse;width: 99% }";
                        expr "progress[value] { background-color: #eee; border-radius: 2px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset; }";
                        expr "#tableheader { font-weight: bolder;text-align: center;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderleft { font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderright { font-weight: bolder;text-align: right;background-color: #7592A9;color: #fff }";
                        expr "#tablereverse { font-size: 16px; font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#celltitle { font-weight: bolder }";
                        expr "#cellwarning { text-align: center; background-color: #ff0000; color: #fff; font-weight: bolder; }";
                        expr "#cellamber { text-align: center; background-color: #f87431; color: #fff; font-weight: bolder; }";
                        expr "#center {text-align: center}";
                        expr "#failed { color: red }";
                        expr "#failed2 { color: red; font-style: italic; }";
                        expr "#content { margin-bottom: 15px; }";
                        expr ".footer { position: fixed; bottom: 0px; width: 100%; background-color: white; margin: 0px; }";
                    }
                }
                <BODY> {
                    /* Java Script ... */
                    <script> {
                        expr "function toggleVisibility(id) {";
                        expr "    if(document.getElementById(id).style.display == 'table-row-group') {";
                        expr "        document.getElementById(id).style.display = 'none';";
                        expr "    } else {";
                        expr "        document.getElementById(id).style.display = 'table-row-group';";
                        expr "    }";
                        expr "}";
                        expr "function openInNewWindow() {";
                        expr "    var myWindow = window.open('about:blank', 'ExportWindow', 'scrollbars=yes,menubar=yes,location=no');";
                        expr "    myWindow.document.write( document.getElementsByTagName( 'html' )[0].outerHTML );";
                        expr "    var openButton = myWindow.document.getElementById('openInNewWindowButton');";
                        expr "    openButton.parentNode.removeChild( openButton );";
                        expr "}";
                    }
                    <div id="content"> {
                        <p style="text-align: center; font-family: Verdana, Georgia, Arial, sans-serif, bold; font-size: 18px; color:#000;"> { 
                            expr "ICEAAA Scripts Installer Version D3.0.21";
                        }
                        <p> { 
                            expr "Summary Result for " _ $deviceCounter _ " Devices";
                        }
                        <table> {
                            <colgroup> {
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:1%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "SUCCESSFUL";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FAILED";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Connections (NETCONF)";
                                }
                                <td> {
                                    expr $connectionSuccess;
                                }
                                <td> {
                                    expr $connectionFailed;
                                }
                                mvar $connectionPercent = 0;
                                <td> {
                                    if ($connectionSuccess > 0) {
                                        set $connectionPercent = floor($connectionSuccess div ($connectionSuccess + $connectionFailed) * 100 );
                                    }
                                    <progress max="100" value=$connectionPercent>;
                                }
                                <td> {
                                    expr $connectionPercent _ "%";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Installation";
                                }
                                <td> {
                                    expr $installSuccess;
                                }
                                <td> {
                                    expr $installFailed;
                                }
                                mvar $installPercent = 0;
                                <td> {
                                    if ($installSuccess > 0) {
                                        set $installPercent = floor($installSuccess div ($installSuccess + $installFailed) * 100 );
                                    }
                                    <progress max="100" value=$installPercent>;
                                }
                                <td> {
                                    expr $installPercent _ "%";
                                }
                            }
                            if ( $commit == "true" ) {
                                <tr> {
                                    <td> {
                                        expr "Commit";
                                    }
                                    <td> {
                                        expr $commitSuccess;
                                    }
                                    <td> {
                                        expr $commitFailed;
                                    }
                                    mvar $commitPercent = 0;
                                    <td> {
                                        if ($commitSuccess > 0) {
                                            set $commitPercent = floor($commitSuccess div ($commitSuccess + $commitFailed) * 100 );
                                        }
                                        <progress max="100" value=$commitPercent>;
                                    }
                                    <td> {
                                        expr $commitPercent _ "%";
                                    }
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Autoclean Enabled";
                                }
                                <td> {
                                    expr $autocleanSuccess;
                                }
                                <td> {
                                    expr $autocleanFailed;
                                }
                                mvar $autocleanPercent = 0;
                                <td> {
                                    if ($autocleanSuccess > 0) {
                                        set $autocleanPercent = floor($autocleanSuccess div ($autocleanSuccess + $autocleanFailed) * 100 );
                                    }
                                    <progress max="100" value=$autocleanPercent>;
                                }
                                <td> {
                                    expr $autocleanPercent _ "%";
                                }
                            }
                        }
                        <br>;
                        <input id="openInNewWindowButton" type="Button" value="Open in Window" onclick="openInNewWindow(); return false;">;
                        <p> { 
                            expr "Detailed Result";
                        }
                        <table> {
                            <colgroup> {
                                <col style="width:15%; white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "BNG";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FILES";
                                }
                                <th id="tableheaderleft"> {
                                    expr "RESULT";
                                }
                                <th id="tableheaderleft"> {
                                    expr "MD5";
                                }
                            }
                            for-each ( $results//device ) {
                                var $bng = host;
                                var $detailsTag = "details" _ $bng;
                                set $csvResultBNG = $csvResultBNG _ $bng _ "%2C";
                                <tr> {
                                    <td> {
                                        expr $bng;
                                    }
                                    <td> {
                                        <input type="Button" value="Details" onclick="toggleVisibility('" _ $detailsTag _ "');">;
                                    }
                                    if ( .//error || .//xnm:error || .//connection-error ) {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <td id="failed"> {
                                            expr "failed";
                                        }
                                    } else { 
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C";
                                        <td> {
                                            expr "successful";
                                        }
                                    }
                                    <td> {
                                        expr "";
                                    }
                                }
                                <tbody id=$detailsTag style="display: none;"> {
                                    if ( $commit == "true" ) {
                                        /* commit result ... */
                                        if ( .//commit-success ) {
                                            set $csvResultBNG = $csvResultBNG _ "successful%2C%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td> {
                                                    expr "successful";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                        } else {
                                            set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td id="failed"> {
                                                    expr "failed";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                            for-each ( ./commit//xnm:error ) {
                                                var $lines = jcs:break-lines( message );
                                                for-each( $lines ) {
                                                    set $csvResultBNG = $csvResultBNG _ .;
                                                    <tr> {
                                                        <td> {
                                                            expr "";
                                                        }
                                                        <td colspan="3" id="failed2"> {
                                                            expr "error: " _ .;
                                                        }
                                                    }
                                                }
                                            }
                                            set $csvResultBNG = $csvResultBNG _ "%2C";
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "%2C%2C";
                                    }
                                    /* autoclean result ... */
                                    if ( .//autoclean/enabled ) {
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C%0A";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td> {
                                                expr "successful";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td id="failed"> {
                                                expr "failed";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                        for-each ( ./autoclean//xnm:error ) {
                                            var $lines = jcs:break-lines( message );
                                            for-each( $lines ) {
                                                set $csvResultBNG = $csvResultBNG _ .;
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        }
                                        set $csvResultBNG = $csvResultBNG _ "%0A";
                                    }
                                    /* file results ... */
                                    for-each ( .//file ) {
                                        set $csvResultFiles = $csvResultFiles _ $bng _ "%2C" _ name _ "%2C" _ result _ "%2C" _ md5 _ "%2C";
                                        if ( error ) {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td id="failed"> {
                                                    expr result;
                                                }
                                                <td id="failed"> {
                                                    expr md5;
                                                }
                                            }
                                            for-each ( error/message ) {
                                                set $csvResultFiles = $csvResultFiles _ . _" ";
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        } else {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td> {
                                                    expr result;
                                                }
                                                <td> {
                                                    expr md5;
                                                }
                                            }
                                        }
                                        set $csvResultFiles = $csvResultFiles _"%0A";
                                    }
                                }
                            }
                        }
                        <br>;
                        set $csvResultBNG = str:replace( $csvResultBNG, " ", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, " ", "%20" );
                        set $csvResultBNG = str:replace( $csvResultBNG, ",", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, ",", "%20" );
                        <a href="data:application/octet-stream," _ $csvResultBNG _ ""> {
                            expr "Download CSV BNG";
                        }
                        <a href="data:application/octet-stream," _ $csvResultFiles _ ""> {
                            expr "Download CSV Files";
                        }
                        <br>;
                    }
                    var $duration = date:seconds() - date:seconds( $localtime );
                    <p class="footer" style="text-align: left; font-family: Verdana, Georgia, Arial, sans-serif; font-size: 9px; color:#000;"> { 
                        expr "Date: " _ $localtime _ " Execution Time: " _ $duration _ "s";
                    }
                } /* ... BODY */
            }
        }
    }
}

/*
 * Copy script file from base64 string to routing-engine.
 */
template file-put( $local, $re, $type, $name, $base64, $md5 ) {
    var $filename = $re _ ":/var/db/scripts/" _ $type _ "/" _ $name;
    var $filePut = {
        <file-put> {
            <filename> $filename;
            <encoding> "base64";
            <permission> "644";
            <delete-if-exist>;
            <file-contents> $base64;
        }
    }
    var $result = jcs:execute( $local, $filePut );
    var $return := <file> {
        <name> $filename;
        <re> $re;
        if ( $result//self::xnm:error ) {
            <result> "failed";
            <md5> "unknown";
            <error> {
                for-each( $result//self::xnm:error ) {
                    <message> message;
                }
            }
        } else {
            <result> "successful";
            var $getChecksum = <get-checksum-information> { 
                <path> $filename;
            }
            var $checksum = jcs:execute( $local, $getChecksum );
            if ( $checksum//checksum == $md5 ) {
                <md5> "okay";
            } else {
                <md5> "failed";
                <error>;
            }
        }
    }
    copy-of $return;
}
/*
 * This function reads the credentials that are automatically supplied to the script 
 * when the annotation to pass the device credentials is used. this is a requirement
 * for a locally executed grouped execution script, as the script must handle all
 * device connections.
 */
<func:function name="jspace:credentials"> {
    if( $CONTEXT ) {
        var $splitCredentials = str:split( $credentials, "\\;" );
        var $targets := {
            for-each ( $splitCredentials ) {
                var $splitCredential = str:split( ., "\\:" );
                var $user-target = str:split($splitCredential[1], "\@");
                var $host = substring-before( substring-after( $deviceipmap, substring-after( $splitCredential[1], "@" ) _ "\":\"" ), "\"" );
                <device> {
                    <target> {
                        expr $user-target[2];
                    }
                    <user> {
                        expr $user-target[1];
                    }
                    <passwd> {
                        expr $splitCredential[2];
                    }
                    <host> {
                        expr $host;
                    }
                }
            }
        }
        <func:result select="$targets">;
    }
    else {
        <func:result select="false()">;
    }
}