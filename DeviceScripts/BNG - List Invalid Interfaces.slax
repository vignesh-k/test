/* 
	Outputs all interfaces that have a description that does not seem to be valid.
	Second cahnge
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 17.02.2015
	Last Modified By: bcersows
	###BNG - List Invalid Interfaces.slax;v1.0;2015.02.17
*/

/*
	Changelog:
	----------
	1.0; 17.02.2015: 
		- First version.
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device[matches(name, '\w{3}J\d{2,3}') or matches(name, '^(bng|BNG).*$')]" */
/* @NAME = "BNG - List Invalid Interfaces" */
/* @DESCRIPTION = "Outputs all interfaces that have a description that does not seem to be valid." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[]" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @PROMOTEs = "yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	/*mvar $results;*/
	
	mvar $localtime = date:date-time();
	
	var $devices = bcersows:credentials();
	var $myDevice = {
		for-each ( $devices/device/host ) {
			<xsl:sort>;
			expr .;
			if ( position() != last() ) {
				expr ", ";
			}
		}
	}
	
	/*var $myRPCGetInterfaces = <get-interface-information>;*/
	var $devQuery = <get-configuration> {
		<configuration> {
			<interfaces>;
		}
	}
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
				
				<style> {
					<xsl:text disable-output-escaping="yes">
						"a.overviewLinks { text-decoration: none; }
						a.overviewLinks:hover { text-decoration: underline; }
						
						.btn {
							background-color: #337ab7;
							border-color: #2e6da4;
							color: #fff;
							-moz-user-select: none;
							background-image: none;
							border: 1px solid transparent;
							cursor: pointer;
							display: inline-block;
							font-weight: 400;
							margin-bottom: 0;
							text-align: center;
							vertical-align: middle;
							white-space: nowrap;
							
							border-radius: 3px;
							font-size: 12px;
							line-height: 1.5;
							padding: 5px 10px;
						}
						.btn:hover {
							background-color: #286090;
							border-color: #204d74;
							color: #fff;
						}
						.amountBar {
							display: inline-block;
							height: 26px;
							line-height: 26px;
							margin-right: 10px;
							vertical-align: middle;
						}
						table {
							transition: all 1s;
						}
						tr.nointerfaces { font-style: italic; color: GREY; }
						tr.disabled { display: none; }"
					;
				}
				
				<script> {
					<xsl:text disable-output-escaping="yes">
						"var isDisabled = false;
						var working = false;
						
						function toggleView() {
							if ( working ) { return false; }							
							working = true;
							var tableRows = document.getElementById('resultsTable').getElementsByTagName('tr');
							var i, j;
							var lineCounter = 0;
							for ( i = 1; i < tableRows.length; i++ ) {	/* i = 1: header! */
								var currentRow = tableRows[i];
								if ( currentRow.hasClass( 'nointerfaces' ) ) { continue; }
								if ( isDisabled ) {
									currentRow.removeClass( 'disabled' );
									lineCounter++;
								} else {
									var trs = currentRow.getElementsByTagName('td');
									var hasError = false;
									for ( j = 0; j < trs.length; j++ ) {
										if ( trs[j].hasClass('lineError') ) {
											hasError = true;
										}
									}
									if ( !hasError ) {
										currentRow.addClass('disabled');
										lineCounter--;
									}
									lineCounter++;
								}
							}
							//if ( isDisabled ) { lineCounter--; }
							document.getElementById('currAmount').innerHTML = lineCounter;
							isDisabled = !isDisabled;
							working = false;
							
						}"
					;
				}
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Invalid Interfaces"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "InvalidInterfaces" );
					}
					
					<p class='italic'> {
						expr 'This only lists configured interfaces, not all physical ones.'; <br>;
						expr 'Column "Deleted?" checks for description and some other interface parameters.';
					}
					<table id="resultsTable" class="xwide"> {
						mvar $totalInterfaces = 0;
						<tr> {
							<th style="text-align: left;"> "Device";
							<th> "Interface";
							<th> "Description";
							<th title='Would be deleted because of description.'> "description error?";
							<th> "Deleted?";
						}
						for-each ( $devices/device ) {
							<xsl:sort>;
							var $connection = jcs:open( (target) , (user) , (passwd) );
							var $deviceName = (host);
							
							if ( $connection && !$connection//self::xnm:error ) {
								var $myResultInterfaces = jcs:execute( $connection, $devQuery );
								if( $myResultInterfaces//self::xnm:error ) {
									<tr class='nointerfaces'> {
										<td> $deviceName;
										<td> '';
										<td> "Error while receiving interfaces.";
									}
								} else {
									if ( count( $myResultInterfaces/interfaces/interface ) > 0 ) {
										for-each ( $myResultInterfaces/interfaces/interface[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")] ) {
											var $interfaceName = ./name;
											var $int = .;
											<tr> {
												<td> $deviceName _ '';
												<td> $interfaceName;
												<td> $int/description _ ' ';
												<p style='display: none;'> not( contains( $int/description, "#dcn_rd/msan#" ) ) _ ' - ' _ not( contains( $int/description, "#dcn_rd/msan#" ) or contains( $int/description, "#dcn_rmk_rd/msan#" ) or contains( $int/description, "#dcn_bng#" ) ) _ ' ';
												<p style='display: none;'> $int[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")]
													[not( contains( description, "#dcn_rd/msan#" ) or contains( description, "#dcn_rmk_rd/msan#" ) or contains( description, "#dcn_bng#" ) )]
													[not( contains( translate( description, 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü' ), "#MSAN-POTS#" ) )]
													[not( contains( description, "#uplink_lsr#" ) )]
													[not( contains( description, "#gf_direkt_RD#" ) )]
													[not( contains( translate( description, 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü' ), "#msan#" ) or contains( description, "#an#" ) or contains( description, "#dslam#" ))] _ ' ';
												<p style='display: none;'> {
													expr bcersows:hasInvalidDescription( $int ) _ ' ' _ $int/description;
													if ( bcersows:hasInvalidDescription( $int ) ) { expr ' invalid'; }
													if ( bcersows:hasInvalidDescription( $int ) == true() ) { expr ' invalid1'; }
													if ( bcersows:hasInvalidDescription( $int ) != false() ) { expr ' invalid2'; }
													if ( bcersows:hasInvalidDescription( $int ) == 'true' ) { expr ' invalid3'; }
													if ( bcersows:hasInvalidDescription( $int ) && true() ) { expr ' invalid4'; }
												}
												
												if ( bcersows:hasInvalidDescription( $int ) = "true" ) {
													<td class='majorError lineError ierr'> 'Yes!';
												} else {
													<td> ' ';
												}
												if ( $int[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")]
													[not(vlan-tagging)]
													[not(flexible-vlan-tagging)]
													[not(unit/family/pppoe/direct-connect)]
													[not(unit/family/iso and unit/family/inet and unit/family/inet6 and unit/family/mpls)]
													&& bcersows:hasInvalidDescription( $int ) = "true" ) {
													<td class='majorError lineError'> 'Yes!';
												} else {
													<td> ' ';
													<td> ' ';
												}
											}
											set $totalInterfaces = $totalInterfaces + 1;
										}
									} else {
										<tr class='nointerfaces'> {
											<td> $deviceName;
											<td> ' ';
											<td> "No interfaces on device.";
										}
									}
								}
							} else {
								<tr class='nointerfaces'> {
									<td> $deviceName;
									<td> ' ';
									<td> "Could not open connection.";
								}
							}
							expr jcs:close( $connection );
						}
						
						<div class='statusBar'> {
							<div class='amountBar'> {
								<span> 'Showing ';
								<span id='currAmount'> $totalInterfaces _ '';
								expr ' of ';
								<span> $totalInterfaces _ ' interfaces.';
							}
							<div class='btn' onclick='toggleView();'> {
								expr 'Show/Hide correct interfaces.';
							}
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.0";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}

/* AN: 			/interface[flexible-vlan-tagging][hierarchical-scheduler][encapsulation="flexible-ethernet-services"][contains( description, "#msan#" ) or contains( description, "#MSAN#" ) or contains( description, "#an#" ) or contains( description, "#dslam#" )]/name/text() */
/* TDCN: 		/interface[gigether-options/ieee-802.3ad][contains( description, "#dcn_rd/msan#" ) or contains( description, "#dcn_rmk_rd/msan#" ) or contains( description, "#dcn_bng#" )]/name/text() */
/* RD: 			/interface[unit/family/pppoe/direct-connect]/name/text() */
/* LSR: 		/interface[unit/family/iso][unit/family/inet][unit/family/inet6][unit/family/mpls]/name/text() */
/* AN POTS: 	/interface/unit[name="100"][starts-with( description, "#m#MSAN-POTS" ) or starts-with( description, "#u#MSAN-POTS" )]/../name/text() */
/* Normal: 		/interface[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")][not(contains( description, "#tdcn" ))][not(vlan-tagging)][not(flexible-vlan-tagging)][not(unit/family/pppoe/direct-connect)][not(gigether-options/ieee-802.3ad)][not(contains( description, "#msan#" ) or contains( description, "#MSAN#" ) or contains( description, "#an#" ) or contains( description, "#dslam#" ))][not(unit/family/iso and unit/family/inet and unit/family/inet6 and unit/family/mpls)]/name/text() */
/*if ( .[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")][not( contains( description, "#dcn_rd/msan#" ) or contains( description, "#dcn_rmk_rd/msan#" ) or contains( description, "#dcn_bng#" ) )] ) {*/
<func:function name="bcersows:hasInvalidDescription"> {
	param $int;
	
	var $return = {
		if ( $int[starts-with(name, "ge-") or starts-with(name, "xe-") or starts-with(name, "ae")]
			[not( contains( description, "#dcn_rd/msan#" ) or contains( description, "#dcn_rmk_rd/msan#" ) or contains( description, "#dcn_bng#" ) )]
			[not( contains( translate( description, 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü' ), "#MSAN-POTS#" ) )]
			[not( contains( description, "#uplink_lsr#" ) )]
			[not( contains( description, "#gf_direkt_RD#" ) )]
			[not( contains( translate( description, 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü' ), "#msan#" ) or contains( description, "#an#" ) or contains( description, "#dslam#" ))] ) {
			expr true();
		} else {
			expr false();
		}
	}
	
	<func:result select="$return">;
}
