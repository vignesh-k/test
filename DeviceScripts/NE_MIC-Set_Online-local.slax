/*
 * Filename      : NE_MIC-Set_Online-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Take MIC online.
 *
 */

version 1.0;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = "http://exslt.org/strings";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/device/chassis-inventory/chassis/chassis-module[starts-with(name,"FPC")]/chassis-sub-module[starts-with(name,"MIC")]" */
/* @NAME = "Bring MIC Online" */
/* @DESCRIPTION = "Take MIC online." */
/* @ISLOCAL = "true" */

/* Global variables */
var $scriptname = "NE_MIC-Set_Online-local.slax";
var $results;
var $status;
var $regex;
var $result-regex;
var $get-pic-information-rpc;

var $arguments = {
  <argument> {
    <name> "CONTEXT";
    <description> "The context associated with this script.";
  }
}
param $CONTEXT;

match / {
  <op-script-results> {
    var $regex = "/device.*/chassis-inventory/chassis\\[name=\"(.*)\"\\]/chassis-module\\[name=\"(.* ([0-9]+))\"\\]/chassis-sub-module\\[name=\"(.* ([0-9]+))\"\\]";
    var $result-regex = jcs:regex( $regex , $CONTEXT );

    /* Request MIC online */
    var $command = {
      <command> "request chassis mic online fpc-slot " _ $result-regex[4] _ " mic-slot " _ $result-regex[6];
    }
    var $connection = jcs:open();
		/* abort if no connection to local mgd */
		if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}
    var $results = jcs:execute( $connection , $command);
		if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error executing command request chassis mic online fpc-slot");
			<xsl:message terminate="yes"> ;
		}

    <output> {
      <HTML> {
        <HEAD> {
          <title> "MIC online";
          copy-of jspace:html-style("3");
        }
        <BODY> {
          /* Display additional information if the MIC has been brought online */
          if (jcs:regex(".*verify.*",$results)) {
            /* Wait 10 seconds and check the status */
            expr jcs:sleep( "10" );
            /* Request status for a single FPC */
            var  $get-pic-information-rpc = <get-pic-information> {
              <fpc-slot> jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\".* ([0-9]+)\"\\]/chassis-sub-module.*",$CONTEXT);
            }
            var $status = jcs:execute( $connection , $get-pic-information-rpc );
            if ($status/..//xnm:error) {
            	call rpc_failure($rpc = $status/.., $message = "Error collecting pic information");
            	<xsl:message terminate="yes"> ;
						}
            <table border="1"> {
              <tr> {
                <td id="tableheader"> {
                  expr "Component";
								}
								<td id="tableheader"> {
									expr "Status";
								}
								<td id="tableheader"> {
									expr "Description";
								}
							}
							for-each ($status/fpc) {
								<td> {
									expr "Slot " _ (slot);
								}
								<td> {
									expr (state);
								}
								<td> {
									expr (description);
								}
								for-each ( $status/fpc/pic ) {
									<tr> {
										<td> {
											expr "PIC " _ (pic-slot);
										}
										<td> {
											expr (pic-state);
										}
										<td> {
											expr (pic-type);
										}
									}
								}
							}
						}
					}
					else {
						<p> {
							copy-of str:replace($results,"output","");
						}
					}
				}
			}
		}
    if ( contains( $results , "already online" ) ) {
			expr jcs:syslog("daemon.info", "SCRIPT_ACTION_MIC_ONLINE: Script action failed to online the Modular Interface Card (MIC), as it is online already.");
		}
		else {
			expr jcs:syslog("daemon.info", "SCRIPT_ACTION_MIC_ONLINE: Script action taken to online the Modular Interface Card (MIC).");
		}
		var $close-results = jcs:close( $connection );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
  }
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
