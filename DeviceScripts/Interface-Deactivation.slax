/*
 * Filename      : Interface-Deactivation.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : MX TRIO / Junos Space
 * Release       : Junos 12.2+ / 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Disable selected interface(s)
 *
 */

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = "http://exslt.org/strings";
ns jspace = "http://jspace-utils/asharp@juniper.net";

ns func extension = "http://exslt.org/functions";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";
import "jspace-lib.slax";

/* ***************** */
/* Script Annotation */
/* ***************** */
/* @CONTEXT = "/device/interface-information/physical-interface[not(starts-with(name,"fxp0"))]" */
/* @NAME = "Disable Interface(s)" */
/* @DESCRIPTION = "Disable selected interface(s)" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @CONFIRMATION = "Are you sure that you want to disable the selected interface(s)?" */

/* ******* */
/* Globals */
/* ******* */
var $scriptname = "Interface-Deactivation.slax";
var $results;
var $interfaces;
var $interface-regex;
var $devicename;
var $physintname;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}
param $CONTEXT;

match / {
	<op-script-results> {

		var $interfaces = jcs:split("\\|", $CONTEXT);

		/* Create configuration for each selected interface,  */
		/* the first interface is at position[2] in the array */ 	
		var $configuration-change = <configuration> {
	    <interfaces> {
	    	for-each ( $interfaces ) {
					var $interface-regex = jcs:regex( "/device(\\[.*\\])/interface-information/physical-interface(\\[.*\\])", (.) );
					var $devicename = str:replace(str:replace($interface-regex[2],"[name=\"",""),"\"]","");
					var $physintname = str:replace(str:replace(str:replace($interface-regex[3],"[name=",""),"]",""),"\"","");
					<interface> {
						<name> $physintname;
						<disable>;
					}
				}
	    }
		}

		/* A connection must be opened */
		var $connection = jcs:open();
		/* abort if no connection to local mgd */
		if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}

		/* 
		 * The connection and change are set as parameters to the jcs:load-configuration template
		 * which performs the change.  The := operator is used to ensure that the $results variable
		 * is a node-set rather than a result tree fragment.
		*/
		var $results := { call jcs:load-configuration( $connection, $configuration = $configuration-change ); }

		/* Check for errors - report them if they occurred. */
		if ( $results//xnm:error ) {
			call rpc_failure($rpc = $results, $message = "Error applying configuration.");
	    for-each ( $results//xnm:error ) {
	    	<output> {
		    	<HTML> {
		    		<HEAD> {
		    			<title> "Interface disabled results:";
		    			copy-of jspace:html-style("2");
		    			<BODY> {
		    				<p> {
		    					expr "An error has been encountered: " _ message;
								}
							}
						}
					}
				}
	    }
		}
		else {
			<output> {
				<HTML> {
		    	<HEAD> {
		    		<title> "Interface disabled results:";
		    		copy-of jspace:html-style("1");
		    		<BODY> {
		    			<p> {
		    				expr "The following interface(s) have now been disabled.";
							}
							<p> {
								for-each ( $interfaces ) {
									var $int-regex = jcs:regex( "/device(\\[.*\\])/interface-information/physical-interface(\\[.*\\])", (.) );
									var $devnm = str:replace(str:replace($int-regex[2],"[name=\"",""),"\"]","");
									var $pintnm = str:replace(str:replace(str:replace($int-regex[3],"[name=",""),"]",""),"\"","");
									expr $pintnm _ " ; ";
								}
							}
							<p> {
								if ( $results/commit-results/routing-engine/commit-success ) {
									expr "Commit success.";
								}
								else {
									copy-of $results;
								}
							}
						}
					}
				}
	    }
		}
		expr jcs:syslog("daemon.info", "SCRIPT_ACTION_IF_DISABLE: Script action taken to disable physical interface.");
		var $close-results = jcs:close( $connection );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
	}
}


template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}

