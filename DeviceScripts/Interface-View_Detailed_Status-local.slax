/*
 * Filename      : Interface-View_Detailed_Status-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Show detailed interface information. 
 *
 */

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns str = "http://exslt.org/strings";

ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* @CONTEXT = "/device/interface-information/physical-interface[not( starts-with( name , "fxp0" ) )]" */
/* @NAME = "View Status" */
/* @DESCRIPTION = "Show detailed interface information." */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @ISLOCAL = "true" */
/* @PASSDEVICECREDENTIALS = "true" */

var $scriptname = "Interface-View_Detailed_Status-local.slax";
var $arguments = {
  <argument> {
    <name> "CONTEXT";
    <description> "The context associated with this script.";
  }
}
param $CONTEXT;

var $get-interface-information-rpc;
var $results;
var $regex;
var $result-regex;
var $interfaces;
var $interface-regex;
var $devicename;
var $physintname;
var $splitCredentials; /* array of all credentials */
var $splitCredential; /* array of one set of credentials */

match / {
  <op-script-results> {
    mvar $count = "0";    /*count of devices    */
    mvar $host-compare;   /* used for comparing */

    mvar $hostname;       /* credentials of user@ip           */
    mvar $splitHostname;  /* array of user and ip credentials */
    mvar $ip;             /* credentials ip address           */
    mvar $user;           /* credentials username             */
    mvar $password;       /* credentials password             */

    /* Split interfaces and Credentials */
    var $interfaces = jcs:split( "\\|", $CONTEXT );
    var $splitCredentials = str:split( $credentials , "\\;" );

    <output> {
      <HTML> {
        <HEAD> {
          <title> "Interface information:";
          copy-of jspace:html-style("6");
        }
        <BODY> {
          /* Loop through each physical interface */
          for-each ($interfaces) {
            var $interface-regex = jcs:regex( "/device(\\[.*\\])/interface-information/physical-interface(\\[.*\\])", (.) );
            var $devicename = str:replace(str:replace($interface-regex[2],"[name=\"",""),"\"]","");
            var $physintname = str:replace(str:replace(str:replace($interface-regex[3],"[name=",""),"]",""),"\"","");

            var  $get-interface-information-rpc = <get-interface-information> {
              <interface-name> $physintname;
              <detail>;
            }
	
            /* First time pass store the first devicename in $host-compare */
            /* Increase the count of unique devices seen to 1              */
            if ($count = "0") {
              set $host-compare = $devicename;
              set $count = $count + 1;
            }

            /* If the devicename is different from the previous loop  */
            /* then we must be using a new device, increase the count */
            /* and save the current devicename as the host to compare */
            if ( $host-compare != $devicename ) {
              set $count = $count + 1;
              set $host-compare = $devicename;
            }

            /* Using the count of unique devices found, the correct connection */
            /* parameters to be used can be derived from $splitCredentials     */
            var $splitCredential = str:split( $splitCredentials[$count] , "\\:" );
            set $hostname = $splitCredential[1];
            set $password = $splitCredential[2];
            set $splitHostname = str:split( $hostname[1] , "\@");
            set $user = $splitHostname[1];
            set $ip = $splitHostname[2];
            var $connection = jcs:open( $ip , $user , $password );
            /* abort if no connection to local mgd */
            if ($connection/..//xnm:error) {
            	call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
            	<xsl:message terminate="yes"> ;
			}
            var $results = jcs:execute($connection , $get-interface-information-rpc);
            if ($results/..//xnm:error) {
            	call rpc_failure($rpc = $results/.., $message = "Error collecting interface information");
            	<xsl:message terminate="yes"> ;
			}
            <p>;
            <table border="1"> {
              <colgroup> {
                <col width="5%">;
                <col width="5%">;
                <col width="5%">;
                <col width="5%">;
                <col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
				<col width="5%">;
			}
			<tr> {
				<td colspan="20" id="tablereverse"> {
					expr "Detailed interface information for " _ $devicename _ " : " _ $physintname;
				}
			}
			for-each( $results/physical-interface ) {
				/* Physical interface information only */
				var $phys-int := {
					copy-of *[name() != "logical-interface"];
				}
				/* Walk the data and parse */
				for-each( $phys-int ) {
					for-each(descendant::*) {
						/* Interface name and status */
						if ( name() == "name") {
							<tr> {
								<td colspan="20"> {
									expr "Physical interface: " _ ($phys-int/name) _ ", ";
									if ( $phys-int/admin-status == "up" ) {
										expr "Enabled, ";
									}
									else if ( $phys-int/admin-status == "down" ) {
										expr "Disabled, ";
									}
									if ( $phys-int/oper-status == "up" ) {
										expr "Physical link is Up";
									}
									else if ( $phys-int/oper-status == "down" ) {
										expr "Physical link is Down";
									}
								}
							}
						}
						/* Interface index and generation */
						if ( name() == "local-index" ) {
							<tr> {
								<td colspan="20"> {
									expr "Interface index: " _ ($phys-int/local-index) _ ", ";
									if ( $phys-int/snmp-index ) {
										expr "SNMP ifIndex: " _ ($phys-int/snmp-index) _ ", ";
									}
									if ( $phys-int/generation ) {
										expr "Generation: " _ ($phys-int/generation);
									}
								}
							}
						}
						/* Interface description */
						if ( name() == "description" ) {
							<tr> {
								<td colspan="20"> {
									expr "Description: " _ ($phys-int/description);
								}
							}
						}
						/* Interface characteristsics Link type, level, mtu, speed etc. */
						/* The row is shown once the interface speed is discovered. */
						if ( name() == "speed" ){
							<tr> {
								<td colspan="20"> {
									if ( $phys-int/if-type ) {
										expr "Type: " _ ($phys-int/if-type) _ ", ";
									}
									if ( $phys-int/link-level-type ) {
										expr "Link-level type: " _ ($phys-int/link-level-type) _ ", ";
									}
									if ( $phys-int/mtu ) {
										expr "MTU: " _ ($phys-int/mtu) _ ", ";
									}
									if ( $phys-int/sonet-mode ) {
										expr ($phys-int/sonet-mode) _ " mode, ";
									}
									if ( $phys-int/clocking ) {
										expr "Clocking: " _ ($phys-int/clocking) _ ", ";
									}
									if ( $phys-int/speed ) {
										expr "Speed: " _ ($phys-int/speed) _ ", ";
									}
									if ( $phys-int/duplex ) {
										expr "Duplex: " _ ($phys-int/duplex) _ ", ";
									}
									if ( $phys-int/bpdu-error ) {
										expr "BPDU Error: " _ jcs:printf( "%jcs" , $phys-int/bpdu-error) _ ", ";
									}
									if ( $phys-int/l2pt-error ) {
										expr "MAC-REWRITE Error: " _ jcs:printf( "%jcs" , $phys-int/l2pt-error) _ ", ";
									}
									if ( $phys-int/loopback ) {
										expr "Loopback: " _ jcs:printf( "%jcs" , $phys-int/loopback) _ ", ";
									}
									if ( $phys-int/source-filtering ) {
										expr "Source filtering: " _ jcs:printf( "%jcs" , $phys-int/source-filtering) _ ", ";
									}
									if ( $phys-int/if-flow-control ) {
										expr "Flow control: " _ jcs:printf( "%jcs" , $phys-int/if-flow-control) _ ", ";
									}
									if ( $phys-int/if-auto-negotiation ) {
										expr "Auto-negotiation: " _ jcs:printf( "%jcs" , $phys-int/if-auto-negotiation ) _ ", ";
									}
									if ( $phys-int/if-remote-fault ) {
										expr "Remote fault: " _ jcs:printf( "%jcs" , $phys-int/if-remote-fault ) _ ", ";
									}
									if ( $phys-int/minimum-links-in-aggregate ) {
										expr "Minimum links needed: " _ ($phys-int/minimum-links-in-aggregate) _ ", ";
									}
									if ( $phys-int/minimum-bandwidth-in-aggregate ) {
										expr "Minimum bandwidth needed: " _ ($phys-int/minimum-bandwidth-in-aggregate) _ ", ";
									}
								}
							}
						}
						/* Device flags */
						if ( name() == "if-device-flags" ) {
							<tr> {
								/* Traverse flags to get flag name.*/
								<td colspan="20"> {
									expr "Device flags: ";
									for-each ($phys-int/if-device-flags/*) {
										var $myflag = substring-after( name() , "ifdf-" );
										expr jcs:printf( "%jcs" , $myflag ) _ " ";
									}
								}
							}
						}
						/* Code for ifd-specific-config-flags */
						if ( name() == "ifd-specific-config-flags" ) {
							<tr> {
								/* Traverse flags to get flag name.*/
								<td colspan="20"> {
									expr "Config flags: ";
									for-each ($phys-int/ifd-specific-config-flags/*) {
										var $myflag = substring-after( name() , "-" );
										expr jcs:printf( "%jcs" , $myflag ) _ " ";
									}
								}
							}
						}
						/* Interface flags */
						if ( name() == "if-config-flags" ) {
							<tr> {
								/* Traverse flags to get flag name.*/
								<td colspan="20"> {
									expr "Interface flags: ";
									for-each ($phys-int/if-config-flags/*) {
										if ( name() != "internal-flags" ) {
											var $myflag = substring-after( name() , "-" );
											expr jcs:printf( "%jcs" , $myflag ) _ " ";
										}
										/* Watch for internal flags */
										else if ( $phys-int/if-config-flags/internal-flags ) {
											expr "Internal: " _ ($phys-int/if-config-flags/internal-flags) _ " ";
										}
									}
								}
							}
						}
						/* Link type */
						if ( name() == "link-type" ) {
							<tr> {
								<td colspan="20"> {
									expr "Link type: " _ ($phys-int/link-type);
								}
							}
						}
						/* Link media flags */
						if ( name() == "if-media-flags" ) {
							<tr> {
								/* Traverse flags to get flag name.*/
								<td colspan="20"> {
									expr "Link flags: ";
									for-each ($phys-int/if-media-flags/*) {
										if ( name() != "internal-flags" ) {
											var $myflag = substring-after( name() , "-" );
											expr jcs:printf( "%jcs" , $myflag ) _ " ";
										}
										/* Watch for internal flags */
										else if ( $phys-int/if-media-flags/internal-flags ) {
											expr "Internal: " _ ($phys-int/if-media-flags/internal-flags) _ " ";
										}
									}
								}
							}
						}
						/* Physical information */
						if ( name() == "physical-information" ) {
							<tr> {
								<td colspan="20"> {
									expr "Physical info: " _ ($phys-int/physical-information);
								}
							}
						}
						/* CoS queues */
						if ( name() == "physical-interface-cos-information" ) {
							<tr> {
								<td colspan="20"> {
									expr "CoS queues: " _ ($phys-int/physical-interface-cos-information/physical-interface-cos-hw-max-queues) _ " supported, " _ ($phys-int/physical-interface-cos-information/physical-interface-cos-use-max-queues) _ " maximum usable queues";
								}
							}
							if ( $phys-int/physical-interface-cos-information/physical-interface-schedulers ) {
								<tr> {
									<td colspan="20"> {
										expr "Schedulers: " _ ($phys-int/physical-interface-cos-information/physical-interface-schedulers);
									}
								}
							}
						}
						/* Hold times */
						if ( name() == "up-hold-time" ) {
							<tr> {
								<td colspan="20"> {
									expr "Hold times: Up " _ ($phys-int/up-hold-time) _ " ms, Down " _ ($phys-int/down-hold-time) _ " ms";
								}
							}
						}
						/* Current and hardware address */
						if ( name() == "current-physical-address" ) {
							<tr> {
								<td colspan="20"> {
									expr "Current address: " _ ($phys-int/current-physical-address) _ " , Hardware address: " _ ($phys-int/hardware-physical-address);
								}
							}
						}
						/* Alternate physical address */
						if ( name() == "alternate-physical-address" ) {
							<tr> {
								<td colspan="20"> {
									expr "Alternate link address: " _ ($phys-int/alternate-physical-address);
								}
							}
						}
						/* Link flapped */
						if ( name() == "interface-flapped" ) {
							<tr> {
								<td colspan="20"> {
									expr "Last flapped: " _ ($phys-int/interface-flapped);
								}
							}
						}
						/* Statistics last cleared */
						if ( name() == "statistics-cleared" ) {
							<tr> {
								<td colspan="20"> {
									expr "Statistics last cleared: " _ ($phys-int/statistics-cleared);
								}
							}
						}
						/* Traffic statistics */
						if ( name() == "traffic-statistics" ) {
							<tr> {
								<td colspan="20" id="tableheaderleft"> {
									expr "Traffic statistics:";
								}	
							}
							if (/traffic-statistics/input-bytes) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Input bytes";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/traffic-statistics/input-bytes);
									}
									if (/traffic-statistics/input-bps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/input-bps) _ " bps";
										}
									}
								}
							}
							if (/traffic-statistics/output-bytes) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Output bytes";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/traffic-statistics/output-bytes);
									}
									if (/traffic-statistics/output-bps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/output-bps) _ " bps";
										}
									}
								}
							}
							if (/traffic-statistics/input-packets) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Input packets";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/traffic-statistics/input-packets);
									}
									if (/traffic-statistics/input-pps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/input-pps) _ " pps";
										}
									}
								}
							}
							if (/traffic-statistics/output-packets) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Output packets";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/traffic-statistics/output-packets);
									}
									if (/traffic-statistics/output-pps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/output-pps) _ " pps";
										}
									}
								}
							}
							/* IPv6 transit statistics */
							if (/traffic-statistics/ipv6-transit-statistics) {
								<tr> {
									<td colspan="20" id="tableheaderleft"> {
										expr "IPv6 transit statistics:";
									}
								}
								if (/traffic-statistics/ipv6-transit-statistics/input-bytes) {
									<tr> {
										<td colspan="4" id="paddedcellright"> {
											expr "Input bytes:";
										}
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/ipv6-transit-statistics/input-bytes);
										}
										if (/traffic-statistics/ipv6-transit-statistics/input-bps) {
											<td colspan="4" id="paddedcellcenter"> {
												expr ($phys-int/traffic-statistics/ipv6-transit-statistics/input-bps) _ " bps";
											}
										}
									}
								}
								if (/traffic-statistics/ipv6-transit-statistics/output-bytes) {
									<tr> {
										<td colspan="4" id="paddedcellright"> {
											expr "Output bytes:";
										}
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/ipv6-transit-statistics/output-bytes);
										}
										if (/traffic-statistics/ipv6-transit-statistics/output-bps) {
											<td colspan="4" id="paddedcellcenter"> {
												expr ($phys-int/traffic-statistics/ipv6-transit-statistics/output-bps) _ " bps";
											}
										}
									}
								}
								if (/traffic-statistics/ipv6-transit-statistics/input-packets) {
									<tr> {
										<td colspan="4" id="paddedcellright"> {
											expr "Input packets:";
										}
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/ipv6-transit-statistics/input-packets);
										}
										if (/traffic-statistics/ipv6-transit-statistics/input-pps) {
											<td colspan="4" id="paddedcellcenter"> {
												expr ($phys-int/traffic-statistics/ipv6-transit-statistics/input-pps) _ " pps";
											}
										}
									}
								}
								if (/traffic-statistics/ipv6-transit-statistics/output-packets) {
									<tr> {
										<td colspan="4" id="paddedcellright"> {
											expr "Output packets:";
										}
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/traffic-statistics/ipv6-transit-statistics/output-packets);
										}
										if (/traffic-statistics/ipv6-transit-statistics/output-pps) {
											<td colspan="4" id="paddedcellcenter"> {
												expr ($phys-int/traffic-statistics/ipv6-transit-statistics/output-pps) _ " pps";
											}
										}
									}
								}
							}
						}
						/* Ingress Traffic Statistics */
						if ( name() == "ingress-traffic-statistics" ) {
							<tr> {
								<td colspan="20" id="tableheaderleft"> {
									expr "Ingress traffic statistics at Packet Forwarding Engine:";
								}
							}
							if (/ingress-traffic-statistics/input-bytes) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Input bytes";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/ingress-traffic-statistics/input-bytes);
									}
									if (/ingress-traffic-statistics/input-bps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/ingress-traffic-statistics/input-bps) _ " bps";
										}
									}
								}
							}
							if (/ingress-traffic-statistics/input-packets) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Input packets";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/ingress-traffic-statistics/input-packets);
									}
									if (/ingress-traffic-statistics/input-pps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/ingress-traffic-statistics/input-pps) _ " pps";
										}
									}
								}
							}
							if (/ingress-traffic-statistics/input-drop-bytes) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Drop bytes";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/ingress-traffic-statistics/input-drop-bytes);
									}
									if (/ingress-traffic-statistics/input-drop-bps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/ingress-traffic-statistics/input-drop-bps) _ " bps";
										}
									}
								}
							}
							if (/ingress-traffic-statistics/input-drop-packets) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Drop packets";
									}
									<td colspan="4" id="paddedcellcenter"> {
										expr ($phys-int/ingress-traffic-statistics/input-drop-packets);
									}
									if (/ingress-traffic-statistics/input-drop-pps) {
										<td colspan="4" id="paddedcellcenter"> {
											expr ($phys-int/ingress-traffic-statistics/input-drop-pps) _ " pps";
										}
									}
								}
							}
						}
						/* Ingress Queue Counters */
						if ( name() == "ingress-queue-counters" ) {
							if (/ingress-queue-counters/interface-cos-short-summary/intf-cos-queue-type) {
								<tr> {
									<td colspan="20"> {
										if (/ingress-queue-counters/interface-cos-short-summary/intf-cos-queue-type) {
											expr (/ingress-queue-counters/interface-cos-short-summary/intf-cos-queue-type) _ ": " _ (/ingress-queue-counters/interface-cos-short-summary/intf-cos-num-queues-supported) _ " supported, " _ (/ingress-queue-counters/interface-cos-short-summary/intf-cos-num-queues-in-use) _ " in use";
										}
									}
								}
							}
						}
						if ( name() == "ingress-queue-counters" ) {
							<tr> {
								<td colspan="5" id="tableheaderleft" width="25%"> {
									expr "Queue counters:";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Queued packets";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Transmitted packets";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Dropped packets";
								}
							}
							for-each (/ingress-queue-counters/queue) {
								<tr> {
									<td colspan="5" id="paddedcell"> {
										expr (queue-number) _ " " _ (forwarding-class-name);
									}
									<td colspan="5" id="paddedcellcenter"> {
										expr (queue-counters-queued-packets);
									}
									<td colspan="5" id="paddedcellcenter"> {
										expr (queue-counters-trans-packets);
									}
									if (queue-counters-red-packets) {
										<td colspan="5" id="paddedcellcenter"> {
											expr (queue-counters-red-packets);
										}
									}
									else if (queue-counters-total-drop-packets) {
										<td colspan="5" id="paddedcellcenter"> {
											expr (queue-counters-total-drop-packets);
										}
									}
								}
							}
						}
						/* Queue Counters */
						if ( name() == "queue-counters" ) {
							if (/queue-counters/interface-cos-short-summary/intf-cos-queue-type) {
								<tr> {
									<td colspan="20"> {
										if (/queue-counters/interface-cos-short-summary/intf-cos-queue-type) {
											expr (/queue-counters/interface-cos-short-summary/intf-cos-queue-type) _ ": " _ (/queue-counters/interface-cos-short-summary/intf-cos-num-queues-supported) _ " supported, " _ (/queue-counters/interface-cos-short-summary/intf-cos-num-queues-in-use) _ " in use";
										}
									}
								}
							}
						}
						if ( name() == "queue-counters" ) {
							<tr> {
								<td colspan="5" id="tableheaderleft" width="25%"> {
									expr "Queue counters:";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Queued packets";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Transmitted packets";
								}
								<td colspan="5" id="tableheader" width="25%"> {
									expr "Dropped packets";
								}
							}
							for-each (/queue-counters/queue) {
								<tr> {
									<td colspan="5" id="paddedcell"> {
										expr (queue-number) _ " " _ (forwarding-class-name);
									}
									<td colspan="5" id="paddedcellcenter"> {
										expr (queue-counters-queued-packets);
									}
									<td colspan="5" id="paddedcellcenter"> {
										expr (queue-counters-trans-packets);
									}
									if (queue-counters-red-packets) {
										<td colspan="5" id="paddedcellcenter"> {
											expr (queue-counters-red-packets);
										}
									}
									else if (queue-counters-total-drop-packets) {
										<td colspan="5" id="paddedcellcenter"> {
											expr (queue-counters-total-drop-packets);
										}
									}
								}
							}
						}
						/* Queue numbers */
						if (name() == "queue-num-forwarding-class-name-map") {
							/* To identify only the first occurrence */
							var $current = current();
							if ( contains( $current , "0" ) ) {
								<tr> {
									<td colspan="5" id="paddedheader"> {
										expr "Queue number:";
									}
									<td colspan="15" id="paddedheader"> {
										expr "Mapped forwarding classes";
									}
								}
								for-each(/queue-num-forwarding-class-name-map) {
									<tr> {
										<td colspan="5" id="paddedcellright"> {
											expr (queue-number);
										}
										<td colspan="15" id="paddedcell"> {
											expr (forwarding-class-name);
										}
									}
								}
							}
						}
						/* Active Alarms */
						if (name() == "active-alarms") {
							<tr> {
								<td colspan="20"> {
									expr "Active alarms: ";
									if ( $phys-int/active-alarms/interface-alarms/alarm-not-present) {
										expr "None ";
									}
									if ( $phys-int/active-alarms/interface-alarms/ethernet-alarm-link-down) {
										expr "LINK ";
									}
								}
							}
						}
						/* Active Defects */
						if (name() == "active-defects") {
							<tr> {
								<td colspan="20"> {
									expr "Active defects: ";
									if ( $phys-int/active-defects/interface-alarms/alarm-not-present) {
										expr "None ";
									}
									if ( $phys-int/active-defects/interface-alarms/ethernet-alarm-link-down) {
										expr "LINK ";
									}
								}
							}
						}
						/* Ethernet-PCS-Statistics */
						if (name() == "ethernet-pcs-statistics") {
							<tr> {
								<td colspan="4" id="tableheaderleft"> {
									expr "PCS statistics";
								}
								<td colspan="4" id="tableheaderright"> {
									expr "Seconds";
								}
								<td colspan="12">;
							}
							if (/ethernet-pcs-statistics/bit-error-seconds) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Bit errors";
									}
									<td colspan="4" id="paddedcellright"> {
										expr (bit-error-seconds);
									}
									<td colspan="12">;
								}
							}
							if (/ethernet-pcs-statistics/errored-blocks-seconds) {
								<tr> {
									<td colspan="4" id="paddedcellright"> {
										expr "Errored blocks";
									}
									<td colspan="4" id="paddedcellright"> {
										expr (errored-blocks-seconds);
									}
									<td colspan="12">;
								}
							}
						}
						/* Interface transmit statistics */
						if (name() == "interface-transmit-statistics") {
							<tr> {
								<td colspan="20"> {
									expr "Interface transmit statistics: " _ (.);
								}
							}
						}
						/* Debug code to parse all data can be placed here. */
					}
                }
              }
			}
			var $close-results = jcs:close ( $connection );
			if ($close-results/..//xnm:error) {
				call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
				<xsl:message terminate="yes"> ;
			}
          }
        }
      }
    }
    expr jcs:syslog("daemon.info", "SCRIPT_ACTION_IF_STATUS: Script action taken to show status of the physical interface.");
  }
}


template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
