/* 
	Script to request uptime information from both REs.			
*/

/* 
	Author: bcersows
	Version: 1.01
	Date: 25.02.2014
	Last Modified By: bcersows	
	###Script_requestFromBothREs.slax;v1.01;2014.02.25	
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass Both RE" */
/* @DESCRIPTION = "Listet Informationen über ein Device auf." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				/*copy-of bcersows:insertCurrentTime();*/
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				/*<div id="floatingButton" onclick="toggleAll(this);"> { 
					expr "Alle oeffnen.";
				}*/
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $baseCmd = "show system uptime";
				var $rpc = { <command> $baseCmd _ " invoke-on all-routing-engines | display xml"; };
				<div> {
					uexpr "Command: <span class='italic'>" _ $rpc _ "</span>.";
				}
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );

				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Answers (per XML)"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "systemUptime" );
					}
					<table id="resultsTable" class="xwide" border="1"> {
						<tr> {
							<th> { expr "RE Name"; }
							<th> { expr "Current time"; }
							<th> { expr "System booted"; }
							<th> { expr "Protocols started"; }
							<th> { expr "Last configured"; }
							<th> { expr "Uptime information"; }
						}
						
						for-each ( $results/multi-routing-engine-item ) {
							var $fileDay = jcs:regex( "P([0-9]+).*", date:duration(./file-date) )[2];
							<tr> {
								<th> { expr ./re-name; }
								<td > { expr ./system-uptime-information/current-time/date-time; }
								<td title="Running for : " _ ./system-uptime-information/system-booted-time/time-length _ "."> { expr ./system-uptime-information/system-booted-time/date-time; }
								<td title="Running for : " _ ./system-uptime-information/protocols-started-time/time-length _ "."> { expr ./system-uptime-information/protocols-started-time/date-time; }
								<td title="Running for : " _ ./system-uptime-information/last-configured-time/time-length _ "."> { expr ./system-uptime-information/last-configured-time/date-time; }
								<td title="Time, up-time, active user count, load average 1/5/15 minutes."> { 
									expr ./system-uptime-information/uptime-information/date-time; <br>; 
									expr ./system-uptime-information/uptime-information/up-time; <br>;
									expr ./system-uptime-information/uptime-information/active-user-count; <br>;
									expr ./system-uptime-information/uptime-information/load-average-1 _ "/";
									expr ./system-uptime-information/uptime-information/load-average-5 _ "/";
									expr ./system-uptime-information/uptime-information/load-average-15;
								}
							}
						}
						/*expr $results;*/
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					expr "Dauer der Ausfuehrung: " _ $duration _ "s. ";
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
