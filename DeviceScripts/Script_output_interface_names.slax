
/*****************************************************************************/
/* This script is used to display the configuration of an interface.         */
/* This query cannot be managed with RPC and a show configuration interfaces */
/* command is issued as an alternative.                                      */
/* HTML formatting issues probably exist with Internet Explorer.             */
/*****************************************************************************/

version 1.1;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns str = "http://exslt.org/strings";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/device/interface-information/physical-interface[not( starts-with( name , "fxp0" ) )]|/device/configuration/interfaces/interface[starts-with(name, "ge-") or starts-with(name, "xe-")]" */
/* @NAME = "Output Interface Names" */
/* @DESCRIPTION = "Display selected Interface's names." */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @ISLOCAL = "true" */
/* @PASSDEVICECREDENTIALS = "true" */

/* Global variables */
var $scriptname = "lc-ifname-config.slax";
var $devicename; /* device name derived from CONTEXT */
var $physintname; /* physical interface name derived from CONTEXT */
var $splitCredentials; /* array of all credentials */
var $splitCredential; /* array of one set of credentials */
var $maxUnitCount = 1000;  /* Limits the results to a maximum of 1000 logical interfaces*/

var $arguments = {
  <argument> {
    <name> "CONTEXT";
    <description> "The context associated with this script.";
  }
}
param $CONTEXT;

match / {
  <op-script-results> {
    mvar $count = "0";    /*count of devices    */
    mvar $host-compare;   /* used for comparing */

    mvar $hostname;       /* credentials of user@ip           */
    mvar $splitHostname;  /* array of user and ip credentials */
    mvar $ip;             /* credentials ip address           */
    mvar $user;           /* credentials username             */
    mvar $password;       /* credentials password             */

    /* Split interfaces and Credentials */
    var $interfaces = jcs:split( "\\|", $CONTEXT );
    var $splitCredentials = str:split( $credentials , "\\;" );

    mvar $countConfigUnits = "0"; /* Counter for number of units in configuration code */ 
    mvar $oneTimeOnly = "1";      /* one time only trigger */

    <output> {
      <HTML> {
        <HEAD> {
          <title> "Interface Configuration";
          copy-of jspace:html-style("10");
        }
        <BODY> {
          /* Loop through every interface */
          for-each ( $interfaces ) {

            /* get devicename and interface name */
            /*var $interface-regex = jcs:regex( "/device(\\[.*\\])/interface-information/physical-interface(\\[.*\\])", (.) );*/
			var $interface-regex = jcs:regex( "/device(\\[.*\\])/(interface-information/physical-interface|configuration/interfaces/interface)(\\[.*\\])", (.) );
            var $devicename = str:replace(str:replace($interface-regex[2],"[name=\"",""),"\"]","");
            var $physintname = str:replace(str:replace(str:replace($interface-regex[4],"[name=",""),"]",""),"\"","");
	
            /* build command to executed */
            var $command = {
              <command> "show configuration interfaces " _ $physintname;
            }


            /* First time pass store the first devicename in $host-compare */
            /* Increase the count of unique devices seen to 1              */
            if ($count = "0") {
              set $host-compare = $devicename;
              set $count = $count + 1;
            }

            /* If the devicename is different from the previous loop  */
            /* then we must be using a new device, increase the count */
            /* and save the current devicename as the host to compare */
            if ( $host-compare != $devicename ) {
              set $count = $count + 1;
              set $host-compare = $devicename;
            }

            /* Using the count of unique devices found, the correct connection */
            /* parameters to be used can be derived from $splitCredentials     */
            var $splitCredential = str:split( $splitCredentials[$count] , "\\:" );
            set $hostname = $splitCredential[1];
            set $password = $splitCredential[2];
            set $splitHostname = str:split( $hostname[1] , "\@");
            set $user = $splitHostname[1];
            set $ip = $splitHostname[2];
            /*var $connection = jcs:open( $ip , $user , $password );*/
            /* abort if no connection to local mgd */
            /*if ($connection/..//xnm:error) {
            	call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
            	<xsl:message terminate="yes"> ;
						}
            var $results = jcs:execute($connection , $command);
            if ($results/..//xnm:error) {
            	call rpc_failure($rpc = $results/.., $message = "Error executing command show configuration interfaces");
            	<xsl:message terminate="yes"> ;
						}
            var $close-results = jcs:close ( $connection );
            if ($close-results/..//xnm:error) {
            	call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
            	<xsl:message terminate="yes"> ;
			}*/

            /* split data into lines */
            /*var $lines = jcs:break-lines( $results/configuration-output );*/
            <p>;
            <p id="pheader"> {
              expr "Interface configuration for " _  $devicename _ " : " _ $physintname;
            }
            if ( $oneTimeOnly = 0 ) {
              <p id="configlines"> {
                expr "Cannot display configuration as limit has been reached.";
              }
            }
			<p id="configlines"> {
				expr ("Context was: " _ .);
			}
            /*for-each ($lines) {
              if( position() > 1) {
                if ( contains( (.) , "unit") ) {
                  set $countConfigUnits = $countConfigUnits + 1;
                }

                if ( $countConfigUnits <= $maxUnitCount) {
                  <p id="configlines"> {
                    expr (.);
                  }
                }
                else {
                  /* Display this only once*
                  if ( $oneTimeOnly = 1 ) {
                    set $oneTimeOnly = 0; /* Disable this message from repeating *
                    <p id="configlines"> {
                      expr "Maximum # of logical interface units has been reached.  No additional configuration can be displayed.";
                    }
                  }
                }
              }
            }*/
          } /* end of interface loop */
        } /* end of html body */
      } /* end of html */
    } /* end of output */
    expr jcs:syslog("daemon.info", "SCRIPT_ACTION_IF_CONFIG: Script action taken to show physical interface configuration.");
  } /* end of op-script-results */
} /*end of match */

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
