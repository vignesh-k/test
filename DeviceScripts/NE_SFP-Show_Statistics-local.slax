/*
 * Filename      : NE_SFP-Show_Statistics-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Select Xcvr/Interface to display SFP data
 *
 */

version 1.0;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns str = "http://exslt.org/strings";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/device/chassis-inventory/chassis/chassis-module/chassis-sub-module/chassis-sub-sub-module/chassis-sub-sub-sub-module[(starts-with(name,"Xcvr"))and(starts-with(description,"SFP"))]|/device/interface-information/physical-interface" */
/* @NAME = "Show SFP Statistics" */
/* @DESCRIPTION = "Select Xcvr/Interface to display SFP data" */
/* @ISLOCAL = "true" */

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}
param $CONTEXT;

match / {
	<op-script-results> {
		/* context via physical-interface or chassis-inventory */
		var $context-type = {
	    if ( not(jcs:empty(substring-after($CONTEXT, "interface-information"))) ) {
				expr "interface";
	    }
	    else {
	    	expr "inventory";
	    }
		}

		/* list of sfp */
		var $req-pfe-execute-one-rpc = <request-pfe-execute> {
	    if ( $context-type = "inventory") {
				<target> "fpc" _ jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\"FPC ([0-9]+)\"\\]",$CONTEXT);
	    }
	    else {
				<target> "fpc" _ jspace:parse-context-chassis("/device.*/interface-information/physical-interface\\[name=\".*-([0-9]+)/[0-9]+/[0-9]+\"\\]",$CONTEXT);
	    }
	    <command> "show sfp list";
		}
		/* open connection */
		var $connection = jcs:open();
		/* abort if no connection to local mgd */
		if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}

		var $results-one = jcs:execute( $connection , $req-pfe-execute-one-rpc );
		if ($results-one/..//xnm:error) {
			call rpc_failure($rpc = $results-one/.., $message = "Error requesting pfe execute show sfp list");
			<xsl:message terminate="yes"> ;
		}

		var $fpc = {
	    if ( $context-type = "inventory") {
				expr jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\"FPC ([0-9]+)\"\\]",$CONTEXT);
	    }
	    else {
				expr jspace:parse-context-chassis("/device.*/interface-information/physical-interface\\[name=\".*-([0-9]+)/[0-9]+/[0-9]+\"\\]",$CONTEXT);
	    }
		}
		var $pic = {
	    if ( $context-type = "inventory") {
				expr jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-sub-sub-module\\[name=\"PIC ([0-9]+)\"\\]",$CONTEXT);
	    }
	    else {
				expr jspace:parse-context-chassis("/device.*/interface-information/physical-interface\\[name=\".*-[0-9]+/([0-9]+)/[0-9]+\"\\]",$CONTEXT);
	    }
		}
		var $xcvr = {
	    if ( $context-type = "inventory") {
	    	expr jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-sub-sub-sub-module\\[name=\"Xcvr ([0-9]+)\"\\]",$CONTEXT);
	    }
	    else {
	    	expr jspace:parse-context-chassis("/device.*/interface-information/physical-interface\\[name=\".*-[0-9]+/[0-9]+/([0-9]+)\"\\]",$CONTEXT);
	    }
		}

		var $sfp-index = jcs:regex( "GOT:[[:blank:][:space:]]*([0-9]+)[[:blank:][:space:]]*MIC\\(" _ $fpc _ "/" _ $pic _"\\)\\(" _ $xcvr _ "\\)", $results-one )[2];
		var $req-pfe-execute-rpc = <request-pfe-execute> {
	    <target> "fpc" _ $fpc;
	    <command> "show sfp " _ $sfp-index;
		}
		var $results-two = jcs:execute( $connection , $req-pfe-execute-rpc );
		if ($results-two/..//xnm:error) {
			call rpc_failure($rpc = $results-two/.., $message = "Error requesting pfe execute show sfp");
			<xsl:message terminate="yes"> ;
		}
		/* close connection */
		var $close-results = jcs:close ( $connection );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
	
		/* split into lines */
		var $lines = jcs:break-lines( $results-two );

		<output> {
	    <HTML> {
	    	<HEAD> {
		    	<title> "SFP Driver Stats";
		    	copy-of jspace:html-style("10");
				}
				<BODY> {
		    	if ( not(jcs:empty($sfp-index)) ) {
		    		for-each ($lines) {
		    	    if ( position() > 4 ) {
								<p id="configlines"> {
			            expr jcs:regex( "GOT: (.*)",(.) )[2];
								}
							}
		        }
					}
					else {
		        <p> {
							expr "Selected interface not found in SFP list.";
		        }
					}
				} /* body */
	    } /* html */
		}
		expr jcs:syslog("daemon.info", "SCRIPT_ACTION_SFP_STATUS: Script action taken to show SFP status.");
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
