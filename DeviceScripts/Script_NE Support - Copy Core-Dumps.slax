/* 
	Script to simulate the "show system core-dumps" command and to send them to a remote server.			
*/

/*
	Author: bcersows
	Version: 1.2
	Date: 06.03.2015
	Last Modified By: bcersows
	###Script_copySystemCoreDumps.slax;v1.2;2015.03.06
*/

/*
	Changelog:
	----------
	1.1; 14.08.2014: 
		- Set default parameters to the ones of NSO.
	1.2; 06.03.2015:
		- Set some parameters to fixed.
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device[matches(name, '\w{3}J\d{2,3}') or matches(name, '^(bng|BNG).*$')]" */
/* @NAME = "NE Support - Copy Core-Dumps" */
/* @DESCRIPTION = "Script to simulate the "show system core-dumps" command and to send them to a remote server." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}, {'name':'Server','defaultvalue':'153.17.33.219'}, {'name':'caseNumber','defaultvalue':'123-456-789'}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "Server";
		<description> "Address of remote server. Standard servers are 153.17.33.219 and 153.17.33.220.";
	}
	<argument> {
		<name> "caseNumber";
		<description> "Case number of Juniper.";
	}
}
param $CONTEXT;
param $Server;
var $path = '/zfs/ftp/acc-jun/incoming';
var $username = 'bicobng';
param $caseNumber;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = "get-system-core-dumps";
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );

				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Core-Dumps"; }
					}
					
					mvar $finalPath = {
						expr "scp://";
						expr $username;
						expr "@" _ $Server _ "" _ $path;
					}
					if ( substring( $finalPath , string-length( $finalPath ) , 1 ) != "/" ) { set $finalPath = $finalPath _ "/"; }
					
					<p> {
						expr "External directory path: ";
						<span class="italic"> { expr $Server _ "" _ $path; }
						expr ".";
					}
					
					mvar $copiedCount = 0;
					
					if ( $results/directory/file-information ) {
						<table class="xwide"> {
							<tr> {
								<th> { expr "Name"; }
								<th> { expr "Owner"; }
								<th> { expr "Group"; }
								<th> { expr "Size (in MByte)"; }
								<th> { expr "Date"; }
								<th> { expr "Copied"; }
							}
							
							for-each ( $results/directory/file-information ) {
								var $realFileName = jcs:regex( ".*/(.+)", ./file-name )[2];
								
								<tr> {
									<td title="" _ ./file-name> { expr $caseNumber _ "-" _ $realFileName; }
									<td class="alignCenter"> { expr ./file-owner; }
									<td class="alignCenter"> { expr ./file-group; }
									<td class="alignLeft" title="" _ ./file-size _ " Byte"> { expr format-number( ./file-size div 1024 div 1024, "00###,###.000" ); }
									<td class="alignLeft" title="Unix Timestamp: " _ ./file-date _ "."> { expr ./file-date/@junos:format; }
									
									var $copyCmd = {
										<file-copy> {
											<destination> $finalPath _ $caseNumber _ "-" _ $realFileName;
											<source> ./file-name;
										}
									}
									var $copyResults = jcs:execute( $connection, $copyCmd );
									if( $copyResults//self::xnm:error ) {
										/*expr "Error while copying file " _ ./file-name _ ": "; <br>;*/
										mvar $errors = "";
										for-each ( $copyResults//self::xnm:error ) {
											/*expr " - " _ .; <br>;*/
											set $errors = $errors _ . _ " ";
										}
										<td class="majorError" style="text-align: center;" title="There were errors: " _ $errors _ "."> { expr "No"; }
									} else {
										set $copiedCount = $copiedCount + 1;
										<td class="infoError" style="text-align: center;"> { expr "Yes"; }
									}	
								}
							}
							/*expr $results;*/
						}
						<p> { expr "Copied " _ $copiedCount _ " of " _ count( $results/directory/file-information ) _ " dump";
							if ( count( $results/directory/file-information ) > 1 ) { expr "s"; }
							expr ".";
						}
					} else {
						<p> {
							expr "There are no core-dumps at the moment.";
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.1";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
				
				/*set $configRpcs = <clear-aaa-statistics-table> { <accounting>; }
				set $results = jcs:execute( $connection, $configRpcs );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );*/
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
