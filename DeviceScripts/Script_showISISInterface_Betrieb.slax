/* 
	Script to show the IS-IS interfaces (show isis interface).
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 14.04.2014
	Last Modified By: bcersows
	###Script_showISISInterface_Betrieb.slax;v1.0;2014.04.14
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass IS-IS Interface Information" */
/* @DESCRIPTION = "Shows IS-IS information." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = "get-isis-interface-information";
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "IS-IS Interfaces"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "isisInterfaces" );
						if ( !$results/isis-interface ) {
							copy-of bcersows:disableDownloadButton();
						}
					}
					<p> {
						expr "There are " _ count( $results/isis-interface ) _ " hostname entries." ;
					}
					if ( $results/isis-interface ) {
						<table id="resultsTable" class="xwide" border="1"> {
							<tr> {
								<th> { expr "Interface name"; }
								<th> { expr "L"; }
								<th> { expr "Circuit ID"; }
								<th> { expr "Circuit Interface state one"; }
								<th> { expr "Circuit Interface state two"; }
								<th> { expr "metric-one" _ "/" _ "metric-two"; }
							}
							for-each ( $results/isis-interface ) {
								<tr> {
									<td> { expr ./interface-name; }
				                    <td> { expr  ./circuit-type; }
									<td> { expr ./circuit-id; }
	                                <td> { expr ./isis-interface-state-one;}
									<td> { expr ./isis-interface-state-two;}
									<td> { expr ./metric-one _ "/" _ ./metric-two; }
								}
							}
						}
					} 
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.0";
					<span class="right"> { 
						expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
					}
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
