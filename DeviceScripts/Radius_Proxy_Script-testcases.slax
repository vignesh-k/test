/* 
	Script to reconfigure the RADIUS servers in maintenance or desaster mode.
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 24.02.2014
	Last Modified By: bcersows
	###Radius_Proxy_Script-Script_version.slax;v1.0;2014.02.24
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";

import "../import/junos.xsl";

/* @CONTEXT = "/device|/device/configuration/access/radius-server|/device/configuration" */
/* @NAME = "Radius-Proxy-Umschaltung Testfall" */
/* @DESCRIPTION = "Skript zur Umschaltung des Radius-Servers. Dabei kann entweder nach Maintenance- oder nach Desaster-Vorgehensweise umgeschalten werden. Benutzt keine Configlets. Nach v12." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'oldServerIP','defaultvalue':'10.201.100.100'},{'name':'mode','selectionvalues':'Maintenance, Desaster'},{'name':'newServerIP','defaultvalue':'12.12.12.12'},{'name':'loopbackIP','defaultvalue':''},{'name':'password','defaultvalue':''},{'name':'AAATest_Username','defaultvalue':'dummy'},{'name':'AAATest_Password','defaultvalue':'dummy'},{'name':'AAATest_LineID','defaultvalue':'DEU.DTAG.IDIDIDID'}]" */
/* @CONFIRMATIONs = "Wirklich umschalten? Bitte ausgewählten Modus überprüfen."  */

/* Loopback 11.99.0.16 */
mvar $counter = 0;
mvar $output = "";
mvar $commitCount = 0; mvar $didCommit = false();

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "mode";
		<description> "Umschaltungsmodus (Maintenance, Desaster).";
	}
	<argument> {
		<name> "oldServerIP";
		<description> "IP des alten Radius-Servers (wenn nicht per CIM direkt aufgerufen).";
	}
	<argument> {
		<name> "newServerIP";
		<description> "IP des neuen Radius-Servers.";
	}
	<argument> {
		<name> "password";
		<description> "Passwort des Radius-Servers. Wird normalerweise aus der Konfiguration des alten Servers ausgelesen.";
	}
	<argument> {
		<name> "loopbackIP";
		<description> "Source-Adresse des neuen Radius-Servers.";
	}
	<argument> {
		<name> "AAATest_Username";
		<description> "AAATest";
	}
	<argument> {
		<name> "AAATest_Password";
		<description> "AAATest";
	}
	<argument> {
		<name> "AAATest_LineID";
		<description> "AAATest";
	}
}
param $CONTEXT;
param $oldServerIP;
param $newServerIP;
param $loopbackIP;
param $password;
param $AAATest_Username;
param $AAATest_Password;
param $AAATest_LineID;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $changeMsg = "oho";
	mvar $unlock-results;
	mvar $load-results;
	mvar $loadConfigRpcs;
	mvar $booleanTester;
	mvar $try;
	mvar $lock-results;

	/*
	if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
		var $interface-regex = jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT );
		var $oldSrvIP = $interface-regex[3];
	} else {
		var $interface-regex = jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT );
		var $oldSrvIP = $oldServerIP;
	}
	var $devicename = $interface-regex[2];
	
	var $myDevice = {
		if ( $DEVICE ) {
			expr $DEVICE;
		}
		else {
			expr $devicename;
		}
	}*/
	
	var $connection = jcs:open();
	
	var $myDevice = {
		/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
			expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
		} else {
			expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
		}*/
		if ( $CONTEXT ) {
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		} else {
			var $devQuery = <get-configuration database="committed" inherit="inherit"> {
				<configuration> {
					<system> {
						<host-name>;
					}
				}
			}
			var $devQueryResult = jcs:execute( $connection, $devQuery );
			expr $devQueryResult/system/host-name;	
		}
	}
	
	var $oldSrvIP = {
		if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
			expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[3];
		} else {
			expr $oldServerIP;
		}
	}
	
	<output> {
		expr "Startinformationen: Device " _ $myDevice _ ", alter Radius-Server: " _ $oldSrvIP _ ", neuer Radius-Server: " _ $newServerIP _ "."; expr "\n";
	
		/*
		*	Get configuration.
		*/

		/*show access radius-server 80.156.51.5
		show access profile BNG radius | match ser
		show access profile BNG-ESSMD radius | match ser*/
		set $unlock-results = jcs:execute( $connection, "unlock-database" );
		
		set $booleanTester = true(); set $try = 0; var $maxTries = 3;
		while ( $booleanTester ) {
			set $lock-results = jcs:execute( $connection, "lock-configuration" );
			set $try = $try + 1;
			if( $lock-results//self::xnm:error ) {
				if ( $try > $maxTries ) {
					set $booleanTester = false();
					set $unlock-results = jcs:execute( $connection, "unlock-database" );
					expr "[LOG] ERR044: Konnte Datenbank nicht exklusiv belegen."; expr "\n";
					<xsl:message terminate="yes"> "Konnte Datenbank nicht exklusiv belegen.";
				}
				expr "Fehler beim exklusiven Zugriff auf Datenbank. Vesuch Nummer " _ $try _ " von " _ $maxTries _ ". Versuche erneut."; expr "\n";
				expr jcs:sleep( 10 );	/* Wait some seconds.. */
			} else {
				set $booleanTester = false();
			}
		}
		
		mvar $configRpc = <get-configuration database="committed" inherit="inherit"> {
			<configuration> {
				<access> {
					<radius-server> {
						<name> $oldSrvIP;
					}
					<profile>;
				}
			}
		}
		
		mvar $results = jcs:execute( $connection, $configRpc );
		
		


		
		if ( $mode == "Maintenance" ) {
		
			expr ""; expr "\n";
			expr "\tMaintenance mode"; expr "\n";
			expr "\t----------------"; expr "\n";

			/* delete access profile BNG radius authentication-server 80.156.51.5 
			delete access profile BNG authentication-order radius
			delete access profile BNG-ESSMD radius authentication-server 80.156.51.5 */
			expr " "; expr "\n";
			expr "# ------------------------------"; expr "\n";
			expr "# disable authentication server "; expr "\n";
			expr "# ------------------------------"; expr "\n";
			set $loadConfigRpcs = <load-configuration action="merge"> {
				<configuration> {
					<interfaces> {
						<interface> {
							<name> "ge-4/0/5";
							<description> "1" ;
						}
					}
				}
			}
			set $load-results = jcs:execute( $connection, $loadConfigRpcs );
			expr "[LOG] Set 1."; expr "\n";
			call checkErrors( $resultsNodeSet = $load-results, $connection, $msg = "Fehler beim Hinzufuegen." );
			
			call commit( $connection, $msg = "First" );
			
			set $loadConfigRpcs = <load-configuration action="merge"> {
				<configuration> {
					<interfaces> {
						<interface> {
							<name> "ge-4/0/5";
							<description> "2" ;
						}
					}
				}
			}
			set $load-results = jcs:execute( $connection, $loadConfigRpcs );
			expr "[LOG] Set 2."; expr "\n";
			call checkErrors( $resultsNodeSet = $load-results, $connection, $msg = "Fehler beim Hinzufuegen." );
			
			call commit( $connection );
			
			set $loadConfigRpcs = <load-configuration action="merge"> {
				<configuration> {
					<interfaces> {
						<interface> {
							<name> "ge-4/0/5";
							<description> "3" ;
						}
					}
				}
			}
			set $load-results = jcs:execute( $connection, $loadConfigRpcs );
			expr "[LOG] Set 3."; expr "\n";
			call checkErrors( $resultsNodeSet = $load-results, $connection, $msg = "Fehler beim Hinzufuegen." );
			
			expr "Rollbacking/closing!"; expr "\n";
			
			expr "checkPPP"; expr "\n";
			call checkPPP( $connection );
			expr "checkedPPP"; expr "\n";
			
			call close( $connection );

			expr " "; expr "\n"; expr "MSG#OK99 Konfiguration erfolgreich abgeschlossen"; expr "\n";
			
		
		} else {	/* if Maintenance - else */
			
			expr ""; expr "\n";
			expr "\tDisaster mode"; expr "\n";
			expr "\t-------------"; expr "\n";
			
			expr " "; expr "\n"; expr "MSG#OK99 Konfiguration erfolgreich abgeschlossen"; expr "\n";
			
		}

		set $unlock-results = jcs:execute( $connection, "unlock-database" );
		expr jcs:close( $connection );
	}
}
}

template close ( $connection ) {
	expr "Closing."; expr "\n";
	if ( $didCommit ) {
		expr "Attempting to rollback " _ $commitCount _ " times."; expr "\n";
		call rollback( $connection, $rbCount = $commitCount );
	}
	expr "Really closing.."; expr "\n";
	var $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
}

template rollback( $connection, $rbCount = 0 ) {
	var $rollbackRPC = <load-configuration rollback=$rbCount>;
	var $rb-results = jcs:execute( $connection, $rollbackRPC );
	/*var $rb-results := {
		call jcs:load-configuration( $connection, $rollback=$rbCount )
	}*/
	var $msg = "RadiusProxyScript: Rolled back " _ $rbCount _ ".";
	call commit( $connection, $msg );
	if( $rb-results//self::xnm:error ) {
		expr "[LOG] ERR066 Rollback nicht erfolgreich."; expr "\n";
	} else {
		expr "[LOG] Rollback erfolgreich."; expr "\n";
	}
}

template commit ( $connection, $msg = "" ) {
	expr "Committing..."; expr "\n";
	var $commit-configuration = <commit-configuration> {
		if ( $msg ) {
			<log> $msg;
		}
	}
	var $commit-results = jcs:execute($connection, $commit-configuration);
	if( $commit-results//self::xnm:error ) {
		expr "[LOG] ERR067 Commit konnte nich durchgeführt werden."; expr "\n";
		call close( $connection );
		<xsl:message terminate="yes"> "Commit konnte nich durchgeführt werden.";
	}
	set $didCommit = true();
	set $commitCount = $commitCount + 1;
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		expr $msg;
		call close( $connection );
		<xsl:message terminate="yes"> $msg;
	}
}

template checkSuccess( $curl, $query ) {
	if ( $counter > 15 ) {
		set $counter = 0;
		expr "Stopped. Counter too big."; expr "\n";
	} else {
		set $counter = $counter + 1;
		var $job-results = curl:perform($curl , $query )/data/job;
		if ( $job-results/status == "UNDETERMINED" ) {
			expr jcs:sleep( "5" );
			call checkSuccess( $curl = $curl, $query = $query );	
		} else {
			/*expr "Counter is " _ $counter;*/
			set $counter = 0;
		}
	}
}

template checkPPP ( $connection ) {
	/*var $rpc = { <command> "run test aaa ppp agent-remote-id DEU.DTAG.IDIDIDID user dummy password dummy"; }*/
	var $rpc = <get-ppp-user-aaa-test-result> {
		<user> $AAATest_Username;
		<password> $AAATest_Password;
		<agent-remote-id> $AAATest_LineID;
	};
	/*expr $rpc;*/
	var $testResults = jcs:execute( $connection, $rpc );
	if( $testResults//self::xnm:error ) {
		expr "MSG#ERR021 AAA-Test nicht erfolgreich"; expr "\n";
		for-each ( $testResults//self::xnm:error ) {
			expr " Error: " _ .;
		}
	} else if ( $testResults/aaa-test-status == "Authentication Deny" ) {
		expr "MSG#ERR021 AAA-Test nicht erfolgreich"; expr "\n";
		expr " AAA-Test: Authentication denied"; expr "\n";
	} else {
		expr "MSG#OK03 AAA-Test erfolgreich"; expr "\n";
	}
}