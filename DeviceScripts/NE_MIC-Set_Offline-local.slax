/*
 * Filename      : NE_MIC-Set_Offline-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Take MIC offline.
 *
 */

version 1.0;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns str = "http://exslt.org/strings";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/device/chassis-inventory/chassis/chassis-module[starts-with(name,"FPC")]/chassis-sub-module[starts-with(name,"MIC")]" */
/* @NAME = "Put MIC Offline" */
/* @DESCRIPTION = "Take MIC offline." */
/* @CONFIRMATION = "Are you sure that you want to take the MIC offline?" */
/* @ISLOCAL = "true" */

/* Global variables */
var $scriptname = "NE_MIC-Set_Offline-local.slax";
var $results;
var $regex;
var $result-regex;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}
param $CONTEXT;

match / {
	<op-script-results> {
		var $regex = "/device.*/chassis-inventory/chassis\\[name=\"(.*)\"\\]/chassis-module\\[name=\"(.* ([0-9]+))\"\\]/chassis-sub-module\\[name=\"(.* ([0-9]+))\"\\]";
		var $result-regex = jcs:regex( $regex , $CONTEXT );
		
		/* Request MIC offline */
		var $command = {
			<command> "request chassis mic offline fpc-slot " _ $result-regex[4] _ " mic-slot " _ $result-regex[6];
		}
		var $connection = jcs:open();
		/* abort if no connection to local mgd */
		if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}
		var $results = jcs:execute( $connection , $command );
		if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error executing command request chassis mic offline fpc-slot");
			<xsl:message terminate="yes"> ;
		}

		<output> {
			<HTML> {
				<HEAD> {
					<title> "MIC offline";
					copy-of jspace:html-style("1");
				}
				<BODY> {
					<p> {
						copy-of str:replace($results,"output","");
					}
					/* Display additional information if the MIC has been taken offline */
					if (jcs:regex(".*verify.*",$results)) {
					  <p> {
					    expr "Alternatively, if the MIC has been taken offline via the Junos Space GUI with the use of execute scripts, verification can be performed with the script \"View MIC Status\" whilst selecting a MIC from within the physical inventory view.";
					  }
					}
				}
			}
		}
    if ( contains( $results , "already offline" ) ) {
			expr jcs:syslog("daemon.info", "SCRIPT_ACTION_MIC_ONLINE: Script action failed to offline the Modular Interface Card (MIC), as it is offline already.");
		}
		else {
			expr jcs:syslog("daemon.info", "SCRIPT_ACTION_MIC_OFFLINE: Script action taken to offline the Modular Interface Card (MIC).");
		}
		var $close-results = jcs:close( $connection );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
