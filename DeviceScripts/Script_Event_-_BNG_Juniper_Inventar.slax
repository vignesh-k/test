/* 	
	Betrieb: Event Script to periodically request some information from the BNG and send it to a remote server.
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 22.05.2014
	Last Modified By: bcersows
	###Script_Event_-_BNG_Juniper_Inventar.slax;v1.0;2014.05.22
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Event - BNG Juniper Inventar" */
/* @DESCRIPTION = "Event Script to periodically request some information from the BNG and send it to a remote server." */
/* @ISLOCAL = "false" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'Server','defaultvalue':'10.201.100.100'},{'name':'outputPath','defaultvalue':'/home/conf-save/scriptTests'}]" */

mvar $counter = 0;
mvar $output = "";
mvar $contentToWrite = "";
var $version = "1.0";

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "Server";
		<description> "Remote server.";
	}
	<argument> {
		<name> "outputPath";
		<description> "Path of output file. File name will be '[BNG Name]_[YYYYmmDD]_BNG_Inventary'";
	}
}
param $CONTEXT;
param $Server;
param $outputPath;

/*var $event-definition = {
	<event-options> {
		<generate-event> {
			<name> "BNG-Juniper-Inventar";
			*//* every week *//*
			<time-interval> "604800";
		}
		<policy> {
			<name> "BNG-Juniper-Inventar";
			<events> "every-week";
			<then> {
				<event-script> {
					<name> "Script_Event_-_BNG_Juniper_Inventar.slax";
					<arguments> {
						<name> "Server";
						<value> "10.201.100.100";
					}
					<arguments> {
						<name> "outputPath";
						<value> "/home/conf-save/scriptTests";
					}
					<arguments> {
						<name> "varUserName";
						<value> "conf-save";
					}
				}
			}
		}
	}
}*/

match / {
	<event-script-results> {
	/*<op-script-results> {*/
		var $connection = jcs:open();
		if ($connection/..//xnm:error) {
			<error> "Error connecting on mgd on this RE";
			<xsl:message terminate="yes"> ;
		}
		
		<output> {
			<HTML> {
				<HEAD> {
					<style type="text/css"> {
						expr "/* Basics, tables, .. */";
						expr "html {  }";
						expr "body { font-family: Verdana, Georgia, Arial, sans-serif; color:#000;";
							expr " margin: 0px; overflow-x: hidden;";
							expr " width: 100%; text-rendering: optimizeLegibility; }";
						expr "div, p, span { font-size: 11px; }";
						expr "div.header { background-color: rgb(226,0,116); }";
						expr "div.error { background-color: RED; }";
						expr "\n";
						expr "/* Text formatting, download button. */";
						expr ".bold { font-weight: bold; }";
						expr ".italic { font-style: italic; }";
						expr ".subheader { width: 100%; overflow: auto; }\n";
						expr ".data, .code { white-space: pre; font-family: monospace; }\n";
						expr ".right { float: right; clear: right; }";
						expr ".left { float: left; clear: left; }";
						expr ".clearBoth { clear: both; }";
						expr ".capitalize { text-transform: capitalize; }";
						expr ".alignCenter { text-align: center; }";
						expr ".lpadding5 { padding-left: 5px; }";
						expr ".lpadding15 { padding-left: 15px; }";
						expr ".lpadding30 { padding-left: 30px; }";
						expr "\n";
						expr "/* Color declarations. */";
						expr ".magenta:not([type=li]) { color: #E20074; }";
						expr ".juniper:not([type=li]) { color: #6883A2; }";
						expr "li.magenta { color: #E20074; }";
						expr "li.juniper { color: #6883A2; }";
						expr ".magentaBack { background-color: #E20074; }";
						expr ".juniperBack { background-color: #6883A2; }";
					}
				}
				<BODY> {
					<div class="header"> {
						<h4> "Script Event - BNG Juniper Inventary";
					}
					
					if ( $connection ) { } else {	
						<div class="error"> {
							expr "Konnte keine Verbindung aufbauen."; <br>;
							expr "Abbruch folgt.";
						}
					}	
					
					var $myDevice = {
						if ( $hostname ) {
							expr $hostname;
						} else {
							expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
						}
					}
					
					var $username = {
						if ( $myDevice == "BNGJMX4" ) {
							expr "conf-save";
						} else {
							expr "bico-bng";
						}
					}
					
					/* TODO: First one does not seem to work. Further tests needed. */
					/*if ( not( ends-with( $outputPath, "/" ) ) ) { 
						expr "-/";
					}
					if ( substring( $outputPath , string-length( $outputPath ) , 1 ) != "/" ) { expr "+/"; }*/
					
					var $outputFileTime = date:year() _ "" _ format-number( date:month-in-year(), "00" ) _ "" _ format-number( date:day-in-month(), "00" );	
					var $destinationPath = {
						if ( $Server != "" ) {
							expr "scp://";
							if ( $username != "" ) {
								expr $username;
								expr "@";
							}
							expr $Server _ "";
						}
						expr $outputPath;
						if ( substring( $outputPath , string-length( $outputPath ) , 1 ) != "/" ) { 
							expr "/"; 
						}
					}
					
					var $hardwareRpc = <get-chassis-inventory> {
						<detail>;
					}
					var $hardwareResults = jcs:execute( $connection, $hardwareRpc );
					call checkErrors( $resultsNodeSet = $hardwareResults, $connection, $msg = "Fehler." );
					
					var $versionResults = jcs:execute( $connection, "get-software-information" );
					call checkErrors( $resultsNodeSet = $versionResults, $connection, $msg = "Fehler." );
					
					var $plaintextHardware = {
						expr "Item, Version, Part Number, Serial Number, Description\r\n\r\n";
						for-each ( $hardwareResults/chassis/chassis-module ) {
							expr ./name _ "," _ ./version _ "," _ ./part-number _ "," _ ./serial-number _ "," _ ./model-number _ "\r\n";
							/* if RE, loop through disk modules. */
							for-each ( current()/chassis-re-disk-module ) {
								expr "\t" _ ./name _ "," _ ./disk-size _ "," _ ./model _ "," _ ./serial-number _ "," _ ./description _ "\r\n";
							}
							for-each ( current()/chassis-re-usb-module ) {
								expr "\t" _ ./name _ "," _ ./product _ "," _ ./product-number _ "," _ ./vendor _ "," _ ./description _ "\r\n";
							}
							/* if FPC, loop through sub and sub sub modules. */
							for-each ( current()/chassis-sub-module ) {
								expr "\t" _ ./name _ "," _ ./version _ "," _ ./part-number _ "," _ ./serial-number _ "," _ ./model-number _ "\r\n";
								for-each ( current()/chassis-sub-sub-module ) {
									expr "\t\t" _ ./name _ "," _ ./part-number _ "," _ ./serial-number _ "," _ ./description _ "\r\n";
									for-each ( current()/chassis-sub-sub-sub-module ) {
										expr "\t\t\t" _ ./name _ "," _ ./part-number _ "," _ ./serial-number _ "," _ ./description _ "\r\n";
									}
								}
							}
						}
					}
					var $xmlHardware = {
						expr "<chassis-inventory  xmlns=\"http://xml.juniper.net/junos/13.1X49/junos-chassis\">";
							expr "<name>" _ $hardwareResults/chassis/name _ "</name>\r\n";
							expr "<serial-number>" _ $hardwareResults/chassis/serial-number _ "</serial-number>\r\n";
							expr "<description>" _ $hardwareResults/chassis/description _ "</description>\r\n";
							for-each ( $hardwareResults/chassis/chassis-module ) {
								expr "<chassis-module>\r\n";
									expr "<name>" _ ./name _ "</name>\r\n";
									expr "<version>" _ ./version _ "</version>\r\n";
									expr "<part-number>" _ ./part-number _ "</part-number>\r\n";
									expr "<serial-number>" _ ./serial-number _ "</serial-number>\r\n";
									expr "<description>" _ ./description _ "</description>\r\n";
									expr "<clei-code>" _ ./clei-code _ "</clei-code>\r\n";
									expr "<model-number>" _ ./model-number _ "</model-number>\r\n";
									/* if RE, loop through disk modules. */
									for-each ( current()/chassis-re-disk-module ) {
										expr "<chassis-re-disk-module>\r\n";
											expr "<name>" _ ./name _ "</name>\r\n";
											expr "<disk-size>" _ ./disk-size _ "</disk-size>\r\n";
											expr "<model>" _ ./model _ "</model>\r\n";
											expr "<serial-number>" _ ./serial-number _ "</serial-number>\r\n";
											expr "<description>" _ ./description _ "</description>\r\n";
										expr "</chassis-re-disk-module>\r\n";
									}
									for-each ( current()/chassis-re-usb-module ) {
										expr "<chassis-re-usb-module>\r\n";
											expr "<name>" _ ./name _ "</name>\r\n";
											expr "<product>" _ ./product _ "</product>\r\n";
											expr "<product-number>" _ ./product-number _ "</product-number>\r\n";
											expr "<vendor>" _ ./vendor _ "</vendor>\r\n";
											expr "<description>" _ ./description _ "</description>\r\n";
										expr "</chassis-re-usb-module>\r\n";
									}
									/* if FPC, loop through sub and sub sub modules. */
									for-each ( current()/chassis-sub-module ) {
										expr "<chassis-sub-module>\r\n";
											expr "<name>" _ ./name _ "</name>\r\n";
											expr "<version>" _ ./version _ "</version>\r\n";
											expr "<part-number>" _ ./part-number _ "</part-number>\r\n";
											expr "<serial-number>" _ ./serial-number _ "</serial-number>\r\n";
											expr "<description>" _ ./description _ "</description>\r\n";
											expr "<clei-code>" _ ./clei-code _ "</clei-code>\r\n";
											expr "<model-number>" _ ./model-number _ "</model-number>\r\n";
											for-each ( current()/chassis-sub-sub-module ) {
												expr "<chassis-sub-sub-module>\r\n";
													expr "<name>" _ ./name _ "</name>\r\n";
													expr "<part-number>" _ ./part-number _ "</part-number>\r\n";
													expr "<serial-number>" _ ./serial-number _ "</serial-number>\r\n";
													expr "<description>" _ ./description _ "</description>\r\n";
													for-each ( current()/chassis-sub-sub-sub-module ) {
														expr "<chassis-sub-sub-sub-module>\r\n";
															expr "<name>" _ ./name _ "</name>\r\n";
															expr "<part-number>" _ ./part-number _ "</part-number>\r\n";
															expr "<serial-number>" _ ./serial-number _ "</serial-number>\r\n";
															expr "<description>" _ ./description _ "</description>\r\n";
														expr "</chassis-sub-sub-sub-module>\r\n";
													}
												expr "</chassis-sub-sub-module>\r\n";
											}
										expr "</chassis-sub-module>\r\n";
									}
								expr "</chassis-module>\r\n";
							}
						expr "</chassis-inventory>\r\n";
					}
					var $plaintextVersion = {
						expr "Hostname: " _ $versionResults/host-name _ "\r\n";
						expr "Version: " _ $versionResults/product-model _ "\r\n";
						expr "Package Name, Version\r\n\r\n";
						for-each ( $versionResults/package-information ) {
							expr "\t" _ ./name _ "," _ ./comment _ "\r\n";
						}
					}
					
					/* write files and save results in var */
					
					var $versionSendResponse = {
						var $fileName = $myDevice _ "_version_" _ $outputFileTime _ "_bng_inventory";
						var  $write-rpc = <file-put> {
							<filename> $destinationPath _ $fileName;
							<permission> "644";
							<encoding> "ascii";
							<delete-if-exist>;
							<file-contents> $plaintextVersion;
						}
						var $results = jcs:execute( $connection, $write-rpc );
						if ( $results//self::xnm:error ) {
							expr "failure";
						} else {
							expr "success";
						}
					}
					
					var $hardwareSendResponse = {
						var $fileName = $myDevice _ "_hardware_" _ $outputFileTime _ "_bng_inventory";
						var  $write-rpc = <file-put> {
							<filename> $destinationPath _ $fileName;
							<permission> "644";
							<encoding> "ascii";
							<delete-if-exist>;
							<file-contents> $plaintextHardware;
						}
						var $results = jcs:execute( $connection, $write-rpc );
						if ( $results//self::xnm:error ) {
							expr "failure";
						} else {
							expr "success";
						}
					}
					
					var $hardwareXMLSendResponse = {
						var $fileName = $myDevice _ "_hw_xml_" _ $outputFileTime _ "_bng_inventory";
						var  $write-rpc = <file-put> {
							<filename> $destinationPath _ $fileName;
							<permission> "644";
							<encoding> "ascii";
							<delete-if-exist>;
							<file-contents> $xmlHardware;
						}
						var $results = jcs:execute( $connection, $write-rpc );
						if ( $results//self::xnm:error ) {
							expr "failure";
						} else {
							expr "success";
						}
					}
					
					/* HTML Output cutted, as it won't be shown no matter what. :) */
					/*var $htmlHardwareOutput = str:split( $plaintextHardware, "\r\n" );
					<div> {
						<p class="bold subheader">{
							<span class="left"> { expr "Output HW"; }
						}
						
						<p> {
							expr "Destination path: "; <span class="italic"> $destinationPath;
						}
						
						<div> {
							for-each ( $htmlHardwareOutput ) {
								var $lpadding = {
									if ( contains ( ., "\t\t\t" ) ) {
										expr "lpadding30";
									} else if ( contains ( ., "\t\t" ) ) {
										expr "lpadding15";
									} else if ( contains ( ., "\t" ) ) {
										expr "lpadding5";
									} else {
										expr "";
									}
								}
								<span class="" _ $lpadding _ ""> .; <br>;
							}
						}
					}
					var $htmlVersionOutput = str:split( $plaintextVersion, "\r\n" );
					<div> {
						<p class="bold subheader">{
							<span class="left"> { expr "Output VS"; }
						}
						
						<p> {
							expr "Destination path: "; <span class="italic"> $destinationPath;
						}
						
						<div> {
							for-each ( $htmlVersionOutput ) {
								var $lpadding = {
									if ( contains ( ., "\t\t\t" ) ) {
										expr "lpadding30";
									} else if ( contains ( ., "\t\t" ) ) {
										expr "lpadding15";
									} else if ( contains ( ., "\t" ) ) {
										expr "lpadding5";
									} else {
										expr "";
									}
								}
								<span class="" _ $lpadding _ ""> .; <br>;
							}
						}
					}*/
					
					var $syslogString = { 
						expr "Script Event - BNG Juniper Inventar vs" _ $version _ ". ";
						expr "Version Sending: " _ $versionSendResponse _ ". ";
						expr "Hardware Sending: " _ $hardwareSendResponse _ ". ";
						expr "Hardware XML Sending: " _ $hardwareXMLSendResponse _ ". ";
					}
					
					<hr class="magenta">;
					<div> {
						expr jcs:syslog("user.info", $syslogString );
						expr $syslogString;
					}
					
					<span> "Event Script Version: " _ $version _ ".";
				}
			}
		}
		
		set $unlock-results = jcs:execute( $connection, "unlock-database" );
		expr jcs:close( $connection );
		/*<output> "------------------------------------------------";
		<output> " ****  ****  **** End of script ****  ****  ****";
		<output> "------------------------------------------------";*/
		
	}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		expr $msg; <br>;
		expr jcs:syslog("user.error", "Script Event - BNG Juniper Inventar: " _ $msg);
		for-each ($rpc//xnm:error) {
			expr .; <br>;
			expr jcs:syslog("user.error", .);
		}
	}
}

/*

	file archive compress source "/var/log/*" destination  file archive compress source /var/log/* destination conf-save@10.201.100.100:/home/conf-save/scriptsTests/BNG4_log.tgz

		<file-archive>
                <compress/>
                <destination>conf-save@10.201.100.100:/home/conf-save/scriptsTest/BNG4_log.tgz</destination>
                <source>"/var/log/*"</source>
        </file-archive>

*/