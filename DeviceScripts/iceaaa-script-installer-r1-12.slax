
/*
 * Filename      : iceaaa-script-installer-r1-12.slax
 * Author        : cgiese cgiese@juniper.net
 * Version       : R1.12
 *
 * Description   : iCEAAA Script Installer Version R1.12
 *
 */
 
/* Junos Space specific context, name and description */
/* @CONTEXT = "/device" */
/* @NAME = "iCEAAA Scripts Version R1.12" */
/* @DESCRIPTION = "Installer Script for iCEAAA Scripts" */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @VARIABLECONTEXT = "[{'name':'commit','selectionvalues':'false, true'}]" */
/* @CONFIRMATION = "Are you sure that you want to install the iCEAAA script version R1.12?"  */

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";
ns func extension = "http://exslt.org/functions";
ns jspace = "http://jspace-utils/asharp@juniper.net";

import "../import/junos.xsl";

var $arguments = {
    <argument> { 
        <name> "commit";
        <description> "commit configuration with autoclean enabled if value is true";
    }
}
param $CONTEXT;
param $commit;

var $version = "R1.12";

match / {
    <op-script-results> {
        var $localtime = date:date-time();

        var $embedded := <embedded-scripts> {
			<script> {
				<name> "iceaaa-dynamic-config.slax";
				<type> "commit";
				<base64> "";
				<md5> "e505bdb265b9ee947a1f4fd27a344782";
			}
			<script> {
				<name> "clock-synchronization-alarm.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMS4xMgogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzg0NDEgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzoyODoxMiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogZ2VuZXJhdGUgZXZlbnRzIGJhc2VkIG9uIGNsb2NrIHN5bmNocm9uaXphdGlvbiBzdGF0dXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSBjbG9jay1zeW5jaHJvbml6YXRpb24tYWxhcm0uc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gImdlbmVyYXRlIGV2ZW50cyBiYXNlZCBvbiBjbG9jayBzeW5jaHJvbml6YXRpb24gc3RhdHVzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7CgpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgIAk8cG9saWN5PiB7CiAgICAJCTxuYW1lPiAiQ0xPQ0stU1lOQyI7CiAgICAJCTxldmVudHM+ICJFVkVSWS1NSU5VVEUiOwogICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAJPGV2ZW50LXNjcmlwdD4gewogICAgICAgICAgICAJCTxuYW1lPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWFsYXJtLnNsYXgiOwogICAgICAgICAgICAJfQogICAgICAgICAgICB9CiAgICAJfQogICAgfQp9CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgY2xvY2sgc3luYyBpbmZvcm1hdGlvbiAoCiAgICAgICAgICogICAgIGNsaTogc2hvdyBjaGFzc2lzIHN5bmNocm9uaXphdGlvbiBleHRlbnNpdmUKICAgICAgICAgKi8KICAgICAgICB2YXIgJGdldC1jbG9jay1zeW5jLWluZm8gPSA8Z2V0LWNsb2NrLXN5bmNocm9uaXphdGlvbi1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICAgICAgPGV4dGVuc2l2ZT47CiAgICAgICAgfQogICAgICAgIHZhciAkY2xvY2stc3luYy1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWNsb2NrLXN5bmMtaW5mbyApOwoKICAgICAgICBtdmFyICRzdGF0dXNSeCA9ICJkaXNhYmxlZCI7CiAgICAgICAgbXZhciAkc3RhdHVzVHggPSAiZGlzYWJsZWQiOwoKICAgICAgICBpZiAoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UgKSB7CiAgICAgICAgICAgIHNldCAkc3RhdHVzUnggPSBzdHI6cmVwbGFjZSggJGNsb2NrLXN5bmMtaW5mby8vY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS1yeC1zdGF0dXMsICIgIiwgIi0iICk7CiAgICAgICAgICAgIHNldCAkc3RhdHVzVHggPSBzdHI6cmVwbGFjZSggJGNsb2NrLXN5bmMtaW5mby8vY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMsICIgIiwgIi0iICk7CiAgICAgICAgfQoKICAgICAgIC8qIGdldCB1dGlsaXR5IG1pYiBpbmZvcm1hdGlvbnMKICAgICAgICAqICAgICBjbGk6IHNob3cgc25tcCBtaWIgd2FsayBkZWNpbWFsIGpueFV0aWxTdHJpbmdWYWx1ZS45OS4xMDguMTExLjk5LjEwNy40NS4xMTUuMTIxLjExMC45OS4xMDQuMTE0LjExMS4xMTAuMTA1LjEyMi45Ny4xMTYuMTA1LjExMS4xMTAKICAgICAgICAqLwogICAgICAgIHZhciAkZ2V0LXNubXAtY2xvY2stc3luYy1pbmZvID0gPHdhbGstc25tcC1vYmplY3Q+IHsKICAgICAgICAgICAgICAgIDxkZWNpbWFsPjsKICAgICAgICAgICAgICAgIDxzbm1wLW9iamVjdC1uYW1lPiAiam54VXRpbFN0cmluZ1ZhbHVlLjk5LjEwOC4xMTEuOTkuMTA3LjQ1LjExNS4xMjEuMTEwLjk5LjEwNC4xMTQuMTExLjExMC4xMDUuMTIyLjk3LjExNi4xMDUuMTExLjExMCI7CiAgICAgICAgfQogICAgICAgIHZhciAkc25tcC1jbG9jay1zeW5jLWluZm8gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc25tcC1jbG9jay1zeW5jLWluZm8gKTsKCiAgICAgICAgbXZhciAkc3RhdHVzUnhTbm1wID0gJHNubXAtY2xvY2stc3luYy1pbmZvLy9zbm1wLW9iamVjdFsgaW5kZXgvaW5kZXgtdmFsdWUgPT0gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzIiBdL29iamVjdC12YWx1ZTsKICAgICAgICBtdmFyICRzdGF0dXNUeFNubXAgPSAkc25tcC1jbG9jay1zeW5jLWluZm8vL3NubXAtb2JqZWN0WyBpbmRleC9pbmRleC12YWx1ZSA9PSAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMiIF0vb2JqZWN0LXZhbHVlOwoKICAgICAgICBpZiggc3RyaW5nLWxlbmd0aCggJHN0YXR1c1J4U25tcCApIDwgMSApIHsKICAgICAgICAgICAgc2V0ICRzdGF0dXNSeFNubXAgPSAibm9uZSI7CiAgICAgICAgfQogICAgICAgIGlmKCBzdHJpbmctbGVuZ3RoKCAkc3RhdHVzVHhTbm1wICkgPCAxICkgewogICAgICAgICAgICBzZXQgJHN0YXR1c1R4U25tcCA9ICJub25lIjsKICAgICAgICB9CgogICAgICAgIGlmICggJHN0YXR1c1J4ICE9ICRzdGF0dXNSeFNubXAgKSB7CiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgIDx0cmFwPiAiam54RXZlbnRUcmFwIjsKICAgICAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09Y2xvY2stc3luYy1yeC0iIF8gJHN0YXR1c1J4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMl09c3RhdHVzLCAiICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJHN0YXR1c1J4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109b2xkLXN0YXR1cywgIiAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHN0YXR1c1J4U25tcDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBUcmFwUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXRyYXAgKTsKCiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgPGluc3RhbmNlPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS1yeC1zdGF0dXMiOwogICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHN0YXR1c1J4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgKTsKICAgICAgICB9CgogICAgICAgIGlmICggJHN0YXR1c1R4ICE9ICRzdGF0dXNUeFNubXAgKSB7CiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgIDx0cmFwPiAiam54RXZlbnRUcmFwIjsKICAgICAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09Y2xvY2stc3luYy10eC0iIF8gJHN0YXR1c1R4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMl09c3RhdHVzLCAiICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsyXT0iIF8gJHN0YXR1c1R4IF8gIiwgIgogICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbM109b2xkLXN0YXR1cywgIiAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHN0YXR1c1R4U25tcDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBUcmFwUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXRyYXAgKTsKCiAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgPGluc3RhbmNlPiAiY2xvY2stc3luY2hyb25pemF0aW9uLWludGVyZmFjZS10eC1zdGF0dXMiOwogICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHN0YXR1c1R4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgKTsKICAgICAgICB9CgogICAgICAgIC8qIGNsb3NlIHRoZSBjb25uZWN0aW9uICAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UoICRjb25uZWN0aW9uICk7CiAgICB9Cn0K";
				<md5> "dd77376766c801311b6fb2303cf209cf";
			}
			<script> {
				<name> "copy-backup-accounting.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGNvcHktYmFja3VwLWFjY291bnRpbmcuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjEuMTIKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NDQxICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6Mjg6MTIgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IGNvcHkgZmxhdC1maWxlIGFjY291bnRpbmcgZmlsZXMgZnJvbSBiYWNrdXAgdG8gbWFzdGVyIFJFCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIxLjEyIC0gY29weS1iYWNrdXAtYWNjb3VudGluZyIgKi8KLyogQERFU0NSSVBUSU9OID0gImNvcHkgZmxhdC1maWxlIGFjY291bnRpbmcgZmlsZXMgZnJvbSBiYWNrdXAgdG8gbWFzdGVyIFJFIiAqLwoKdmVyc2lvbiAxLjA7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKLyogVGhpcyBpcyBhbiBldmVudCBzY3JpcHQgKi8KCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CiAgICAJCiAgICAJLyogcnVubmluZyBvbiBiYWNrdXAgUkUgb25seSAqLwogICAgCWlmICggbm90KCAkanVub3MtY29udGV4dC9yZS1tYXN0ZXIgKSApIHsKICAgIAkJCiAgICAJCS8qIG9wZW4gY29ubmVjdGlvbiAqLwogICAgICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAgICAgdmFyICRnZXQtZmlsZS1saXN0ID0gPGZpbGUtbGlzdD4gewogICAgICAgICAgICAgICAgPHBhdGg+ICIvdmFyL2xvZy9leHQvanVuaXBlci8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAkZmlsZS1saXN0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWZpbGUtbGlzdCApOwoKICAgICAgICAgICAgZm9yLWVhY2goICRmaWxlLWxpc3QvL2ZpbGUtaW5mb3JtYXRpb25bIHN0YXJ0cy13aXRoKCBmaWxlLW5hbWUsICJzdGF0aXN0aWNzIiApIF0gKSB7CiAgICAJICAgICAgICBpZiggY29udGFpbnMoIGZpbGUtbmFtZSwgIi5neiIgKSApIHsKICAgIAkgICAgICAgIAkvKiBjb3B5IGNvbXByZXNzZWQgYWNjb3VudGluZyBmaWxlcyAqLwogICAgCSAgICAgICAgICAgIHZhciAkZmlsZS1uYW1lLXBhcnRzID0gamNzOnNwbGl0KCAiW1sucGVyaW9kLl1dIiwgZmlsZS1uYW1lICk7CiAgICAJICAgICAgICAgICAgdmFyICRmaWxlLW51bWJlciA9IG51bWJlciggJGZpbGUtbmFtZS1wYXJ0c1szXSApICsxMDAxOwogICAgCSAgICAgICAgICAgIHZhciAkZGVzdGluYXRpb24gPSAkZmlsZS1uYW1lLXBhcnRzWzFdIF8gIi4iIF8gJGZpbGUtbmFtZS1wYXJ0c1syXSBfICIuIiBfICRmaWxlLW51bWJlciBfICIuZ3oiOwogICAgCQogICAgCSAgICAgICAgICAgIHZhciAkY29weS10by1tYXN0ZXIgPSA8ZmlsZS1jb3B5PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2U+ICIvdmFyL2xvZy9leHQvanVuaXBlci8iIF8gZmlsZS1uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBpZiggJGp1bm9zLWNvbnRleHQvL3JvdXRpbmctZW5naW5lLW5hbWUgPT0gInJlMCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVzdGluYXRpb24+ICJyZTE6L3Zhci9sb2cvZXh0L2p1bmlwZXIvIiBfICRkZXN0aW5hdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZXN0aW5hdGlvbj4gInJlMDovdmFyL2xvZy9leHQvanVuaXBlci8iIF8gJGRlc3RpbmF0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkY29weS1yZXN1bHRzID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkY29weS10by1tYXN0ZXIgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYoICRjb3B5LXJlc3VsdHMvL3NlbGY6OnhubTplcnJvciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5lcnJvciIsICJjb3B5LWJhY2t1cC1hY2NvdW50aW5nIC0gZmFpbGVkIHRvIGNvcHkgIiBfIGZpbGUtbmFtZSBfICIgdG8gbWFzdGVyIFJFIiAgKTsKICAgIAkgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gIi92YXIvbG9nL2V4dC9qdW5pcGVyLyIgXyBmaWxlLW5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRkZWxldGUtcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZmlsZS1kZWxldGUgKTsKICAgIAkgICAgICAgICAgICB9ICAJICAgICAgICAgICAgICAgCQogICAgCSAgICAgICAgfSBlbHNlIHsKICAgIAkgICAgICAgICAgICAvKiBjb21wcmVzcyBhbmQgY29weSB1bmNvbXByZXNzZWQgYWNjb3VudGluZyBmaWxlcyAqLwogICAgCSAgICAgICAgICAgIHZhciAkY29tcHJlc3MtZmlsZSA9IDxmaWxlLWFyY2hpdmU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPGNvbXByZXNzPjsKICAgICAgICAgICAgICAgICAgICAgICAgPGRlc3RpbmF0aW9uPiAiL3Zhci9sb2cvZXh0L2p1bmlwZXIvIiBfIGZpbGUtbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZT4gIi92YXIvbG9nL2V4dC9qdW5pcGVyLyIgXyBmaWxlLW5hbWU7CiAgICAJICAgICAgICAgICAgfQogICAgCSAgICAgICAgICAgIHZhciAkY29tcHJlc3MtcmVzdWx0cyA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGNvbXByZXNzLWZpbGUgKTsKICAgIAkKICAgIAkgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gIi92YXIvbG9nL2V4dC9qdW5pcGVyLyIgXyBmaWxlLW5hbWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkZGVsZXRlLXJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGZpbGUtZGVsZXRlICk7CiAgICAJCiAgICAJICAgICAgICAgICAgdmFyICRkZXN0aW5hdGlvbiA9IGZpbGUtbmFtZSBfICIuMTAwMC5neiI7CiAgICAJICAgICAgICAgICAgdmFyICRjb3B5LXRvLW1hc3RlciA9IDxmaWxlLWNvcHk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZT4gIi92YXIvbG9nL2V4dC9qdW5pcGVyLyIgXyBmaWxlLW5hbWUgXyAiLnRneiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkanVub3MtY29udGV4dC8vcm91dGluZy1lbmdpbmUtbmFtZSA9PSAicmUwIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZXN0aW5hdGlvbj4gInJlMTovdmFyL2xvZy9leHQvanVuaXBlci8iIF8gJGRlc3RpbmF0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlc3RpbmF0aW9uPiAicmUwOi92YXIvbG9nL2V4dC9qdW5pcGVyLyIgXyAkZGVzdGluYXRpb247CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICRjb3B5LXJlc3VsdHMgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRjb3B5LXRvLW1hc3RlciApOwoKICAgIAkgICAgICAgICAgICBpZiggJGNvcHktcmVzdWx0cy8vc2VsZjo6eG5tOmVycm9yICkgewogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpzeXNsb2coICJ1c2VyLmVycm9yIiwgImNvcHktYmFja3VwLWFjY291bnRpbmcgLSBmYWlsZWQgdG8gY29weSAiIF8gZmlsZS1uYW1lIF8gIiB0byBtYXN0ZXIgUkUiICApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmlsZS1kZWxldGUtY29tcHJlc3NlZCA9IDxmaWxlLWRlbGV0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGg+ICIvdmFyL2xvZy9leHQvanVuaXBlci8iIF8gZmlsZS1uYW1lIF8gIi50Z3oiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZGVsZXRlLXJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGZpbGUtZGVsZXRlLWNvbXByZXNzZWQgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAJICAgICAgICB9CiAgICAJICAgIH0KICAgICAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgICAgICB9CiAgICB9Cn0K";
				<md5> "40db7b8d5d8a56ac7518b593bf8ba814";
			}
			<script> {
				<name> "delete-transferred-accounting.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGRlbGV0ZS10cmFuc2ZlcnJlZC1hY2NvdW50aW5nLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIxLjEyCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBkZWxldGUgZmxhdC1maWxlIGFjY291bnRpbmcgZmlsZXMgYWZ0ZXIgc3VjY2Vzc2Z1bCB0cmFuc2ZlcgogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMS4xMiAtIGRlbGV0ZS10cmFuc2ZlcnJlZC1hY2NvdW50aW5nIiAqLwovKiBAREVTQ1JJUFRJT04gPSAiZGVsZXRlIGZsYXQtZmlsZSBhY2NvdW50aW5nIGFuZCBmYWlsZWQgUlBNIGZpbGVzIGFmdGVyIHN1Y2Nlc3NmdWwgdHJhbnNmZXIiICovCgp2ZXJzaW9uIDEuMDsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgIAk8cG9saWN5PiB7CiAgICAJCTxuYW1lPiAiREVMRVRFLVRSQU5TRkVSUkVEX0FDQ09VTlRJTkciOwogICAgCQk8ZXZlbnRzPiAiU1lTVEVNIjsKICAgIAkJPGF0dHJpYnV0ZXMtbWF0Y2g+IHsKICAgICAgICAgICAgICAgIDxmcm9tLWV2ZW50LWF0dHJpYnV0ZT4gIlNZU1RFTS5tZXNzYWdlIjsKICAgICAgICAgICAgICAgIDxjb25kaXRpb24+ICJtYXRjaGVzIjsKICAgICAgICAgICAgICAgIDx0by1ldmVudC1hdHRyaWJ1dGUtdmFsdWU+ICJUcmFuc2ZlcnJlZCAvdmFyL2xvZy9leHQvanVuaXBlciI7CiAgICAJICAgIH0KICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgCTxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgCQk8bmFtZT4gImRlbGV0ZS10cmFuc2ZlcnJlZC1hY2NvdW50aW5nLnNsYXgiOwogICAgICAgICAgICAJfQogICAgICAgICAgICB9CiAgICAJfQogICAgCTxwb2xpY3k+IHsKICAgICAgICAgICAgPG5hbWU+ICJERUxFVEUtVFJBTlNGRVJSRURfUlBNIjsKICAgICAgICAgICAgPGV2ZW50cz4gIlNZU1RFTSI7CiAgICAgICAgICAgIDxhdHRyaWJ1dGVzLW1hdGNoPiB7CiAgICAgICAgICAgICAgICA8ZnJvbS1ldmVudC1hdHRyaWJ1dGU+ICJTWVNURU0ubWVzc2FnZSI7CiAgICAgICAgICAgICAgICA8Y29uZGl0aW9uPiAibWF0Y2hlcyI7CiAgICAgICAgICAgICAgICA8dG8tZXZlbnQtYXR0cmlidXRlLXZhbHVlPiAiVHJhbnNmZXJyZWQgL3Zhci9sb2cvcnBtX2ZpbGVzX25vdF90cmFuc2ZlcnJlZCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgIDxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImRlbGV0ZS10cmFuc2ZlcnJlZC1hY2NvdW50aW5nLnNsYXgiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAJfQogICAgfQp9CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewogICAgCQogICAgICAgIC8qIGdldCB0aGUgc3lzbG9nIG1lc3NhZ2UgKi8KICAgICAgICB2YXIgJG1lc3NhZ2UgPSBldmVudC1zY3JpcHQtaW5wdXQvdHJpZ2dlci1ldmVudC9tZXNzYWdlOwogICAgICAgIHZhciAkZmlsZW5hbWUgPSBzdWJzdHJpbmctYWZ0ZXIoICRtZXNzYWdlLCAiVHJhbnNmZXJyZWQgIiApOwogICAgICAgIHZhciAkZmlsZS1kZWxldGUgPSA8ZmlsZS1kZWxldGU+IHsKICAgICAgICAgICAgPHBhdGg+ICRmaWxlbmFtZTsKICAgICAgICB9CiAgICAgICAgdmFyICRkZWxldGUtcmVzdWx0ID0gamNzOmludm9rZSAoICRmaWxlLWRlbGV0ZSApOwogICAgfQp9Cg==";
				<md5> "46fb3760bde071beb46292f6b6aa1a72";
			}
			<script> {
				<name> "event-dom-signal-check.slax";
				<type> "event";
				<base64> "";
				<md5> "f8b8da85570744df4f5b714515d985e7";
			}
			<script> {
				<name> "event-mib-accounting-options-configuration-etherlike.slax";
				<type> "event";
				<base64> "";
				<md5> "6349cd35e35b378ee94df8ad7464deef";
			}
			<script> {
				<name> "event-mib-accounting-options-configuration-physical.slax";
				<type> "event";
				<base64> "";
				<md5> "cff709e31a1022feb608a59c232ab1f3";
			}
			<script> {
				<name> "event-mib-accounting-options-configuration.slax";
				<type> "event";
				<base64> "";
				<md5> "5adac73a9c323571ab078aa9a5e5dbc8";
			}
			<script> {
				<name> "event-rpm-cleanup.slax";
				<type> "event";
				<base64> "LyoNCiAqIEZpbGVuYW1lICAgICAgOiBldmVudC1ycG0tY2xlYW51cC5zbGF4DQogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldA0KICogQnVpbGQgICAgICAgICA6IFIxLjEyDQogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTw0KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrDQogKiBTVk4gSU5GTyAgICAgIDoNCiAqDQogKiAkUmV2aXNpb246IDM4NDQxICQNCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkDQogKiAkQXV0aG9yOiBjZ2llc2UgJA0KICoNCiAqIERlc2NyaXB0aW9uICAgOiBjbGVhbnVwIGhpc3RvcmljIHN0YXRpc3RpYyBmaWxlcw0KICoNCiAqLw0KDQovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLw0KLyogQENPTlRFWFQgPSAiL2hpZGUiICovDQovKiBATkFNRSA9ICJSMS4xMiAtIGV2ZW50LXJwbS1jbGVhbnVwLnNsYXgiICovDQovKiBAREVTQ1JJUFRJT04gPSAiY2xlYW51cCBoaXN0b3JpYyBzdGF0aXN0aWMgZmlsZXMiICovDQoNCnZlcnNpb24gMS4wOw0KDQpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOw0KbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOw0KbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsNCm5zIGRhdGUgPSAiaHR0cDovL2V4c2x0Lm9yZy9kYXRlcy1hbmQtdGltZXMiOw0KDQppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOw0KDQp2YXIgJGxvY2FsID0gamNzOm9wZW4oKTsNCg0KdmFyICRhcmd1bWVudHMgPSB7DQoJPGFyZ3VtZW50PiB7DQoJCTxuYW1lPiAiUEFUSCI7DQoJCTxkZXNjcmlwdGlvbj4gIlBhdGggd2hlcmUgZmlsZXMgYXJlIGxvY2F0ZWQuIjsNCgl9DQoJPGFyZ3VtZW50PiB7DQoJCTxuYW1lPiAiQUdFIjsNCgkJPGRlc2NyaXB0aW9uPiAiQWdlIGluIHNlY29uZHMgYWZ0ZXJ3aGljaCByZW1vdmFsIG9jY3Vycy4iOw0KCX0NCn0NCnBhcmFtICRQQVRIOw0KcGFyYW0gJEFHRTsNCnZhciAkcGF0aC10by1maWxlcyA9IHsNCglpZiAoIHN1YnN0cmluZyggJFBBVEggLCBzdHJpbmctbGVuZ3RoKCAkUEFUSCApICwgMSApICE9ICIvIiApIHsNCgkJZXhwciAkUEFUSCBfICIvIjsNCgl9DQoJZWxzZSB7DQoJCWV4cHIgJFBBVEg7DQoJfQ0KfQ0KDQptYXRjaCAvIHsNCgk8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsNCg0KCQkvKiBhYm9ydCBpZiBubyBjb25uZWN0aW9uIHRvIGxvY2FsIG1nZCAqLw0KICAgIGlmICgkbG9jYWwvLi4vL3hubTplcnJvcikgew0KCQkJY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGxvY2FsLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7DQoJCQk8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7DQogICAgfQ0KDQogICAgLyogY2hlY2sgY3VycmVudCBSRSBpcyBtYXN0ZXIgUkUuIFN0b3AgZXhlY3V0aW9uIGlmIG5vdCAqLw0KICAgIHZhciAkcmVfc3RhdHVzID0geyBjYWxsIGlzX21hc3RlcigpOyB9DQogICAgaWYgKCRyZV9zdGF0dXMgIT0gIm1hc3RlciIpIHsNCiAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+ICJTY3JpcHQgbm90IHJ1bm5pbmcgb24gbWFzdGVyIFJFLiBTdG9wcGluZyBleGVjdXRpb24iOw0KICAgIH0NCg0KICAgIAl2YXIgJGZpbGUtbGlzdC1ycGMgPSA8ZmlsZS1saXN0PiB7DQogICAgCQk8cGF0aD4gJHBhdGgtdG8tZmlsZXM7DQogICAgCQk8ZGV0YWlsPjsNCiAgICAJfQ0KICAgIAl2YXIgJHJlc3VsdHMgPSBqY3M6ZXhlY3V0ZSggJGxvY2FsICwgJGZpbGUtbGlzdC1ycGMgKTsNCiAgICAJaWYgKCRyZXN1bHRzLy4uLy94bm06ZXJyb3IpIHsNCgkJCWNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRyZXN1bHRzLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBvYnRhaW5pbmcgbGlzdCBvZiBmaWxlcyIpOw0KCQkJPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOw0KCQl9DQoJCQkJDQogICAgCWZvci1lYWNoICggJHJlc3VsdHMvZGlyZWN0b3J5L2ZpbGUtaW5mb3JtYXRpb24gKSB7DQogICAgCQlpZiAoICggZGF0ZTpzZWNvbmRzKCBkYXRlOmR1cmF0aW9uKCkgKSAtICguL2ZpbGUtZGF0ZSkgKSA+ICRBR0UgKSB7DQogICAgCQkJdmFyICRmaWxlLWRlbGV0ZS1ycGMgPSA8ZmlsZS1kZWxldGU+IHsNCiAgICAJCQkJPHBhdGg+ICRwYXRoLXRvLWZpbGVzIF8gKC4vZmlsZS1uYW1lKTsNCgkJCQl9DQoJCQkJdmFyICRmaWxlLWRlbGV0ZSA9IGpjczpleGVjdXRlICggJGxvY2FsICwgJGZpbGUtZGVsZXRlLXJwYyApOw0KCQkJCWlmICgkZmlsZS1kZWxldGUvLi4vL3hubTplcnJvcikgew0KICAgIAkJCQljYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkZmlsZS1kZWxldGUvLi4sICRtZXNzYWdlID0gIkVycm9yIHJlbW92aW5nIGZpbGUiKTsNCiAgICAJCQkJPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOw0KCQkJCX0NCgkJCX0NCgkJfQ0KICAgIAkvKiBsb2cgc3VjY2Vzc2Z1bCBydW4gb2Ygc2NyaXB0ICovDQogICAgCXZhciAkc3lzbG9nLW1lc3NhZ2UgPSAiUHVyZ2Ugb2YgYWNjb3VudGluZy1vcHRpb24gZmlsZXMgaW4gIiBfICRwYXRoLXRvLWZpbGVzIF8gIiBjb21wbGV0ZWQuIjsNCgkJZXhwciBqY3M6c3lzbG9nKCJkYWVtb24ubm90aWNlIiwgJHN5c2xvZy1tZXNzYWdlKTsNCgkJDQoJCXZhciAkY2xvc2UtcmVzdWx0cyA9IGpjczpjbG9zZSggJGxvY2FsICk7DQoJCWlmICgkY2xvc2UtcmVzdWx0cy8uLi8veG5tOmVycm9yKSB7DQogICAgCQljYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uIik7DQogICAgCQk8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7DQoJCX0NCgl9DQp9DQoNCnRlbXBsYXRlIGlzX21hc3RlcigpIHsNCiAgaWYgKCBldmVudC1zY3JpcHQtaW5wdXQvanVub3MtY29udGV4dCApIHsNCiAgICBpZiAoIGV2ZW50LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsNCiAgICAgIDxvdXRwdXQ+ICJtYXN0ZXIiOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgIDxvdXRwdXQ+ICJiYWNrdXAiOw0KICAgIH0NCiAgfQ0KICBlbHNlIGlmICggY29tbWl0LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0ICkgew0KICAgIGlmICggY29tbWl0LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsNCiAgICAgIDxvdXRwdXQ+ICJtYXN0ZXIiOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgIDxvdXRwdXQ+ICJiYWNrdXAiOw0KICAgIH0NCiAgfQ0KICBlbHNlIGlmICggb3Atc2NyaXB0LWlucHV0L2p1bm9zLWNvbnRleHQgKSB7DQogICAgaWYgKCBvcC1zY3JpcHQtaW5wdXQvanVub3MtY29udGV4dC9yZS1tYXN0ZXIgKSB7DQogICAgICA8b3V0cHV0PiAibWFzdGVyIjsNCiAgICB9DQogICAgZWxzZSB7DQogICAgICA8b3V0cHV0PiAiYmFja3VwIjsNCiAgICB9DQogIH0NCiAgZWxzZSB7DQogICAgdmFyICRyZV9ycGMgPSA8Z2V0LXJvdXRlLWVuZ2luZS1pbmZvcm1hdGlvbj4gOw0KICAgIHZhciAkcmUgPSBqY3M6ZXhlY3V0ZSgkbG9jYWwsICRyZV9ycGMpOw0KICAgIGlmICgkcmUvLi4vL3hubTplcnJvcikgew0KICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJHJlLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb21tdW5pY2F0aW5nIHRvIGRldGVybWluZSBpZiBtYXN0ZXIiKTsNCiAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsNCiAgICB9DQoNCiAgICAvKiBpZiB0aGVyZSBpcyBvbmx5IG9uZSBSRSB0aGVuIGlzIGhhcyB0byBiZSBtYXN0ZXIgKi8NCiAgICBpZiAoICRyZS9yb3V0ZS1lbmdpbmUgKSB7DQogICAgICBpZiAoIGNvdW50KCAkcmUvcm91dGUtZW5naW5lICkgPT0gMSApIHsNCiAgICAgICAgPG91dHB1dD4gIm1hc3RlciI7DQogICAgICB9DQogICAgICAvKiBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIFJFIHRoaXMgWFBhdGggc3RhdGVtZW50IGlzIG9ubHkgdHJ1ZSBvbiB0aGUgbWFzdGVyIFJFICovDQogICAgICBlbHNlIGlmICggJHJlL3JvdXRlLWVuZ2luZVttYXN0ZXJzaGlwLXN0YXRlID09ICJtYXN0ZXIiXS9sb2FkLWF2ZXJhZ2Utb25lICkgew0KICAgICAgICA8b3V0cHV0PiAibWFzdGVyIjsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgICA8b3V0cHV0PiAiYmFja3VwIjsNCiAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7DQogICAgICB2YXIgJHhtbCA9IHsgY29weS1vZiAkcmU7IH0NCiAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+ICJFUlJPUjogVW5leHBlY3RlZCByZXNwb25zZTogIiBfICR4bWw7DQogICAgfQ0KICB9DQp9DQoNCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7DQoJZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7DQoJZm9yLWVhY2ggKCRycGMvL3hubTplcnJvcikgew0KCQlleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsIG1lc3NhZ2UpOw0KCX0NCn0NCg==";
				<md5> "3251908c7e62c8341e9f09c3c4c49cf1";
			}
			<script> {
				<name> "event-sfp-data.slax";
				<type> "event";
				<base64> "";
				<md5> "cfc4c90e63926003a70b513f92d74c83";
			}
			<script> {
				<name> "iceaaa-autoclean-tmp.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIxLjEyCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSBpY2VhYWEtYXV0b2NsZWFuLXRtcCIgKi8KLyogQERFU0NSSVBUSU9OID0gIm9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbCIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp0ZW1wbGF0ZSBqdW5vc2NyaXB0KCkgewogICAgLyogcnVuIHNjcmlwdCBvbiBtYXN0ZXIgUkUgb25seSAuLi4gKi8KICAgIGlmICggJGp1bm9zLWNvbnRleHQvcmUtbWFzdGVyICkgewogICAgICAgIHZhciAkYXV0b2NsZWFuU3RhdHVzID0gPHRydWU+OwogICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgIGNvcHktb2YgJGF1dG9jbGVhblN0YXR1czsKICAgICAgICB9CiAgICB9Cn0K";
				<md5> "7c05cdf8dab2cb1b91795d8c86509193";
			}
			<script> {
				<name> "iceaaa-clean-cache.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1jbGVhbi1jYWNoZS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMS4xMgogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzg0NDEgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzoyODoxMiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogcmVtb3ZlIHVudXNlZCBjb25maWcgY2FjaGUgZmlsZXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSBpY2VhYWEtY2xlYW4tY2FjaGUuc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gInJlbW92ZSB1bnVzZWQgY29uZmlnIGNhY2hlIGZpbGVzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIGRhdGUgPSAiaHR0cDovL2V4c2x0Lm9yZy9kYXRlcy1hbmQtdGltZXMiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgICAgIDxwb2xpY3k+IHsKICAgICAgICAgICAgPG5hbWU+ICJJQ0VBQUEtQ0xFQU4tQ0FDSEUiOwogICAgICAgICAgICA8ZXZlbnRzPiAiSUNFQUFBLUNMRUFOLUNBQ0hFIjsKICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgIDxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImljZWFhYS1jbGVhbi1jYWNoZS5zbGF4IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKPHhzbDprZXkgbmFtZT0icHBwb2Utc3Vic2NyaWJlcnMiIG1hdGNoPSJzdWJzY3JpYmVycy1pbmZvcm1hdGlvbi9zdWJzY3JpYmVyIiB1c2U9InNlc3Npb24taWQiPjsKCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgdmFyICRmaWxlUGF0aCA9ICIvbWZzL3Zhci90bXAiOwoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgc3Vic2NyaWJlci1pbmZvcm1hdGlvbiBmb3IgcHBwb2Ugc2Vzc2lvbnMgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVyID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgIDxkZXRhaWw+OwogICAgICAgIH0KICAgICAgICB2YXIgJHN1YnNjcmliZXJzID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXIgKTsKCiAgICAgICAgLyogZ2V0IGZpbGUgbGlzdCAqLwogICAgICAgIHZhciAkZ2V0LWZpbGUtbGlzdCA9IDxmaWxlLWxpc3Q+IHsKICAgICAgICAgICAgPHBhdGg+ICRmaWxlUGF0aDsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkZmlsZS1saXN0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWZpbGUtbGlzdCApOwoKICAgICAgICAvKiBkZWxldGUgY2FjaGUgZmlsZXMgaWYgY29ycmVzcG9uZGluZyBwcHBvZSBzZXNzaW9uIGlzIG1pc3NpbmcgKi8KICAgICAgICBmb3ItZWFjaCggJGZpbGUtbGlzdC8vZmlsZS1pbmZvcm1hdGlvbiApIHsKICAgICAgICAgICAgdmFyICRmaWxlTmFtZSA9IGpjczpyZWdleCggIl4oW1s6ZGlnaXQ6XV0qKV9bWzpkaWdpdDpdXSoiLCBmaWxlLW5hbWUgKTsKICAgICAgICAgICAgaWYoICRmaWxlTmFtZVsyXSApIHsKICAgICAgICAgICAgICAgIGZvci1lYWNoICggJHN1YnNjcmliZXJzICkgewogICAgICAgICAgICAgICAgICAgIGlmKCBub3QoIGtleSggInBwcG9lLXN1YnNjcmliZXJzIiwgJGZpbGVOYW1lWzJdICApL3JhZGl1cy1hY2NvdW50aW5nLWlkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmlsZS1kZWxldGUgPSA8ZmlsZS1kZWxldGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGggXyAiLyIgXyAkZmlsZU5hbWVbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRmaWxlLWRlbGV0ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8qIGRlbGV0ZSBpY2VhYWEtbWFuYWdlciBjb21taXQgYW5kIG1hY3JvIHJlc3VsdCBmaWxlcyBvbGRlciB0aGVuIDI0aCAoODY0MDBzKSAqLwogICAgICAgICAgICAgICAgaWYoIGNvbnRhaW5zKCBmaWxlLW5hbWUsICJpY2VhYWEtbWFuYWdlciIgKSApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoICggZGF0ZTpzZWNvbmRzKCBkYXRlOmR1cmF0aW9uKCkgKSAtIGZpbGUtZGF0ZSApID4gODY0MDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmlsZS1kZWxldGUgPSA8ZmlsZS1kZWxldGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGggXyAiLyIgXyBmaWxlLW5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRmaWxlLWRlbGV0ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvKiBjbG9zZSBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRjb25uZWN0aW9uICk7CiAgICB9Cn0K";
				<md5> "a5ff0058a92f9e8781f8062dddf2ca96";
			}
			<script> {
				<name> "iceaaa-messages.slax";
				<type> "event";
				<base64> "";
				<md5> "e3b80f9f59a9d33f540a6fa2524567fb";
			}
			<script> {
				<name> "mib_acct-session-id.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IG1pYl9hY2N0LXNlc3Npb24taWQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjEuMTIKICogUGxhdGZvcm0gICAgICA6IE1YCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBldmVudC1zY3JpcHQgd3JpdGluZyBhbGwgYWN0aXZlIFBQUG9FIHN1YnNjcmliZXIgaW4gdGhlIHV0aWwgTUlCCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIxLjEyIC0gbWliX2FjY3Qtc2Vzc2lvbi1pZC5zbGF4IiAqLwovKiBAREVTQ1JJUFRJT04gPSAiZXZlbnQtc2NyaXB0IHdyaXRpbmcgYWxsIGFjdGl2ZSBQUFBvRSBzdWJzY3JpYmVyIGluIHRoZSB1dGlsIE1JQiIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgCTxwb2xpY3k+IHsKICAgIAkJPG5hbWU+ICJNSUItQUNDVC1TRVNTSU9OLUlEIjsKICAgIAkJPGV2ZW50cz4gIkVWRVJZLU1JTlVURSI7CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgIAk8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgIAkJPG5hbWU+ICJtaWJfYWNjdC1zZXNzaW9uLWlkLnNsYXgiOwogICAgICAgICAgICAJfQogICAgICAgICAgICB9CiAgICAJfQogICAgfQp9Cgo8eHNsOmtleSBuYW1lPSJzdWJzY3JpYmVyIiBtYXRjaD0ic3Vic2NyaWJlcnMtaW5mb3JtYXRpb24vc3Vic2NyaWJlciIgdXNlPSJyYWRpdXMtYWNjb3VudGluZy1pZCI+Owo8eHNsOmtleSBuYW1lPSJtaWIiIG1hdGNoPSJzbm1wLW9iamVjdC1pbmZvcm1hdGlvbi9zbm1wLW9iamVjdCIgdXNlPSJpbmRleC9pbmRleC12YWx1ZSI+OwoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKICAgIAkKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBzaG93IHN1YnNjcmliZXJzIGNsaWVudC10eXBlIHBwcG9lIHN1YnNjcmliZXItc3RhdGUgYWN0aXZlIGRldGFpbCAqLwogICAgICAgIHZhciAkZ2V0LXN1YnNjcmliZXJzLWluZm8gPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgIDxjbGllbnQtdHlwZT4gInBwcG9lIjsKICAgICAgICAgICAgPHN1YnNjcmliZXItc3RhdGU+ICJhY3RpdmUiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVyLWluZm8gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlcnMtaW5mbyApOwoKICAgICAgICAvKiBzaG93IHNubXAgbWliIHdhbGsgZGVjaW1hbCBqbnhVdGlsU3RyaW5nVmFsdWUuMTEyLjExMi4xMTIuNDYgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVyLXNubXAgPSA8d2Fsay1zbm1wLW9iamVjdD4gewogICAgICAgICAgICAgICAgPGFzY2lpPjsKICAgICAgICAgICAgICAgIDxzbm1wLW9iamVjdC1uYW1lPiAiam54VXRpbFN0cmluZ1ZhbHVlLjExMi4xMTIuMTEyLjQ2IjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVyLXNubXAgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlci1zbm1wICk7CgogICAgICAgIC8qIGFkZCBtaXNzaW5nIHBwcG9lIHN1YnNjcmliZXIgdG8gdGhlIHV0aWwgTUlCIC4uLiAqLwogICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1pbmZvLy9zdWJzY3JpYmVyICkgewogICAgICAgICAgICB2YXIgJHNlc3Npb25JZCA9IHNlc3Npb24taWQ7CiAgICAgICAgICAgIHZhciAkcmFkaXVzQWNjdElkID0gcmFkaXVzLWFjY291bnRpbmctaWQ7CiAgICAgICAgICAgIHZhciAkaW5zdGFuY2UgPSAicHBwLiIgXyAkc2Vzc2lvbklkOwogICAgICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItc25tcCApIHsKICAgICAgICAgICAgICAgIGlmKCBub3QoIGtleSggIm1pYiIsICRpbnN0YW5jZSApL29iamVjdC12YWx1ZSApICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYmplY3QtdHlwZT4gInN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gJGluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgICAgICA8b2JqZWN0LXZhbHVlPiAkcmFkaXVzQWNjdElkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qIHJlbW92ZSBkaXNjb25uZWN0ZWQgcHBwb2Ugc3Vic2NyaWJlciB0aGUgdGhlIHV0aWwgTUlCIC4uLiAqLwogICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1zbm1wLy9zbm1wLW9iamVjdCApIHsKICAgICAgICAgICAgdmFyICRyYWRpdXNBY2N0SWQgPSBvYmplY3QtdmFsdWU7CiAgICAgICAgICAgIHZhciAkaW5zdGFuY2UgPSBpbmRleC9pbmRleC12YWx1ZTsKICAgICAgICAgICAgZm9yLWVhY2goICRzdWJzY3JpYmVyLWluZm8gKSB7CiAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJzdWJzY3JpYmVyIiwgJHJhZGl1c0FjY3RJZCApL3Nlc3Npb24taWQgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1jbGVhciA9IDxyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgICAgICAgICAgPGluc3RhbmNlPiAkaW5zdGFuY2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkc25tcE1pYlJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1jbGVhciApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSB0aGUgY29ubmVjdGlvbiAgKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgfQp9Cg==";
				<md5> "34cd49b5ec51f46693eabbabd0d3dfab";
			}
			<script> {
				<name> "trap_ancp.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHRyYXBfYW5jcC5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMS4xMgogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzg0NDEgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzoyODoxMiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogZ2VuZXJhdGVzIFNOTVAgdHJhcHMgYmFzZWQgb24gQU5DUCBzeXNsb2cKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSB0cmFwX2FuY3AiICovCi8qIEBERVNDUklQVElPTiA9ICJnZW5lcmF0ZXMgU05NUCB0cmFwcyBiYXNlZCBvbiBBTkNQIHN5c2xvZyIgKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKbnMgc3RyID0gImh0dHA6Ly9leHNsdC5vcmcvc3RyaW5ncyI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKLyogVGhpcyBpcyBhbiBldmVudCBzY3JpcHQgKi8KCnZhciAkZXZlbnQtZGVmaW5pdGlvbiA9IHsKICAgIDxldmVudC1vcHRpb25zPiB7CiAgICAJPHBvbGljeT4gewogICAgCQk8bmFtZT4gIkFOQ1AiOwogICAgCQk8ZXZlbnRzPiAiU1lTVEVNIjsKICAgIAkJPGF0dHJpYnV0ZXMtbWF0Y2g+IHsKICAgICAgICAgICAgICAgIDxmcm9tLWV2ZW50LWF0dHJpYnV0ZT4gIlNZU1RFTS5tZXNzYWdlIjsKICAgICAgICAgICAgICAgIDxjb25kaXRpb24+ICJtYXRjaGVzIjsKICAgICAgICAgICAgICAgIDx0by1ldmVudC1hdHRyaWJ1dGUtdmFsdWU+ICJhbmNwZF9zZXNzaW9uLipzdGF0ZSI7CiAgICAJICAgIH0KICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgCTxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgCQk8bmFtZT4gInRyYXBfYW5jcC5zbGF4IjsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgfQogICAgCX0gLyogLi4uIHBvbGljeSBFT0FNX0NGTV9USU1FT1VUIiAqLwogICAgfQp9CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewogICAgCQogICAgCS8qIG9wZW4gY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY29ubmVjdGlvbiA9IGpjczpvcGVuKCk7CgogICAgICAgIC8qIGdldCB0aGUgc3lzbG9nIG1lc3NhZ2UgKi8KICAgICAgICB2YXIgJG1lc3NhZ2UgPSBldmVudC1zY3JpcHQtaW5wdXQvdHJpZ2dlci1ldmVudC9tZXNzYWdlOwoKICAgICAgICB2YXIgJGV2ZW50ID0gewogICAgICAgICAgICBpZiggY29udGFpbnMoICRtZXNzYWdlLCAic3RhdGUgaXMgdXAiICkgKSB7CiAgICAgICAgICAgIAk8dmFsdWU+ICJVUCI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICA8dmFsdWU+ICJET1dOIjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyICRtZXNzYWdlUGFydCA9IHN1YnN0cmluZy1hZnRlciAoICRtZXNzYWdlLCAiIG5laWdoYm9yICIgKTsKICAgICAgICB2YXIgJG5laWdoYm9yID0gc3Vic3RyaW5nLWJlZm9yZSAoICRtZXNzYWdlUGFydCwgIiAiICk7CiAgICAgICAgdmFyICRyZWFzb24gPSBzdHI6cmVwbGFjZSAoIHN1YnN0cmluZy1hZnRlciAoICRtZXNzYWdlUGFydCwgIiAiICksICIgIiwgIi0iICk7CgogICAgICAgIHZhciAkZ2V0LXJvdXRlLWluZm9ybWF0aW9uID0gPGdldC1yb3V0ZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8ZGVzdGluYXRpb24+ICRuZWlnaGJvcjsKICAgICAgICAgICAgPHRhYmxlPiAiaW5ldC4wIjsKICAgICAgICAgICAgPHByb3RvY29sPiAiZGlyZWN0IjsKICAgICAgICB9CiAgICAgICAgdmFyICRyb3V0ZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1yb3V0ZS1pbmZvcm1hdGlvbiApOwogICAgICAgIG12YXIgJGlmbCA9ICRyb3V0ZS1pbmZvcm1hdGlvbi8vcnQtZW50cnkvbmgvdmlhOwoKICAgICAgICB2YXIgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gPSA8Z2V0LWludGVyZmFjZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8YnJpZWY+OwogICAgICAgICAgICA8aW50ZXJmYWNlLW5hbWU+ICRpZmw7CiAgICAgICAgfQogICAgICAgIHZhciAkaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LWludGVyZmFjZS1pbmZvcm1hdGlvbiApOwogICAgICAgIHZhciAkbGluay1hZGRyZXNzLXBhcnRzID0gamNzOnNwbGl0ICggIltbLnNwYWNlLl1dIiwgJGludGVyZmFjZS1pbmZvcm1hdGlvbi8vbGluay1hZGRyZXNzICk7CiAgICAgICAgdmFyICR2bGFuID0gewogICAgICAgICAgICBpZiAoIGNvdW50KCAkbGluay1hZGRyZXNzLXBhcnRzKSA+IDQgKSB7CiAgICAgICAgICAgICAgICA8dmFsdWU+IHN1YnN0cmluZy1hZnRlciggJGxpbmstYWRkcmVzcy1wYXJ0c1szXSwgIi4iICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICA8dmFsdWU+IHN1YnN0cmluZy1hZnRlciggJGxpbmstYWRkcmVzcy1wYXJ0c1syXSwgIi4iICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggc3RhcnRzLXdpdGgoICRpZmwsICJ4ZS0iICkgKSB7CiAgICAgICAgICAgIHNldCAkaWZsID0gIlxcIiBfICRpZmw7CiAgICAgICAgfQoKICAgICAgICAvKiBnZW5lcmF0ZSBzbm1wIHRyYXAgKi8KICAgICAgICB2YXIgJHJlcXVlc3RTbm1wVHJhcCA9IDxyZXF1ZXN0LXNubXAtZ2VuZXJhdGUtdHJhcD4gewogICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgIDx2YXJpYWJsZS1iaW5kaW5ncz4gImpueEV2ZW50VHJhcERlc2NyWzBdPUV2ZW50LVRyYXAsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMV09ZXZlbnQsICIgICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzFdPUFOQ1AtU0VTU0lPTi0iIF8gJGV2ZW50IF8gIiwgIgogICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs1XT1pZkRlc2MsICIgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbNV09IiBfICRpZmwgXyAiLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzddPW1lc3NhZ2UsICIgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVs3XT0iIF8gJHJlYXNvbiBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMTFdPW5laWdoYm9yLCAiICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzExXT0iIF8gJG5laWdoYm9yIF8gIiwgIgogICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxMl09dmxhbiwgIiAgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMTJdPSIgXyAkdmxhbjsKICAgICAgICB9CiAgICAgICAgdmFyICRzbm1wUmVzdWx0ID0gamNzOmludm9rZSAoICRyZXF1ZXN0U25tcFRyYXAgKTsKCiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UgKCAkY29ubmVjdGlvbiApOwogICAgfQp9Cg==";
				<md5> "a10390db96e506e4d234e98dd4ed869c";
			}
			<script> {
				<name> "trap_eoam.slax";
				<type> "event";
				<base64> "";
				<md5> "b218b96ef6977ba73d768308d3904ae1";
			}
			<script> {
				<name> "iceaaa-autoclean-tmp.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIxLjEyCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSBpY2VhYWEtYXV0b2NsZWFuLXRtcCIgKi8KLyogQERFU0NSSVBUSU9OID0gIm9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbCIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp0ZW1wbGF0ZSBqdW5vc2NyaXB0KCkgewogICAgLyogcnVuIHNjcmlwdCBvbiBtYXN0ZXIgUkUgb25seSAuLi4gKi8KICAgIGlmICggJGp1bm9zLWNvbnRleHQvcmUtbWFzdGVyICkgewogICAgICAgIHZhciAkYXV0b2NsZWFuU3RhdHVzID0gPHRydWU+OwogICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgIGNvcHktb2YgJGF1dG9jbGVhblN0YXR1czsKICAgICAgICB9CiAgICB9Cn0K";
				<md5> "7c05cdf8dab2cb1b91795d8c86509193";
			}
			<script> {
				<name> "iceaaa-show-subscriber.slax";
				<type> "op";
				<base64> "";
				<md5> "5654641b9e1fa3153e1ce518bf77b7d2";
			}
			<script> {
				<name> "iceaaa-show-version.slax";
				<type> "op";
				<base64> "";
				<md5> "419dd268a43ce4712d8d3737ccd02243";
			}
			<script> {
				<name> "iceaaa_combo_1.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYV9jb21ib18xLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIxLjEyCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMy4xWDQ5LUQyOSAoaW5jbHVkaW5nIEVTU01EKQogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBkZS0vcHJvdmlzb25pbmcgc2NyaXB0IGZvciBlc3NtIHNlcnZpY2VzCiAqCiAqIFNlcnZpY2VzICAgICAgOiBuZ2NvY28sIGRoY3ByZWxheQogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMS4xMiAtIGljZWFhYV9jb21ib18xLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJkZS0vcHJvdmlzb25pbmcgc2NyaXB0IGZvciBlc3NtIHNlcnZpY2VzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKcGFyYW0gJGlkOwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKCiAgICBtdmFyICRpZFZhbHVlID0gIiI7CiAgICBpZiggJGlkICkgewogICAgICAgIHNldCAkaWRWYWx1ZSA9ICRpZDsKICAgIH0KCiAgICB2YXIgJGZpbGVDb250ZW50ID0gZG9jdW1lbnQoIi9tZnMvdmFyL3RtcC9lc3NtZF9vcHNjcmlwdF9yZXF1ZXN0IiBfICRpZFZhbHVlIF8gIi54bWwiKTsKCiAgICB2YXIgJHN0YXR1c0ZpbGVOYW1lID0gIi9tZnMvdmFyL3RtcC9pY2Vfc3RhdHVzIiBfICRpZFZhbHVlOwoKICAgIGZvci1lYWNoICggJGZpbGVDb250ZW50Ly9vcC1zY3JpcHQgKSB7CgogICAgICAgIHZhciAkb3Atc2NyaXB0LW5hbWUgPSBzY3JpcHQ7CiAgICAgICAgdmFyICRzZXNzaW9uLWlkID0gc2Vzc2lvbi1pZDsKICAgICAgICBtdmFyICRzZXJ2aWNlLWlmbCA9IHNlcnZpY2UtaWZsOwogICAgICAgIHZhciAkQWNjdC1TZXNzaW9uLUlkID0gQWNjdC1TZXNzaW9uLUlkOwogICAgICAgIHZhciAkTkFTLVBvcnQtSWQgPSBOQVMtUG9ydC1JZDsKICAgICAgICB2YXIgJEVSWC1TZXJ2aWNlLUFjdGl2YXRlID0gRVJYLVNlcnZpY2UtQWN0aXZhdGU7CiAgICAgICAgdmFyICRFUlgtU2VydmljZS1EZWFjdGl2YXRlID0gRVJYLVNlcnZpY2UtRGVhY3RpdmF0ZTsKICAgICAgICB2YXIgJEFjY3QtVGVybWluYXRlLUNhdXNlID0gQWNjdC1UZXJtaW5hdGUtQ2F1c2U7CgogICAgICAgIG12YXIgJHBhcmFtZXRlckVycm9yID0gPGluZm8+ICJsaXN0IG9mIHBhcmFtZXRlciBlcnJvcnMiOwogICAgICAgIG12YXIgJGxpbmVJZCA9ICJOQSI7CiAgICAgICAgbXZhciAkYWNpID0gIk5BIjsKICAgICAgICBtdmFyICRzZXJ2aWNlQW5wVGFnID0gIk5BIjsKCiAgICAgICAgLyoKICAgICAgICAgKiBQQVJTRSBOQVMtUG9ydC1JZCAuLi4KICAgICAgICAgKgogICAgICAgICAqIEZPUk1BVDogSE9TVE5BTUUjSUZELlZMQU4tREVNVVgtSUZMOk9VVEVSLVZMQU4tSU5ORVItVkxBTiNBQ0kjQVJJKExpbmUtSUQpCiAgICAgICAgICovCiAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkTkFTLVBvcnQtSWQgKSA+IDUgKSB7CiAgICAgICAgICAgIHZhciAkbmFzUG9ydElkTGlzdCA9IGpjczpzcGxpdCggIiMiLCAkTkFTLVBvcnQtSWQgKTsKICAgICAgICAgICAgbXZhciAkbmFzUG9ydElkVmxhbiA9IHN1YnN0cmluZy1hZnRlciggJG5hc1BvcnRJZExpc3RbMl0sICI6IiApOwogICAgICAgICAgICBzZXQgJG5hc1BvcnRJZFZsYW4gPSBqY3M6c3BsaXQoICItIiwgJG5hc1BvcnRJZFZsYW4gKTsKICAgICAgICAgICAgaWYgKCAkbmFzUG9ydElkVmxhblsyXSApIHsKICAgICAgICAgICAgICAgIHNldCAkc2VydmljZUFucFRhZyA9ICRuYXNQb3J0SWRWbGFuWzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNldCAkYWNpID0gJG5hc1BvcnRJZExpc3RbM107CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCAoICRuYXNQb3J0SWRMaXN0WzRdICkgPiAzICkgewogICAgICAgICAgICAgICAgc2V0ICRsaW5lSWQgPSAkbmFzUG9ydElkTGlzdFs0XTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFwcGVuZCAkcGFyYW1ldGVyRXJyb3IgKz0gPGVycm9yPiAibWlzc2luZy1vci13cm9uZy1wYXJhbWV0ZXItLU5BUy1Qb3J0LUlkIjsKICAgICAgICB9CiAgICAgICAgLyogLi4uIFBBUlNFIE5BUy1Qb3J0LUlkICovCgogICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHNlcnZpY2UtaWZsICkgPCA1ICkgewogICAgICAgICAgICBzZXQgJHNlcnZpY2UtaWZsID0gImRlZmF1bHQtMC8wLzAuMCI7CiAgICAgICAgICAgIGFwcGVuZCAkcGFyYW1ldGVyRXJyb3IgKz0gPGVycm9yPiAibWlzc2luZy1vci13cm9uZy1wYXJhbWV0ZXItLXNlcnZpY2UtaWZsIjsKICAgICAgICB9CiAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkQWNjdC1TZXNzaW9uLUlkICkgPCAxICkgewogICAgICAgICAgICBhcHBlbmQgJHBhcmFtZXRlckVycm9yICs9IDxlcnJvcj4gIm1pc3Npbmctb3Itd3JvbmctcGFyYW1ldGVyLS1BY2N0LVNlc3Npb24tSWQiOwogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICAgKiBzZXQgZGVmYXVsdCBMaW5lLUlEIGlmIEFSSS9MaW5lLUlEIGlzIHNob3J0ZXIgdGhlbiAzIGNoYXJhY3RlcnMgLi4uCiAgICAgICAgICogICAgICAgICAgICEhIXRoaXMgaXMgcmVxdWlyZWQgZm9yIGxhYiB0ZXN0aW5nIG9ubHkhISEKICAgICAgICAgKi8KICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGggKCAkbGluZUlkICkgPCAzICkgewogICAgICAgICAgICB2YXIgJHNlcnZpY2VJZmxQYXJ0cyA9IGpjczpzcGxpdCggIltbLnNwYWNlLl1dIiwgJHNlcnZpY2UtaWZsICk7CiAgICAgICAgICAgIHNldCAkbGluZUlkID0gIkRFRkFVTFQuIiBfICRob3N0bmFtZSBfICIuIiBfICRzZXJ2aWNlSWZsUGFydHNbMV0gXyAiLiIgXyAkc2VydmljZUFucFRhZzsKICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5lcnJvciIsICJMaW5lLUlkOiAiIF8gJGxpbmVJZCBfICIgVkxBTjogTkEgLSB1c2luZyBkZWZhdWx0IExpbmUtSUQgYmVjYXVzZSBvZiBtaXNzaW5nIG9yIHdyb25nIEFSSS9MaW5lLUlEIiApOwogICAgICAgIH0KICAgICAgICAvKiAuLi4gc2V0IGRlZmF1bHQgTGluZS1JRCAqLwoKICAgICAgICAvKiBuZ2NvY28gYWRkIC4uLiAqLwogICAgICAgIGlmICggJG9wLXNjcmlwdC1uYW1lID09ICJpY2VhYWFfbmdjb2NvX2FkZF8xIiApIHsKCiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJEVSWC1TZXJ2aWNlLUFjdGl2YXRlICkgPCAzMCApIHsKICAgICAgICAgICAgICAgIGFwcGVuZCAkcGFyYW1ldGVyRXJyb3IgKz0gPGVycm9yPiAibWlzc2luZy1vci13cm9uZy1wYXJhbWV0ZXItLUVSWC1TZXJ2aWNlLUFjdGl2YXRlIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogUEFSU0UgU0VSVklDRSBERUZJTklUSU9OIC4uLiAqLwoKICAgICAgICAgICAgdmFyICRzZXJ2aWNlRGVmaW5pdGlvbiA9ICRFUlgtU2VydmljZS1BY3RpdmF0ZTsKCiAgICAgICAgICAgIHZhciAkc3Vic3RyaW5nICA9IHN1YnN0cmluZy1hZnRlciggJHNlcnZpY2VEZWZpbml0aW9uLCAiKCIpOwogICAgICAgICAgICB2YXIgJHBhcmFtZXRlclN0cmluZyA9IHN1YnN0cmluZy1iZWZvcmUoICRzdWJzdHJpbmcsICIpIiApOwogICAgICAgICAgICB2YXIgJHBhcmFtZXRlclN0cmluZ0xpc3QgPSBqY3M6c3BsaXQoICI7IiwgJHBhcmFtZXRlclN0cmluZyApOwoKICAgICAgICAgICAgdmFyICRwYXJhbWV0ZXJMaXN0IDo9IHsKICAgICAgICAgICAgICAgIGZvci1lYWNoICggJHBhcmFtZXRlclN0cmluZ0xpc3QpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHZhbHVlID0gamNzOnNwbGl0KCAiPSIsIC4gKTsKICAgICAgICAgICAgICAgICAgICA8cGFyYW1ldGVyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkdmFsdWVbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHZhbHVlWzJdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogLi4uIFBBUlNFIFNFUlZJQ0UgREVGSU5JVElPTiAqLwoKICAgICAgICAgICAgLyogVkFSSUFCTEVTIEFORCBERUZBVUxUUyAuLi4gKi8KCiAgICAgICAgICAgIG12YXIgJG9wdHBybyA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAib3B0cHJvIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRvcHRwcm8gKSA8IDMgKSB7CiAgICAgICAgICAgICAgICBzZXQgJG9wdHBybyA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgICRzZXJ2aWNlVmxhbiA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAidmlkIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRzZXJ2aWNlVmxhbiApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkc2VydmljZVZsYW4gPSAiTkEiOwogICAgICAgICAgICAgICAgYXBwZW5kICRwYXJhbWV0ZXJFcnJvciArPSA8ZXJyb3I+ICJtaXNzaW5nLW9yLXdyb25nLXBhcmFtZXRlci0tdmlkIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBtdmFyICRzZXJ2aWNlQncgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIlNlcnZpY2UtQlciIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHNlcnZpY2VCdyApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkc2VydmljZUJ3ID0gMTAwMDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbXZhciAkb2FtTUEgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIm9hbU1BIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRvYW1NQSApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkb2FtTUEgPSAkbGluZUlkIF8gIl8iIF8gJHNlcnZpY2VWbGFuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJHY0QSA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAidjRBIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICR2NEEgKSA8IDkgKSB7CiAgICAgICAgICAgICAgICBzZXQgJHY0QSA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJHY2QSA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAidjZBIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICR2NkEgKSA8IDYgKSB7CiAgICAgICAgICAgICAgICBzZXQgJHY2QSA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJExvMHY0ID0gamNzOnNwbGl0ICggIiwiLCAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIkxvMHY0IiBdL3ZhbHVlKTsKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkTG8wdjRbMV0gKSA8IDcgKSB7CiAgICAgICAgICAgICAgICBzZXQgJExvMHY0ID0gIiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgJExvMHY0dG1wID0gamNzOnNwbGl0ICggIi8iLCAkTG8wdjRbMV0gKTsKICAgICAgICAgICAgICAgIHNldCAkTG8wdjQgPSAkTG8wdjR0bXBbMV0gXyAiLzMyIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBtdmFyICRMbzB2NiA9IGpjczpzcGxpdCAoICIsIiwgJHBhcmFtZXRlckxpc3QvcGFyYW1ldGVyWyBuYW1lID09ICJMbzB2NiIgXS92YWx1ZSk7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJExvMHY2WzFdICkgPCA2ICkgewogICAgICAgICAgICAgICAgc2V0ICRMbzB2NiA9ICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyICRMbzB2NnRtcCA9IGpjczpzcGxpdCAoICIvIiwgJExvMHY2WzFdICk7CiAgICAgICAgICAgICAgICBzZXQgJExvMHY2ID0gJExvMHY2dG1wWzFdIF8gIi8xMjgiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJFJ0djQgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIlJ0djQiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJFJ0djQgKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBzZXQgJFJ0djQgPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJFJ0djYgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIlJ0djYiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJFJ0djYgKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBzZXQgJFJ0djYgPSAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICBtdmFyICRzZXJ2aWNlRGVzYyA9ICIjTkdDT0NPIyIgXyAkbGluZUlkIF8gIiMiIF8gJHNlcnZpY2VBbnBUYWcgXyAiIyIgXyAkc2VydmljZVZsYW4gXyAiIyIKICAgICAgICAgICAgICAgIF8gJHBhcmFtZXRlckxpc3QvcGFyYW1ldGVyWyBuYW1lID09ICJTRHNjciIgXS92YWx1ZTsKCiAgICAgICAgICAgIC8qIElQdjQgdHJhbnNpdCBhZGRyZXNzIC4uLiAqLwoKICAgICAgICAgICAgbXZhciAkdjRUcmEgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gInY0VHJhIiBdL3ZhbHVlOwogICAgICAgICAgICB2YXIgJHY0VHJhTGlzdCA9IGpjczpzcGxpdCAoICIsIiwgJHY0VHJhICk7CgogICAgICAgICAgICBpZiAoIGpjczplbXB0eSggamNzOnBhcnNlLWlwICggJHY0VHJhTGlzdFsxXSApICkgKSB7CiAgICAgICAgICAgICAgICBzZXQgJHY0VHJhID0gIjEwLjAuMC4wLzMwIjsKICAgICAgICAgICAgICAgIGFwcGVuZCAkcGFyYW1ldGVyRXJyb3IgKz0gPGVycm9yPiAibWlzc2luZy1vci13cm9uZy1pcHY0LXRyYW5zaXQtYWRkcmVzcyI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgJHY0VHJhSXAgPSBqY3M6cGFyc2UtaXAgKCAkdjRUcmFMaXN0WzFdICk7CgogICAgICAgICAgICAgICAgaWYgKCAkdjRUcmFJcFsyXSAhPSAiaW5ldCIgKSB7CiAgICAgICAgICAgICAgICAgICAgYXBwZW5kICRwYXJhbWV0ZXJFcnJvciArPSA8ZXJyb3I+ICJtaXNzaW5nLW9yLXdyb25nLWlwdjQtdHJhbnNpdC1hZGRyZXNzIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggbm90KCAkdjRUcmFMaXN0WzJdICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICR2NFRyYUlwUGFydHMgPSBqY3M6c3BsaXQgKCAiW1sucGVyaW9kLl1dIiwgJHY0VHJhSXBbNF0gKTsKICAgICAgICAgICAgICAgICAgICBzZXQgJHY0VHJhID0gJHY0VHJhSXBQYXJ0c1sxXSBfICIuIiBfICR2NFRyYUlwUGFydHNbMl0gXyAiLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAkdjRUcmFJcFBhcnRzWzNdIF8gIi4iIF8gJHY0VHJhSXBQYXJ0c1s0XSArIDEgXyAiLyIgXyAkdjRUcmFJcFszXSBfICIsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICR2NFRyYUlwUGFydHNbMV0gXyAiLiIgXyAkdjRUcmFJcFBhcnRzWzJdIF8gIi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gJHY0VHJhSXBQYXJ0c1szXSBfICIuIiBfICR2NFRyYUlwUGFydHNbNF0gKyAyIF8gIi8iIF8gJHY0VHJhSXBbM107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIC4uLiBJUHY0IHRyYW5zaXQgYWRkcmVzcyAqLwoKICAgICAgICAgICAgLyogSVB2NiB0cmFuc2l0IGFkZHJlc3MgLi4uICovCgogICAgICAgICAgICBtdmFyICAkdjZUcmEgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gInY2VHJhIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICR2NlRyYSApIDwgNiApIHsKICAgICAgICAgICAgICAgIHNldCAkdjZUcmEgPSAiZmU4MDo6MS82NCI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciAkdjZUcmFMaXN0ID0gamNzOnNwbGl0ICggIiwiLCAkdjZUcmEgKTsKCiAgICAgICAgICAgIGlmICggbm90ICggJHY2VHJhTGlzdFsyXSApICkgewogICAgICAgICAgICAgICAgc2V0ICR2NlRyYSA9ICR2NlRyYUxpc3RbMV0gXyAiLGZlODA6OjIvNjQiOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiAuLi4gSVB2NiB0cmFuc2l0IGFkZHJlc3MgKi8KCiAgICAgICAgICAgIC8qIFFvUyBMb3dMb3NzICovCgogICAgICAgICAgICBtdmFyICRxb3NCd0xMID0gJHBhcmFtZXRlckxpc3QvcGFyYW1ldGVyWyBuYW1lID09ICJCVy1MTCIgXS92YWx1ZTsKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkcW9zQndMTCApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkcW9zQndMTCA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIFFvUyBMb3dEZWxheSAqLwoKICAgICAgICAgICAgbXZhciAkcW9zQndMRCA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiQlctTEQiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHFvc0J3TEQgKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBzZXQgJHFvc0J3TEQgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBRb1MgVm9pY2UgKi8KCiAgICAgICAgICAgIG12YXIgJHFvc0J3Vk8gPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIkJXLVZPIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRxb3NCd1ZPICkgPCAxICkgewogICAgICAgICAgICAgICAgc2V0ICRxb3NCd1ZPID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogUW9TIEJlc3RFZmZvcnQgKi8KCiAgICAgICAgICAgIG12YXIgJHFvc0J3QkUgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIkJXLUJFIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRxb3NCd0JFICkgPCAxICkgewogICAgICAgICAgICAgICAgc2V0ICRxb3NCd0JFID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogb3B0aW9uYWwgRlcgZmlsdGVyIC4uLiAqLwoKICAgICAgICAgICAgbXZhciAkZndWNEluID0gJHBhcmFtZXRlckxpc3QvcGFyYW1ldGVyWyBuYW1lID09ICJGV3Y0aW4iIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJGZ3VjRJbiApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkZndWNEluID0gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbXZhciAkZndWNE91dCA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiRld2NG91dCIgXS92YWx1ZTsKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkZndWNE91dCApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkZndWNE91dCA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJGZ3VjZJbiA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiRld2NmluIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRmd1Y2SW4gKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBzZXQgJGZ3VjZJbiA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJGZ3VjZPdXQgPSAkcGFyYW1ldGVyTGlzdC9wYXJhbWV0ZXJbIG5hbWUgPT0gIkZXdjZvdXQiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJGZ3VjZPdXQgKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBzZXQgJGZ3VjZPdXQgPSAiIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogLi4uIG9wdGlvbmFsIEZXIGZpbHRlciAqLwoKICAgICAgICAgICAgLyogLi4uIFZBUklBQkxFUyBBTkQgREVGQVVMVFMgKi8KCiAgICAgICAgICAgIC8qIGFib3J0IHNjcmlwdCBhbmQgZ2VuZXJhdGUgYWxhcm1zIGlmIGEgcGFyYW1ldGVyIGVycm9yIG9jY291cnMgKi8KICAgICAgICAgICAgaWYgKCAkcGFyYW1ldGVyRXJyb3IvZXJyb3IgKSB7CiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRwYXJhbWV0ZXJFcnJvci9lcnJvciApIHsKICAgICAgICAgICAgICAgICAgICAvKiBTTk1QIFRyYXAgLSBTRVJWSUNFLVBBUkFNRVRFUi1FUlJPUiAqLwogICAgICAgICAgICAgICAgICAgIHZhciAkcmVxdWVzdFNubXBUcmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFwPiAiam54RXZlbnRUcmFwIjsKICAgICAgICAgICAgICAgICAgICAgICAgPHZhcmlhYmxlLWJpbmRpbmdzPiAiam54RXZlbnRUcmFwRGVzY3JbMF09RXZlbnQtVHJhcCwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMV09U0VSVklDRS1QQVJBTUVURVItRVJST1IsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMl09TGluZS1JZCwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzJdPSIgXyAkbGluZUlkIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVszXT1BTlAtVGFnLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICRzZXJ2aWNlQW5wVGFnIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs0XT1TZXJ2aWNlLVRhZywgIiAgICBfICJqbnhFdmVudEF2VmFsdWVbNF09IiBfICRzZXJ2aWNlVmxhbiBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNV09aWZEZXNjLCAiICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzVdPSIgXyAkc2VydmljZS1pZmwgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzZdPVNlcnZpY2UtTmFtZSwgIiAgIF8gImpueEV2ZW50QXZWYWx1ZVs2XT1uZ2NvY28sICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbN109bWVzc2FnZSwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzddPSIgXyAuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBSZXN1bHQgPSBqY3M6aW52b2tlKCAkcmVxdWVzdFNubXBUcmFwICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJG1lc3NhZ2UgPSAiTGluZS1JZDogIiBfICRsaW5lSWQgXyAiIFZMQU46ICIgXyAkc2VydmljZVZsYW4gXyIgLSBtaXNzaW5nIG9yIHdyb25nIHBhcmFtZXRlcnMsIGFib3J0aW5nIHNjcmlwdCBub3ciOwogICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nKCAidXNlci5lcnJvciIsICRtZXNzYWdlICk7CgogICAgICAgICAgICAgICAgdmFyICRzdGF0dXNMaW5lID0gJHNlc3Npb24taWQgXyAiIDAgXCJtaXNzaW5nIG9yIHdyb25nIHBhcmFtZXRlcnNcIiI7CgogICAgICAgICAgICAgICAgPHhzbDpkb2N1bWVudCBtZXRob2Q9InRleHQiIGhyZWY9JHN0YXR1c0ZpbGVOYW1lIGFwcGVuZD0ieWVzIj4gewogICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJHN0YXR1c0xpbmU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgLyogU0VSVklDRSBDT05GSUdVUkFUSU9OIC4uLiAqLwoKICAgICAgICAgICAgICAgIHZhciAkY29uZmlndXJhdGlvbkNoYW5nZSA9IDxncm91cHM+IHsKICAgICAgICAgICAgICAgICAgICA8bmFtZT4gImljZWFhYS1keW5hbWljIjsKICAgICAgICAgICAgICAgICAgICA8YXBwbHktbWFjcm8+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICIjSUNFQUFBIyIgXyAkbGluZUlkIF8gIiMiIF8gJHNlcnZpY2VWbGFuOwogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBQ0kiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkYWNpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlNlcnZpY2UtSWZsIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHNlcnZpY2UtaWZsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkFjY3QtU2Vzc2lvbi1JZCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRBY2N0LVNlc3Npb24tSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiTkFTLVBvcnQtSWQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkTkFTLVBvcnQtSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiU2VydmljZS1TdHJpbmciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkRVJYLVNlcnZpY2UtQWN0aXZhdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiVGltZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRsb2NhbHRpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQU5QLVRhZyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRzZXJ2aWNlQW5wVGFnOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlNEc2NyIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHNlcnZpY2VEZXNjOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkxvMHY0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJExvMHY0OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkxvMHY2IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJExvMHY2OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gInY0QSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICR2NEE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAidjZBIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHY2QTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJSdHY0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJFJ0djQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiUnR2NiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRSdHY2OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gInY0VHJhIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHY0VHJhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gInY2VHJhIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHY2VHJhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIm9hbU1BIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJG9hbU1BOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlNlcnZpY2UtQlciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkc2VydmljZUJ3OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkJXLUxMIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHFvc0J3TEw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQlctTEQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkcW9zQndMRDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJCVy1WTyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRxb3NCd1ZPOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkJXLUJFIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHFvc0J3QkU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAib3B0cHJvIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJG9wdHBybzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBY3RpdmF0ZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICJUUlVFIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qIC4uLiBTRVJWSUNFIENPTkZJR1VSQVRJT04gKi8KCiAgICAgICAgICAgICAgICB2YXIgJHN0YXR1c0xpbmUgPSAkc2Vzc2lvbi1pZCBfICIgMSAiOwoKICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ0ZXh0IiBocmVmPSRzdGF0dXNGaWxlTmFtZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzdGF0dXNMaW5lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLyogUFIgOTY2NzY0IC4uLiAqLwogICAgICAgICAgICAgICAgdmFyICRwYWRkaW5nID0gPGdyb3Vwcz4gewogICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiaWNlYWFhLWR5bmFtaWMiOwogICAgICAgICAgICAgICAgfSAvKiAuLi4gIFBSIDk2Njc2NCAqLwogICAgICAgICAgICAgICAgPHhzbDpkb2N1bWVudCBtZXRob2Q9InhtbCIgaHJlZj0kc3RhdHVzRmlsZU5hbWUgYXBwZW5kPSJ5ZXMiPiB7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkY29uZmlndXJhdGlvbkNoYW5nZTsKICAgICAgICAgICAgICAgICAgICAvKiBQUiA5NjY3NjQgLi4uICovCiAgICAgICAgICAgICAgICAgICAgdmFyICRtYWNyb0xlbmd0aCA9IHN0cmluZy1sZW5ndGgoICRjb25maWd1cmF0aW9uQ2hhbmdlKSArIDEwNDg7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkbWFjcm9MZW5ndGggPiAyMDQwICYmICRtYWNyb0xlbmd0aCA8IDIwNDggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJHBhZGRpbmc7CiAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gIFBSIDk2Njc2NCAqLwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXhwciBqY3M6dHJhY2UoICJTY3JpcHQ6ICIgXyAkc2NyaXB0IF8gIiBMaW5lLUlkOiAiIF8gJGxpbmVJZCBfICIgVkxBTjogIiBfICRzZXJ2aWNlVmxhbiBfICIgLSBuZ2NvY28gY29uZmlndXJhdGlvbiBhZGRlZCBzdWNjZXNzZnVsIiApOwogICAgICAgICAgICB9CiAgICAgICAgLyogZGhjcHJlbGF5IGFkZCAuLi4gKi8KICAgICAgICB9IGVsc2UgaWYgKCAkb3Atc2NyaXB0LW5hbWUgPT0gImljZWFhYV9kaGNwcmVsYXlfYWRkXzEiICkgewoKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkRVJYLVNlcnZpY2UtQWN0aXZhdGUgKSA8IDE2ICkgewogICAgICAgICAgICAgICAgYXBwZW5kICRwYXJhbWV0ZXJFcnJvciArPSA8ZXJyb3I+ICJtaXNzaW5nLW9yLXdyb25nLXBhcmFtZXRlci0tRVJYLVNlcnZpY2UtQWN0aXZhdGUiOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBQQVJTRSBTRVJWSUNFIERFRklOSVRJT04gLi4uICovCgogICAgICAgICAgICB2YXIgJHNlcnZpY2VEZWZpbml0aW9uID0gJEVSWC1TZXJ2aWNlLUFjdGl2YXRlOwoKICAgICAgICAgICAgdmFyICRzdWJzdHJpbmcgID0gc3Vic3RyaW5nLWFmdGVyKCAkc2VydmljZURlZmluaXRpb24sICIoIik7CiAgICAgICAgICAgIHZhciAkcGFyYW1ldGVyU3RyaW5nID0gc3Vic3RyaW5nLWJlZm9yZSggJHN1YnN0cmluZywgIikiICk7CiAgICAgICAgICAgIHZhciAkcGFyYW1ldGVyU3RyaW5nTGlzdCA9IGpjczpzcGxpdCggIjsiLCAkcGFyYW1ldGVyU3RyaW5nICk7CgogICAgICAgICAgICB2YXIgJHBhcmFtZXRlckxpc3QgOj0gewogICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkcGFyYW1ldGVyU3RyaW5nTGlzdCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkdmFsdWUgPSBqY3M6c3BsaXQoICI9IiwgLiApOwogICAgICAgICAgICAgICAgICAgIDxwYXJhbWV0ZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICR2YWx1ZVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkdmFsdWVbMl07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiAuLi4gUEFSU0UgU0VSVklDRSBERUZJTklUSU9OICovCgogICAgICAgICAgICAvKiBWQVJJQUJMRVMgQU5EIERFRkFVTFRTIC4uLiAqLwoKICAgICAgICAgICAgbXZhciAgJHNlcnZpY2VWbGFuID0gJHBhcmFtZXRlckxpc3QvcGFyYW1ldGVyWyBuYW1lID09ICJ2aWQiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHNlcnZpY2VWbGFuICkgPCAxICkgewogICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlVmxhbiA9ICJOQSI7CiAgICAgICAgICAgICAgICBhcHBlbmQgJHBhcmFtZXRlckVycm9yICs9IDxlcnJvcj4gIm1pc3Npbmctb3Itd3JvbmctcGFyYW1ldGVyLS12aWQiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJHNlcnZpY2VCdyA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiU2VydmljZS1CVyIgXS92YWx1ZTsKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkc2VydmljZUJ3ICkgPCAxICkgewogICAgICAgICAgICAJaWYgKCAkc2VydmljZUFucFRhZyA9PSAiTkEiICkgewogICAgICAgICAgICAgICAgICAgIHNldCAkc2VydmljZUJ3ID0gMjAwMDA7CiAgICAgICAgICAgIAl9IGVsc2UgewogICAgICAgICAgICAJCXNldCAkc2VydmljZUJ3ID0gMjAwMDsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgfQogICAgICAgICAgICBtdmFyICRhY2Nlc3NJZCA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiYWNjZXNzLWlkIiBdL3ZhbHVlOwogICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRhY2Nlc3NJZCApIDwgMSApIHsKICAgICAgICAgICAgICAgIHNldCAkYWNjZXNzSWQgPSAiIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbXZhciAkZGhjcFNlcnZlciA9ICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiU2VydmVyIiBdL3ZhbHVlOwogICAgICAgICAgICBtdmFyICRkaGNwU2VydmVySW5mbzsKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkZGhjcFNlcnZlciApIDwgNiApIHsKICAgICAgICAgICAgICAgIHNldCAkZGhjcFNlcnZlciA9ICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCBjb250YWlucyggJGRoY3BTZXJ2ZXIsICIvIiApICkgewogICAgICAgICAgICAgICAgICAgIGFwcGVuZCAkcGFyYW1ldGVyRXJyb3IgKz0gPGVycm9yPiAid3JvbmctZGhjcC1zZXJ2ZXItYWRkcmVzcyI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciAkZGhjcFNlcnZlckxpc3QgPSBqY3M6c3BsaXQgKCAiLCIsICRkaGNwU2VydmVyICk7CiAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkZGhjcFNlcnZlckxpc3QgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkZGhjcFNlcnZlckluZm8gPSBqY3M6cGFyc2UtaXAoIC4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkZGhjcFNlcnZlckluZm9bMl0gIT0gImluZXQiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kICRwYXJhbWV0ZXJFcnJvciArPSA8ZXJyb3I+ICJ3cm9uZy1kaGNwLXNlcnZlci1hZGRyZXNzIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgbXZhciAkc2VydmljZURlc2MgPSAiI0RIQ1BSRUxBWSMiIF8gJGxpbmVJZCBfICIjIiBfICRzZXJ2aWNlQW5wVGFnIF8gIiMiIF8gJHNlcnZpY2VWbGFuIF8gIiMiCiAgICAgICAgICAgICAgICBfICRwYXJhbWV0ZXJMaXN0L3BhcmFtZXRlclsgbmFtZSA9PSAiU0RzY3IiIF0vdmFsdWU7CgogICAgICAgICAgICAvKiAuLi4gVkFSSUFCTEVTIEFORCBERUZBVUxUUyAqLwoKICAgICAgICAgICAgLyogYWJvcnQgc2NyaXB0IGFuZCBnZW5lcmF0ZSBhbGFybXMgaWYgYSBwYXJhbWV0ZXIgZXJyb3Igb2Njb3VycyAqLwogICAgICAgICAgICBpZiAoICRwYXJhbWV0ZXJFcnJvci9lcnJvciApIHsKICAgICAgICAgICAgICAgIGZvci1lYWNoICggJHBhcmFtZXRlckVycm9yL2Vycm9yICkgewogICAgICAgICAgICAgICAgICAgIC8qIFNOTVAgVHJhcCAtIFNFUlZJQ0UtUEFSQU1FVEVSLUVSUk9SICovCiAgICAgICAgICAgICAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT1TRVJWSUNFLVBBUkFNRVRFUi1FUlJPUiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsyXT1MaW5lLUlkLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRsaW5lSWQgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPUFOUC1UYWcsICIgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHNlcnZpY2VBbnBUYWcgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzRdPVNlcnZpY2UtVGFnLCAiICAgIF8gImpueEV2ZW50QXZWYWx1ZVs0XT0iIF8gJHNlcnZpY2VWbGFuIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs1XT1pZkRlc2MsICIgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbNV09IiBfICRzZXJ2aWNlLWlmbCBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNl09U2VydmljZS1OYW1lLCAiICAgXyAiam54RXZlbnRBdlZhbHVlWzZdPWRoY3ByZWxheSwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs3XT1tZXNzYWdlLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbN109IiBfIC47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkc25tcFJlc3VsdCA9IGpjczppbnZva2UoICRyZXF1ZXN0U25tcFRyYXAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZSA9ICJMaW5lLUlkOiAiIF8gJGxpbmVJZCBfICIgVkxBTjogIiBfICRzZXJ2aWNlVmxhbiBfIiAtIG1pc3Npbmcgb3Igd3JvbmcgcGFyYW1ldGVycywgYWJvcnRpbmcgc2NyaXB0IG5vdyI7CiAgICAgICAgICAgICAgICBleHByIGpjczpzeXNsb2coICJ1c2VyLmVycm9yIiwgJG1lc3NhZ2UgKTsKCiAgICAgICAgICAgICAgICB2YXIgJHN0YXR1c0xpbmUgPSAkc2Vzc2lvbi1pZCBfICIgMCBcIm1pc3Npbmcgb3Igd3JvbmcgcGFyYW1ldGVyc1wiIjsKCiAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0idGV4dCIgaHJlZj0kc3RhdHVzRmlsZU5hbWUgYXBwZW5kPSJ5ZXMiPiB7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkc3RhdHVzTGluZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAvKiBTRVJWSUNFIENPTkZJR1VSQVRJT04gLi4uICovCgogICAgICAgICAgICAgICAgdmFyICRjb25maWd1cmF0aW9uQ2hhbmdlID0gPGdyb3Vwcz4gewogICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiaWNlYWFhLWR5bmFtaWMiOwogICAgICAgICAgICAgICAgICAgIDxhcHBseS1tYWNybz4gewogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIiNJQ0VBQUEjIiBfICRsaW5lSWQgXyAiIyIgXyAkc2VydmljZVZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkFDSSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRhY2k7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiU2VydmljZS1JZmwiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkc2VydmljZS1pZmw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQWNjdC1TZXNzaW9uLUlkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJEFjY3QtU2Vzc2lvbi1JZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJOQVMtUG9ydC1JZCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICROQVMtUG9ydC1JZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJTZXJ2aWNlLVN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRFUlgtU2VydmljZS1BY3RpdmF0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJUaW1lIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJGxvY2FsdGltZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBTlAtVGFnIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJHNlcnZpY2VBbnBUYWc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiU0RzY3IiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkc2VydmljZURlc2M7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiU2VydmljZS1CVyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiU2VydmVyIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJGRoY3BTZXJ2ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiYWNjZXNzLWlkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gJGFjY2Vzc0lkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkFjdGl2YXRlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gIlRSVUUiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8qIC4uLiBTRVJWSUNFIENPTkZJR1VSQVRJT04gKi8KCiAgICAgICAgICAgICAgICB2YXIgJHN0YXR1c0xpbmUgPSAkc2Vzc2lvbi1pZCBfICIgMSAiOwoKICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ0ZXh0IiBocmVmPSRzdGF0dXNGaWxlTmFtZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzdGF0dXNMaW5lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLyogUFIgOTY2NzY0IC4uLiAqLwogICAgICAgICAgICAgICAgdmFyICRwYWRkaW5nID0gPGdyb3Vwcz4gewogICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiaWNlYWFhLWR5bmFtaWMiOwogICAgICAgICAgICAgICAgfSAvKiAuLi4gIFBSIDk2Njc2NCAqLwogICAgICAgICAgICAgICAgPHhzbDpkb2N1bWVudCBtZXRob2Q9InhtbCIgaHJlZj0kc3RhdHVzRmlsZU5hbWUgYXBwZW5kPSJ5ZXMiPiB7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkY29uZmlndXJhdGlvbkNoYW5nZTsKICAgICAgICAgICAgICAgICAgICAvKiBQUiA5NjY3NjQgLi4uICovCiAgICAgICAgICAgICAgICAgICAgdmFyICRtYWNyb0xlbmd0aCA9IHN0cmluZy1sZW5ndGgoICRjb25maWd1cmF0aW9uQ2hhbmdlKSArIDU1NjsKICAgICAgICAgICAgICAgICAgICBpZiAoICRtYWNyb0xlbmd0aCA+IDEwMjAgJiYgJG1hY3JvTGVuZ3RoIDwgMTAyNCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkcGFkZGluZzsKICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiAgUFIgOTY2NzY0ICovCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBleHByIGpjczp0cmFjZSggIlNjcmlwdDogIiBfICRzY3JpcHQgXyAiIExpbmUtSWQ6ICIgXyAkbGluZUlkIF8gIiBWTEFOOiAiIF8gJHNlcnZpY2VWbGFuIF8gIiAtIGRoY3ByZWxheSBjb25maWd1cmF0aW9uIGFkZGVkIHN1Y2Nlc3NmdWwiICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgLyogZGVsZXRlIC4uLiAqLwogICAgICAgIH0gZWxzZSBpZiAoICRvcC1zY3JpcHQtbmFtZSA9PSAiaWNlYWFhX2RlbF8xIiApIHsKCiAgICAgICAgICAgIC8qIFBBUlNFIFNFUlZJQ0UgREVGSU5JVElPTiAuLi4gKi8KCiAgICAgICAgICAgIHZhciAkc2VydmljZURlZmluaXRpb24gOj0gewogICAgICAgICAgICAgICAgaWYgKCAkRVJYLVNlcnZpY2UtQWN0aXZhdGUgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkRVJYLVNlcnZpY2UtQWN0aXZhdGUgKSA8IDE0ICkgewogICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQgJHBhcmFtZXRlckVycm9yICs9IDxlcnJvcj4gIm1pc3Npbmctb3Itd3JvbmctcGFyYW1ldGVyLS1FUlgtU2VydmljZS1BY3RpdmF0ZSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJEVSWC1TZXJ2aWNlLUFjdGl2YXRlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRFUlgtU2VydmljZS1EZWFjdGl2YXRlICkgPCAxNCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kICRwYXJhbWV0ZXJFcnJvciArPSA8ZXJyb3I+ICJtaXNzaW5nLW9yLXdyb25nLXBhcmFtZXRlci0tRVJYLVNlcnZpY2UtRGVhY3RpdmF0ZSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvcHktb2YgJEVSWC1TZXJ2aWNlLURlYWN0aXZhdGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIC4uLiBQQVJTRSBTRVJWSUNFIERFRklOSVRJT04gKi8KCiAgICAgICAgICAgIC8qIFZBUklBQkxFUyBBTkQgREVGQVVMVFMgLi4uICovCgogICAgICAgICAgICB2YXIgJHZpZFBhcnQxID0gc3Vic3RyaW5nLWFmdGVyKCAkc2VydmljZURlZmluaXRpb24sICJ2aWQ9IiApOwogICAgICAgICAgICB2YXIgJHZpZFBhcnQyID0gc3Vic3RyaW5nLWJlZm9yZSggJHZpZFBhcnQxLCAiKSIgKTsKICAgICAgICAgICAgdmFyICR2aWRMaXN0ID0gamNzOnNwbGl0KCAiOyIsICR2aWRQYXJ0MiApOwoKICAgICAgICAgICAgdmFyICRzZXJ2aWNlVmxhbiA9ICR2aWRMaXN0WzFdOwoKICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkc2VydmljZVZsYW4gKSA8IDEgKSB7CiAgICAgICAgICAgICAgICBhcHBlbmQgJHBhcmFtZXRlckVycm9yICs9IDxlcnJvcj4gIm1pc3Npbmctb3Itd3JvbmctcGFyYW1ldGVyLS12aWQiOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiAuLi4gVkFSSUFCTEVTIEFORCBERUZBVUxUUyAqLwoKICAgICAgICAgICAgLyogYWJvcnQgc2NyaXB0IGFuZCBnZW5lcmF0ZSBhbGFybXMgaWYgYSBwYXJhbWV0ZXIgZXJyb3Igb2Njb3VycyAqLwogICAgICAgICAgICBpZiAoICRwYXJhbWV0ZXJFcnJvci9lcnJvciApIHsKICAgICAgICAgICAgICAgIGZvci1lYWNoICggJHBhcmFtZXRlckVycm9yL2Vycm9yICkgewogICAgICAgICAgICAgICAgICAgIC8qIFNOTVAgVHJhcCAtIFNFUlZJQ0UtUEFSQU1FVEVSLUVSUk9SICovCiAgICAgICAgICAgICAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT1TRVJWSUNFLVBBUkFNRVRFUi1FUlJPUiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsyXT1MaW5lLUlkLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRsaW5lSWQgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPUFOUC1UYWcsICIgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVszXT0iIF8gJHNlcnZpY2VBbnBUYWcgXyAiLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzRdPVNlcnZpY2UtVGFnLCAiICAgIF8gImpueEV2ZW50QXZWYWx1ZVs0XT0iIF8gJHNlcnZpY2VWbGFuIF8gIiwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs1XT1pZkRlc2MsICIgICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbNV09IiBfICRzZXJ2aWNlLWlmbCBfICIsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNl09U2VydmljZS1OYW1lLCAiICAgXyAiam54RXZlbnRBdlZhbHVlWzZdPU5BLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzddPW1lc3NhZ2UsICIgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVs3XT0iIF8gLjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICRzbm1wUmVzdWx0ID0gamNzOmludm9rZSggJHJlcXVlc3RTbm1wVHJhcCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyICRtZXNzYWdlID0gIkxpbmUtSWQ6ICIgXyAkbGluZUlkIF8gIiBWTEFOOiAiIF8gJHNlcnZpY2VWbGFuIF8iIC0gbWlzc2luZyBvciB3cm9uZyBwYXJhbWV0ZXJzLCBhYm9ydGluZyBzY3JpcHQgbm93IjsKICAgICAgICAgICAgICAgIGV4cHIgamNzOnN5c2xvZyggInVzZXIuZXJyb3IiLCAkbWVzc2FnZSApOwoKICAgICAgICAgICAgICAgIHZhciAkc3RhdHVzTGluZSA9ICRzZXNzaW9uLWlkIF8gIiAwIFwibWlzc2luZyBvciB3cm9uZyBwYXJhbWV0ZXJzXCIiOwoKICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ0ZXh0IiBocmVmPSRzdGF0dXNGaWxlTmFtZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzdGF0dXNMaW5lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgIC8qIFNFUlZJQ0UgQ09ORklHVVJBVElPTiAuLi4gKi8KCiAgICAgICAgICAgICAgICB2YXIgJGNvbmZpZ3VyYXRpb25DaGFuZ2UgPSA8Z3JvdXBzPiB7CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJpY2VhYWEtZHluYW1pYyI7CiAgICAgICAgICAgICAgICAgICAgPGFwcGx5LW1hY3JvPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiI0lDRUFBQSMiIF8gJGxpbmVJZCBfICIjIiBfICRzZXJ2aWNlVmxhbjsKICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiRGVhY3RpdmF0ZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICRBY2N0LVNlc3Npb24tSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoICRBY2N0LVRlcm1pbmF0ZS1DYXVzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBY2N0LVRlcm1pbmF0ZS1DYXVzZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkQWNjdC1UZXJtaW5hdGUtQ2F1c2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvKiAuLi4gU0VSVklDRSBDT05GSUdVUkFUSU9OICovCgogICAgICAgICAgICAgICAgdmFyICRzdGF0dXNMaW5lID0gJHNlc3Npb24taWQgXyAiIDEgIjsKCiAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0idGV4dCIgaHJlZj0kc3RhdHVzRmlsZU5hbWUgYXBwZW5kPSJ5ZXMiPiB7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkc3RhdHVzTGluZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRzdGF0dXNGaWxlTmFtZSBhcHBlbmQ9InllcyI+IHsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRjb25maWd1cmF0aW9uQ2hhbmdlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGV4cHIgamNzOnRyYWNlKCAiU2NyaXB0OiAiIF8gJHNjcmlwdCBfICIgTGluZS1JZDogIiBfICRsaW5lSWQgXyAiIFZMQU46ICIgXyAkc2VydmljZVZsYW4gXyAiIC0gc2VydmljZSBjb25maWd1cmF0aW9uIHJlbW92ZWQgc3VjY2Vzc2Z1bCIgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=";
				<md5> "48734a0e9bc6af77bc2a05846b019237";
			}
			<script> {
				<name> "iceaaa_del_1.slax";
				<type> "op";
				<base64> "";
				<md5> "b7d43d507ee39d2911d8fdc94a828be1";
			}
			<script> {
				<name> "iceaaa_dhcprelay_add_1.slax";
				<type> "op";
				<base64> "";
				<md5> "be62de66d2dee223a2c0c2df1522eefc";
			}
			<script> {
				<name> "iceaaa_ngcoco_add_1.slax";
				<type> "op";
				<base64> "";
				<md5> "739969ae9d7c7ea373df0876ba22cdb9";
			}
			<script> {
				<name> "Interface-Activation.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgKICogQXV0aG9yICAgICAgICA6IEFuZHJldyBTaGFycCBhc2hhcnBAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIxLjEyCiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPIC8gSnVub3MgU3BhY2UKICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrIC8gMTMuMVAyCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2OiAzODQ0MSAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjI4OjEyICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBFbmFibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpLgogKgogKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKbnMganNwYWNlID0gImh0dHA6Ly9qc3BhY2UtdXRpbHMvYXNoYXJwQGp1bmlwZXIubmV0IjsKCm5zIGZ1bmMgZXh0ZW5zaW9uID0gImh0dHA6Ly9leHNsdC5vcmcvZnVuY3Rpb25zIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKLyogKioqKioqKioqKioqKioqKiogKi8KLyogU2NyaXB0IEFubm90YXRpb24gKi8KLyogKioqKioqKioqKioqKioqKiogKi8KCi8qIEBDT05URVhUID0gIi9kZXZpY2UvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZVtub3Qoc3RhcnRzLXdpdGgobmFtZSwiZnhwMCIpKV0iICovCi8qIEBOQU1FID0gIlIxLjEyIC0gSW50ZXJmYWNlLUFjdGl2YXRpb24iICovCi8qIEBERVNDUklQVElPTiA9ICJFbmFibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpIiAqLwovKiBARVhFQ1VUSU9OVFlQRSA9ICJHUk9VUEVERVhFQ1VUSU9OIiAqLwoKLyogKioqKioqKiAqLwovKiBHbG9iYWxzICovCi8qICoqKioqKiogKi8KdmFyICRzY3JpcHRuYW1lID0gIkludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgiOwp2YXIgJHJlc3VsdHM7CnZhciAkaW50ZXJmYWNlczsKdmFyICRpbnRlcmZhY2UtcmVnZXg7CnZhciAkZGV2aWNlbmFtZTsKdmFyICRwaHlzaW50bmFtZTsKCnZhciAkYXJndW1lbnRzID0gewogICAgPGFyZ3VtZW50PiB7CiAgICAgICAgPG5hbWU+ICJDT05URVhUIjsKICAgICAgICA8ZGVzY3JpcHRpb24+ICJUaGUgY29udGV4dCBhc3NvY2lhdGVkIHdpdGggdGhpcyBzY3JpcHQuIjsKICAgIH0KfQpwYXJhbSAkQ09OVEVYVDsKCm1hdGNoIC8gewogICAgPG9wLXNjcmlwdC1yZXN1bHRzPiB7CgogICAgICAgIHZhciAkaW50ZXJmYWNlcyA9IGpjczpzcGxpdCgiXFx8IiwgJENPTlRFWFQpOwoKICAgICAgICAvKiBDcmVhdGUgY29uZmlndXJhdGlvbiBmb3IgZWFjaCBzZWxlY3RlZCBpbnRlcmZhY2UsICAqLwogICAgICAgIC8qIHRoZSBmaXJzdCBpbnRlcmZhY2UgaXMgYXQgcG9zaXRpb25bMl0gaW4gdGhlIGFycmF5ICovCiAgICAgICAgdmFyICRjb25maWd1cmF0aW9uLWNoYW5nZSA9IDxjb25maWd1cmF0aW9uPiB7CiAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW50ZXJmYWNlLXJlZ2V4ID0gamNzOnJlZ2V4KCAiL2RldmljZShcXFsuKlxcXSkvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZShcXFsuKlxcXSkiLCAoLikgKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJGRldmljZW5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJHBoeXNpbnRuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkcGh5c2ludG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIDxlbmFibGU+OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogQSBjb25uZWN0aW9uIG11c3QgYmUgb3BlbmVkICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKICAgICAgICAvKiBhYm9ydCBpZiBubyBjb25uZWN0aW9uIHRvIGxvY2FsIG1nZCAqLwogICAgICAgIGlmICgkY29ubmVjdGlvbi8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjb25uZWN0aW9uLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gYW5kIGNoYW5nZSBhcmUgc2V0IGFzIHBhcmFtZXRlcnMgdG8gdGhlIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24gdGVtcGxhdGUKICAgICAgICAgKiB3aGljaCBwZXJmb3JtcyB0aGUgY2hhbmdlLiAgVGhlIDo9IG9wZXJhdG9yIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlICRyZXN1bHRzIHZhcmlhYmxlCiAgICAgICAgICogaXMgYSBub2RlLXNldCByYXRoZXIgdGhhbiBhIHJlc3VsdCB0cmVlIGZyYWdtZW50LgogICAgICAgICAqLwogICAgICAgIHZhciAkcmVzdWx0cyA6PSB7IGNhbGwgamNzOmxvYWQtY29uZmlndXJhdGlvbiggJGNvbm5lY3Rpb24sICRjb25maWd1cmF0aW9uID0gJGNvbmZpZ3VyYXRpb24tY2hhbmdlICk7IH0KCiAgICAgICAgLyogQ2hlY2sgZm9yIGVycm9ycyAtIHJlcG9ydCB0aGVtIGlmIHRoZXkgb2NjdXJyZWQuICovCiAgICAgICAgaWYgKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkcmVzdWx0cywgJG1lc3NhZ2UgPSAiRXJyb3IgYXBwbHlpbmcgY29uZmlndXJhdGlvbi4iKTsKICAgICAgICAgICAgZm9yLWVhY2ggKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgICAgIDxIVE1MPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZW5hYmxlZCByZXN1bHRzOiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIyIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkFuIGVycm9yIGhhcyBiZWVuIGVuY291bnRlcmVkOiAiIF8gbWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgICAgIDxIVE1MPiB7CiAgICAgICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGVuYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIxIik7CiAgICAgICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlKHMpIGhhdmUgbm93IGJlZW4gZW5hYmxlZC4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGludC1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZGV2bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwaW50bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICRwaW50bm0gXyAiIDsgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHJlc3VsdHMvY29tbWl0LXJlc3VsdHMvcm91dGluZy1lbmdpbmUvY29tbWl0LXN1Y2Nlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkNvbW1pdCBzdWNjZXNzLiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRyZXN1bHRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5pbmZvIiwgIlNDUklQVF9BQ1RJT05fSUZfRU5BQkxFOiBTY3JpcHQgYWN0aW9uIHRha2VuIHRvIGVuYWJsZSBwaHlzaWNhbCBpbnRlcmZhY2UuIik7CiAgICAgICAgdmFyICRjbG9zZS1yZXN1bHRzID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgICAgIGlmICgkY2xvc2UtcmVzdWx0cy8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjbG9zZS1yZXN1bHRzLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjbG9zaW5nIGNvbm5lY3Rpb24uIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CiAgICB9Cn0KCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7CiAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgZm9yLWVhY2ggKCRycGMvL3hubTplcnJvcikgewogICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKICB9Cn0K";
				<md5> "211577d0634270250ccbfa8b66d7dc55";
			}
			<script> {
				<name> "Interface-Deactivation.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjEuMTIKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8gLyBKdW5vcyBTcGFjZQogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisgLyAxMy4xUDIKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM4NDQxICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6Mjg6MTIgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IERpc2FibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpLgogKgogKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKbnMganNwYWNlID0gImh0dHA6Ly9qc3BhY2UtdXRpbHMvYXNoYXJwQGp1bmlwZXIubmV0IjsKCm5zIGZ1bmMgZXh0ZW5zaW9uID0gImh0dHA6Ly9leHNsdC5vcmcvZnVuY3Rpb25zIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKLyogKioqKioqKioqKioqKioqKiogKi8KLyogU2NyaXB0IEFubm90YXRpb24gKi8KLyogKioqKioqKioqKioqKioqKiogKi8KCi8qIEBDT05URVhUID0gIi9kZXZpY2UvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZVtub3Qoc3RhcnRzLXdpdGgobmFtZSwiZnhwMCIpKV0iICovCi8qIEBOQU1FID0gIlIxLjEyIC0gSW50ZXJmYWNlLURlYWN0aXZhdGlvbiIgKi8KLyogQERFU0NSSVBUSU9OID0gIkRpc2FibGUgc2VsZWN0ZWQgaW50ZXJmYWNlKHMpIiAqLwovKiBARVhFQ1VUSU9OVFlQRSA9ICJHUk9VUEVERVhFQ1VUSU9OIiAqLwovKiBAQ09ORklSTUFUSU9OID0gIkFyZSB5b3Ugc3VyZSB0aGF0IHlvdSB3YW50IHRvIGRpc2FibGUgdGhlIHNlbGVjdGVkIGludGVyZmFjZShzKT8iICovCgovKiAqKioqKioqICovCi8qIEdsb2JhbHMgKi8KLyogKioqKioqKiAqLwp2YXIgJHNjcmlwdG5hbWUgPSAiSW50ZXJmYWNlLURlYWN0aXZhdGlvbi5zbGF4IjsKdmFyICRyZXN1bHRzOwp2YXIgJGludGVyZmFjZXM7CnZhciAkaW50ZXJmYWNlLXJlZ2V4Owp2YXIgJGRldmljZW5hbWU7CnZhciAkcGh5c2ludG5hbWU7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiQ09OVEVYVCI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiVGhlIGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NyaXB0LiI7CiAgICB9Cn0KcGFyYW0gJENPTlRFWFQ7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICB2YXIgJGludGVyZmFjZXMgPSBqY3M6c3BsaXQoIlxcfCIsICRDT05URVhUKTsKCiAgICAgICAgLyogQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggc2VsZWN0ZWQgaW50ZXJmYWNlLCAgKi8KICAgICAgICAvKiB0aGUgZmlyc3QgaW50ZXJmYWNlIGlzIGF0IHBvc2l0aW9uWzJdIGluIHRoZSBhcnJheSAqLwogICAgICAgIHZhciAkY29uZmlndXJhdGlvbi1jaGFuZ2UgPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgIGZvci1lYWNoICggJGludGVyZmFjZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnRlcmZhY2UtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgIHZhciAkZGV2aWNlbmFtZSA9IHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKCRpbnRlcmZhY2UtcmVnZXhbMl0sIltuYW1lPVwiIiwiIiksIlwiXSIsIiIpOwogICAgICAgICAgICAgICAgICAgIHZhciAkcGh5c2ludG5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRwaHlzaW50bmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgPGRpc2FibGU+OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBBIGNvbm5lY3Rpb24gbXVzdCBiZSBvcGVuZWQgKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwogICAgICAgIC8qIGFib3J0IGlmIG5vIGNvbm5lY3Rpb24gdG8gbG9jYWwgbWdkICovCiAgICAgICAgaWYgKCRjb25uZWN0aW9uLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGNvbm5lY3Rpb24vLi4sICRtZXNzYWdlID0gIkVycm9yIGNvbm5lY3Rpbmcgb24gbWdkIG9uIHRoaXMgUkUiKTsKICAgICAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICAgKiBUaGUgY29ubmVjdGlvbiBhbmQgY2hhbmdlIGFyZSBzZXQgYXMgcGFyYW1ldGVycyB0byB0aGUgamNzOmxvYWQtY29uZmlndXJhdGlvbiB0ZW1wbGF0ZQogICAgICAgICAqIHdoaWNoIHBlcmZvcm1zIHRoZSBjaGFuZ2UuICBUaGUgOj0gb3BlcmF0b3IgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGUgJHJlc3VsdHMgdmFyaWFibGUKICAgICAgICAgKiBpcyBhIG5vZGUtc2V0IHJhdGhlciB0aGFuIGEgcmVzdWx0IHRyZWUgZnJhZ21lbnQuCiAgICAgICAgKi8KICAgICAgICB2YXIgJHJlc3VsdHMgOj0geyBjYWxsIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24oICRjb25uZWN0aW9uLCAkY29uZmlndXJhdGlvbiA9ICRjb25maWd1cmF0aW9uLWNoYW5nZSApOyB9CgogICAgICAgIC8qIENoZWNrIGZvciBlcnJvcnMgLSByZXBvcnQgdGhlbSBpZiB0aGV5IG9jY3VycmVkLiAqLwogICAgICAgIGlmICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJHJlc3VsdHMsICRtZXNzYWdlID0gIkVycm9yIGFwcGx5aW5nIGNvbmZpZ3VyYXRpb24uIik7CiAgICAgICAgZm9yLWVhY2ggKCAkcmVzdWx0cy8veG5tOmVycm9yICkgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBkaXNhYmxlZCByZXN1bHRzOiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiQW4gZXJyb3IgaGFzIGJlZW4gZW5jb3VudGVyZWQ6ICIgXyBtZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZGlzYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjEiKTsKICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiVGhlIGZvbGxvd2luZyBpbnRlcmZhY2UocykgaGF2ZSBub3cgYmVlbiBkaXNhYmxlZC4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGludC1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZGV2bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwaW50bm0gPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50LXJlZ2V4WzNdLCJbbmFtZT0iLCIiKSwiXSIsIiIpLCJcIiIsIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICRwaW50bm0gXyAiIDsgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHJlc3VsdHMvY29tbWl0LXJlc3VsdHMvcm91dGluZy1lbmdpbmUvY29tbWl0LXN1Y2Nlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkNvbW1pdCBzdWNjZXNzLiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRyZXN1bHRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmluZm8iLCAiU0NSSVBUX0FDVElPTl9JRl9ESVNBQkxFOiBTY3JpcHQgYWN0aW9uIHRha2VuIHRvIGRpc2FibGUgcGh5c2ljYWwgaW50ZXJmYWNlLiIpOwogICAgICAgIHZhciAkY2xvc2UtcmVzdWx0cyA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgICAgICBpZiAoJGNsb3NlLXJlc3VsdHMvLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uLiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQogICAgfQp9CgoKdGVtcGxhdGUgcnBjX2ZhaWx1cmUoJHJwYywgJG1lc3NhZ2UgPSAiRm9sbG93aW5nIGVycm9ycyBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2F0aGVyIGRhdGE6ICIpIHsKICBleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsICRtZXNzYWdlKTsKICBmb3ItZWFjaCAoJHJwYy8veG5tOmVycm9yKSB7CiAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5lcnJvciIsIG1lc3NhZ2UpOwogIH0KfQo=";
				<md5> "5514a3b5723d4834f38b9696899cf7d0";
			}
			<script> {
				<name> "jspace-lib.slax";
				<type> "op";
				<base64> "";
				<md5> "fb11a706b1483da61656d0cf9f6f28df";
			}
			<script> {
				<name> "juniper-commit.slax";
				<type> "op";
				<base64> "";
				<md5> "8eff14f2d6d9af2880d306d0d86c07da";
			}
			<script> {
				<name> "Logical_Interface-Activation.slax";
				<type> "op";
				<base64> "";
				<md5> "3ebabd88a9785616547e88cda250d4e4";
			}
			<script> {
				<name> "Logical_Interface-Deactivation.slax";
				<type> "op";
				<base64> "";
				<md5> "c6b346a8d17508c756acdfd69c3b9b01";
			}
			<script> {
				<name> "op-sfp-data.slax";
				<type> "op";
				<base64> "";
				<md5> "96ff2607100a273d017624a93a6c7884";
			}
			<script> {
				<name> "op-show-optics-hw.slax";
				<type> "op";
				<base64> "";
				<md5> "c53fe8b7bdcefd946717b02efd0632fc";
			}
			<script> {
				<name> "PPPoE-Show_IP_Count.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfSVBfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMS4xMgogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM4NDQxICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6Mjg6MTIgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IFNob3cgbnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyAoZ3JvdXBlZCBieSBJUHY0LCBJUHY2IGZyYW1lZCBhbmQgZGVsZWdhdGVkIGFkZHJlc3NlcykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgovKiBOYW1lc3BhY2UgZGVjbGFyYXRpb25zICovCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKbnMgZXhzbCBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9jb21tb24iOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKLyogSW1wb3J0cyAqLwppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBATkFNRSA9ICJSMS4xMiAtIFBQUG9FLVNob3dfSVBfQ291biIgKi8KLyogQERFU0NSSVBUSU9OID0gIlNob3cgbnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyAoZ3JvdXBlZCBieSBJUHY0LCBJUHY2IGZyYW1lZCBhbmQgZGVsZWdhdGVkIGFkZHJlc3NlcykuIiAqLwoKLyogR2xvYmFsIHZhcmlhYmxlcyAqLwp2YXIgJHNjcmlwdG5hbWUgPSAiUFBQb0UtU2hvd19JUF9Db3VudC5zbGF4IjsKdmFyICRnZXQtc3Vic2NyaWJlcnMtY2xpZW50LXR5cGUtcHBwb2UtZGV0YWlsLXJwYzsKdmFyICRyZXN1bHRzOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKICAgICAgICB2YXIgJHR0eSA9ICRqdW5vcy1jb250ZXh0L3R0eTsKCiAgICAgICAgLyogUmVxdWVzdCBzdWJzY3JpYmVyIGluZm9ybWF0aW9uIGZpbHRlcmVkIG9uIFBQUG9FICovCiAgICAgICAgdmFyICAkZ2V0LXN1YnNjcmliZXJzLWNsaWVudC10eXBlLXBwcG9lLWRldGFpbC1ycGMgPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgIDxjbGllbnQtdHlwZT4icHBwb2UiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRyZXN1bHRzID0gamNzOmludm9rZSggJGdldC1zdWJzY3JpYmVycy1jbGllbnQtdHlwZS1wcHBvZS1kZXRhaWwtcnBjICk7CgogICAgICAgIHZhciAkaXB2NC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXAtYWRkcmVzcyk7CiAgICAgICAgdmFyICRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQgPSBjb3VudCgkcmVzdWx0cy9zdWJzY3JpYmVyW3N0YXRlID09ICJBY3RpdmUiXS9pcHY2LXByZWZpeCk7CiAgICAgICAgdmFyICRpcHY2ZnJhbWVkLWFkZHJlc3MtY291bnQgPSBjb3VudCgkcmVzdWx0cy9zdWJzY3JpYmVyW3N0YXRlID09ICJBY3RpdmUiXS9pcHY2LXVzZXItcHJlZml4KTsKCiAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJOdW1iZXIgb2YgdXNlZCBJUCBhZGRyZXNzZXMgYWNyb3NzIFBQUG9FIHNlc3Npb25zIjsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCI3Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjEiPjsKICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY0IjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIklQdjYgZGVsZWdhdGVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIklQdjYgZnJhbWVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoICR0dHkgIT0gIm5vbi10dHkiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOm91dHB1dCgiSVB2NDogIiBfICRpcHY0LWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjYgZGVsZWdhdGVkOiAiIF8gJGlwdjZkZWxlZ2F0ZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgamNzOm91dHB1dCgiSVB2NiBmcmFtZWQ6ICIgXyAkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRpcHY0LWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJGlwdjZkZWxlZ2F0ZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=";
				<md5> "790da373474c2c5430e9cfc0caf91190";
			}
			<script> {
				<name> "PPPoE-Show_Sessions_Count.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfU2Vzc2lvbnNfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldCwgRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMS4xMgogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzg0NDEgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzoyODoxMiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogU2hvdyBudW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyBwZXIgaW50ZXJmYWNlIGFuZCBjaGFzc2lzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2RldmljZSIgKi8KLyogQE5BTUUgPSAiUjEuMTIgLSBQUFBvRS1TaG93X1Nlc3Npb25zX0NvdW50IiAqLwovKiBAREVTQ1JJUFRJT04gPSAiU2hvdyBudW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyBwZXIgaW50ZXJmYWNlIGFuZCBjaGFzc2lzIiAqLwoKdmVyc2lvbiAxLjE7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIGpzcGFjZSA9ICJodHRwOi8vanNwYWNlLXV0aWxzL2FzaGFycEBqdW5pcGVyLm5ldCI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiZGlzcGxheSI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiYWxsfHVzZWQiOwogICAgfQp9CnBhcmFtICRkaXNwbGF5ID0gImFsbCI7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICAvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICBtdmFyICRzdW1QUFBvRSA9IDA7CiAgICAgICAgbXZhciAkc3VtTDJUUCA9IDA7CgogICAgICAgIHZhciAkdHR5ID0gJGp1bm9zLWNvbnRleHQvdHR5OwoKICAgICAgICB2YXIgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gPSA8Z2V0LWludGVyZmFjZS1pbmZvcm1hdGlvbj4gewogICAgICAgICAgICA8dGVyc2U+OwogICAgICAgIH0KICAgICAgICB2YXIgJGludGVyZmFjZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gKTsKCiAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgPEhFQUQ+IHsKICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJOdW1iZXIgb2YgUFBQb0UvTDJUUCBzZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiNyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIxIj47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiSW50ZXJmYWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlNlc3Npb25zIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlBQUG9FIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkwyVFAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICBmb3ItZWFjaCggJGludGVyZmFjZS1pbmZvcm1hdGlvbi8vcGh5c2ljYWwtaW50ZXJmYWNlICkgewoKICAgICAgICAgICAgaWYgKCBzdGFydHMtd2l0aChuYW1lLCAiZ2UiKSB8fCBzdGFydHMtd2l0aCggbmFtZSwgInhlIiApICkgewoKICAgICAgICAgICAgICAgIHZhciAkZ2V0LXN1YnNjcmliZXJzLWludCA9IDxnZXQtc3Vic2NyaWJlcnM+IHsKICAgICAgICAgICAgICAgICAgICA8cGh5c2ljYWwtaW50ZXJmYWNlPiBuYW1lOwogICAgICAgICAgICAgICAgICAgIDxjbGllbnQtdHlwZT4gInBwcG9lIjsKICAgICAgICAgICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciAkc3Vic2NyaWJlci1pbmZvcm1hdGlvbi1pbnQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtc3Vic2NyaWJlcnMtaW50ICk7CgogICAgICAgICAgICAgICAgdmFyICRzdW1JbnRQUFBvRSA9IGNvdW50KCAkc3Vic2NyaWJlci1pbmZvcm1hdGlvbi1pbnQvc3Vic2NyaWJlclsgYWNjZXNzLXR5cGUgPT0gIlBQUG9FIiBdICk7CiAgICAgICAgICAgICAgICB2YXIgJHN1bUludEwyVFAgPSBjb3VudCggJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50L3N1YnNjcmliZXJbIGNvbnRhaW5zKCBTdGF0ZSwgIlR1bm5lbGVkIiApIF0gKTsKCiAgICAgICAgICAgICAgICBpZiAoICRzdW1JbnRQUFBvRSA+IDAgfHwgJGRpc3BsYXkgPT0gImFsbCIgKSB7CgogICAgICAgICAgICAgICAgICAgIHNldCAkc3VtUFBQb0UgPSAkc3VtUFBQb0UgKyAkc3VtSW50UFBQb0U7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzdW1MMlRQID0gJHN1bUwyVFAgKyAkc3VtSW50TDJUUDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIGpjczpwcmludGYoICJJbnRlcmZhY2U6ICUtMTVzIFNlc3Npb25zOiAlNXMgUFBQb0U6ICU1cyBMMlRQOiAlNXMiLCBuYW1lLCAkc3VtSW50UFBQb0UsICRzdW1JbnRQUFBvRSAtICRzdW1JbnRMMlRQLCAkc3VtSW50TDJUUCApICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKG5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bUludFBQUG9FKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRQUFBvRSAtICRzdW1JbnRMMlRQKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRMMlRQKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIGpjczpwcmludGYoICJDaGFzc2lzOiAlMTdzIFNlc3Npb25zOiAlNXMgUFBQb0U6ICU1cyBMMlRQOiAlNXNcciIsICIgIiwgJHN1bVBQUG9FLCAkc3VtUFBQb0UgLSAkc3VtTDJUUCwgJHN1bUwyVFAgKSApOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6IDIwcHggIWltcG9ydGFudDsiPiB7CiAgICAgICAgICAgICAgICA8dGQ+IHsgZXhwciAoICIiICk7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICA8dHI+IHsKICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCJDaGFzc2lzIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtUFBQb0UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bVBQUG9FIC0gJHN1bUwyVFApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bUwyVFApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRjb25uZWN0aW9uICk7CiAgICB9CgogICAgfSAvKiBib2R5ICovCiAgICB9IC8qIGhlYWQgKi8KICAgIH0gLyogaHRtbCAqLwp9Cg==";
				<md5> "a22f1b9f03d57858ce85e79d774498f0";
			}
			<script> {
				<name> "show-subscriber.slax";
				<type> "op";
				<base64> "";
				<md5> "03a99db05c278b0b8a8f1a760976b777";
			}

        } /* ... embedded scripts */

        /* parse credentials for selected devices */
        var $devices = jspace:credentials();

        /* counter for result summary */
        mvar $deviceCounter = 0;
        mvar $connectionSuccess = 0;
        mvar $connectionFailed = 0;
        mvar $installSuccess = 0;
        mvar $installFailed = 0;
        mvar $commitSuccess = 0;
        mvar $commitFailed = 0;
        mvar $autocleanSuccess = 0;
        mvar $autocleanFailed = 0;

        mvar $results = <info> "installer results";
        mvar $csvResultBNG = "BNG%2CRESULT%2CCOMMIT%2CMESSAGE%2CAUTOCLEAN%2CMESSAGE%0A";
        mvar $csvResultFiles = "BNG%2CFILES%2CRESULT%2CMD5%2CMESSAGE%0A";

        if ( $devices ) {
            for-each( $devices/device) {
                set $deviceCounter = $deviceCounter +1;

                var $local = jcs:open( (target) , (user) , (passwd) );
                var $devicename = (host);

                if ( $local//self::xnm:error ) {
                    set $connectionFailed = $connectionFailed +1;
                    append $results += <device> {
                        <host> $devicename;
                        <connection-error>;
                    }
                } else {
                    set $connectionSuccess = $connectionSuccess +1;

                    mvar $commitResult = false();
                    var $fileResult := <result> {
                        for-each ( $embedded//script ) {
                            call file-put( $local, $re = "re0", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                            call file-put( $local, $re = "re1", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                        }
                    }
                    if ( $fileResult//error ) {
                        set $installFailed = $installFailed +1;
                        set $commitResult = <xnm:error> {
                            <message> "not commited because script install failed";
                        }
                    } else {
                        set $installSuccess = $installSuccess +1;
                        if ( $commit == "true" ) { 
                            var $commit-configuration = <commit-configuration> {
                                <log> "autoclean via installer";
                                <force-synchronize>;
                            }
                            set $commitResult = jcs:execute( $local, $commit-configuration );
                            if ( $commitResult//commit-success ) {
                                set $commitSuccess = $commitSuccess +1;
                            } else {
                                set $commitFailed = $commitFailed +1;
                            }
                        }
                    }

                    var $autoclean-tmp = <command> "op url /var/db/scripts/op/iceaaa-autoclean-tmp.slax";
                    var $autocleanResult = jcs:execute( $local, $autoclean-tmp );
                    if ( $autocleanResult//self::xnm:error ) {
                        set $autocleanFailed = $autocleanFailed +1;
                    } else {
                        set $autocleanSuccess = $autocleanSuccess +1;
                    }

                    append $results += <device> {
                        <host> $devicename;
                        <files> {
                            copy-of $fileResult;
                        }
                        if ($commitResult) {
                            <commit> {
                                copy-of $commitResult;
                            }
                        }
                        <autoclean> {
                            if ( $autocleanResult//self::xnm:error ) {
                                copy-of $autocleanResult;
                            } else {
                                <enabled>;
                            }
                        }
                    }
                }
                var $closeResult = jcs:close( $local );
            }
        }
        <output> {
            <HTML> {
                <HEAD> {
                    <title> "iCEAAA Scripts Version R1.12";
                    <style type="text/css"> {
                        expr "body { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000;border-style: solid;border-color: transparent;background-color: white}";
                        expr "td { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000; }";
                        expr "p { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 14px;color:#000; }";
                        expr "table { font-size: 1.0em;border-collapse: collapse;width: 99% }";
                        expr "progress[value] { background-color: #eee; border-radius: 2px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset; }";
                        expr "#tableheader { font-weight: bolder;text-align: center;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderleft { font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderright { font-weight: bolder;text-align: right;background-color: #7592A9;color: #fff }";
                        expr "#tablereverse { font-size: 16px; font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#celltitle { font-weight: bolder }";
                        expr "#cellwarning { text-align: center; background-color: #ff0000; color: #fff; font-weight: bolder; }";
                        expr "#cellamber { text-align: center; background-color: #f87431; color: #fff; font-weight: bolder; }";
                        expr "#center {text-align: center}";
                        expr "#failed { color: red }";
                        expr "#failed2 { color: red; font-style: italic; }";
                        expr "#content { margin-bottom: 15px; }";
                        expr ".footer { position: fixed; bottom: 0px; width: 100%; background-color: white; margin: 0px; }";
                    }
                }
                <BODY> {
                    /* Java Script ... */
                    <script> {
                        expr "function toggleVisibility(id) {";
                        expr "    if(document.getElementById(id).style.display == 'table-row-group') {";
                        expr "        document.getElementById(id).style.display = 'none';";
                        expr "    } else {";
                        expr "        document.getElementById(id).style.display = 'table-row-group';";
                        expr "    }";
                        expr "}";
                        expr "function openInNewWindow() {";
                        expr "    var myWindow = window.open('about:blank', 'ExportWindow', 'scrollbars=yes,menubar=yes,location=no');";
                        expr "    myWindow.document.write( document.getElementsByTagName( 'html' )[0].outerHTML );";
                        expr "    var openButton = myWindow.document.getElementById('openInNewWindowButton');";
                        expr "    openButton.parentNode.removeChild( openButton );";
                        expr "}";
                    }
                    <div id="content"> {
                        <p style="text-align: center; font-family: Verdana, Georgia, Arial, sans-serif, bold; font-size: 18px; color:#000;"> { 
                            expr "iCEAAA Scripts Installer Version R1.12";
                        }
                        <p> { 
                            expr "Summary Result for " _ $deviceCounter _ " Devices";
                        }
                        <table> {
                            <colgroup> {
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:1%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "SUCCESSFUL";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FAILED";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Connections (NETCONF)";
                                }
                                <td> {
                                    expr $connectionSuccess;
                                }
                                <td> {
                                    expr $connectionFailed;
                                }
                                mvar $connectionPercent = 0;
                                <td> {
                                    if ($connectionSuccess > 0) {
                                        set $connectionPercent = floor($connectionSuccess div ($connectionSuccess + $connectionFailed) * 100 );
                                    }
                                    <progress max="100" value=$connectionPercent>;
                                }
                                <td> {
                                    expr $connectionPercent _ "%";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Installation";
                                }
                                <td> {
                                    expr $installSuccess;
                                }
                                <td> {
                                    expr $installFailed;
                                }
                                mvar $installPercent = 0;
                                <td> {
                                    if ($installSuccess > 0) {
                                        set $installPercent = floor($installSuccess div ($installSuccess + $installFailed) * 100 );
                                    }
                                    <progress max="100" value=$installPercent>;
                                }
                                <td> {
                                    expr $installPercent _ "%";
                                }
                            }
                            if ( $commit == "true" ) {
                                <tr> {
                                    <td> {
                                        expr "Commit";
                                    }
                                    <td> {
                                        expr $commitSuccess;
                                    }
                                    <td> {
                                        expr $commitFailed;
                                    }
                                    mvar $commitPercent = 0;
                                    <td> {
                                        if ($commitSuccess > 0) {
                                            set $commitPercent = floor($commitSuccess div ($commitSuccess + $commitFailed) * 100 );
                                        }
                                        <progress max="100" value=$commitPercent>;
                                    }
                                    <td> {
                                        expr $commitPercent _ "%";
                                    }
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Autoclean Enabled";
                                }
                                <td> {
                                    expr $autocleanSuccess;
                                }
                                <td> {
                                    expr $autocleanFailed;
                                }
                                mvar $autocleanPercent = 0;
                                <td> {
                                    if ($autocleanSuccess > 0) {
                                        set $autocleanPercent = floor($autocleanSuccess div ($autocleanSuccess + $autocleanFailed) * 100 );
                                    }
                                    <progress max="100" value=$autocleanPercent>;
                                }
                                <td> {
                                    expr $autocleanPercent _ "%";
                                }
                            }
                        }
                        <br>;
                        <input id="openInNewWindowButton" type="Button" value="Open in Window" onclick="openInNewWindow(); return false;">;
                        <p> { 
                            expr "Detailed Result";
                        }
                        <table> {
                            <colgroup> {
                                <col style="width:15%; white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "BNG";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FILES";
                                }
                                <th id="tableheaderleft"> {
                                    expr "RESULT";
                                }
                                <th id="tableheaderleft"> {
                                    expr "MD5";
                                }
                            }
                            for-each ( $results//device ) {
                                var $bng = host;
                                var $detailsTag = "details" _ $bng;
                                set $csvResultBNG = $csvResultBNG _ $bng _ "%2C";
                                <tr> {
                                    <td> {
                                        expr $bng;
                                    }
                                    <td> {
                                        <input type="Button" value="Details" onclick="toggleVisibility('" _ $detailsTag _ "');">;
                                    }
                                    if ( .//error || .//xnm:error || .//connection-error ) {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <td id="failed"> {
                                            expr "failed";
                                        }
                                    } else { 
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C";
                                        <td> {
                                            expr "successful";
                                        }
                                    }
                                    <td> {
                                        expr "";
                                    }
                                }
                                <tbody id=$detailsTag style="display: none;"> {
                                    if ( $commit == "true" ) {
                                        /* commit result ... */
                                        if ( .//commit-success ) {
                                            set $csvResultBNG = $csvResultBNG _ "successful%2C%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td> {
                                                    expr "successful";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                        } else {
                                            set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td id="failed"> {
                                                    expr "failed";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                            for-each ( ./commit//xnm:error ) {
                                                var $lines = jcs:break-lines( message );
                                                for-each( $lines ) {
                                                    set $csvResultBNG = $csvResultBNG _ .;
                                                    <tr> {
                                                        <td> {
                                                            expr "";
                                                        }
                                                        <td colspan="3" id="failed2"> {
                                                            expr "error: " _ .;
                                                        }
                                                    }
                                                }
                                            }
                                            set $csvResultBNG = $csvResultBNG _ "%2C";
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "%2C%2C";
                                    }
                                    /* autoclean result ... */
                                    if ( .//autoclean/enabled ) {
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C%0A";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td> {
                                                expr "successful";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td id="failed"> {
                                                expr "failed";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                        for-each ( ./autoclean//xnm:error ) {
                                            var $lines = jcs:break-lines( message );
                                            for-each( $lines ) {
                                                set $csvResultBNG = $csvResultBNG _ .;
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        }
                                        set $csvResultBNG = $csvResultBNG _ "%0A";
                                    }
                                    /* file results ... */
                                    for-each ( .//file ) {
                                        set $csvResultFiles = $csvResultFiles _ $bng _ "%2C" _ name _ "%2C" _ result _ "%2C" _ md5 _ "%2C";
                                        if ( error ) {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td id="failed"> {
                                                    expr result;
                                                }
                                                <td id="failed"> {
                                                    expr md5;
                                                }
                                            }
                                            for-each ( error/message ) {
                                                set $csvResultFiles = $csvResultFiles _ . _" ";
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        } else {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td> {
                                                    expr result;
                                                }
                                                <td> {
                                                    expr md5;
                                                }
                                            }
                                        }
                                        set $csvResultFiles = $csvResultFiles _"%0A";
                                    }
                                }
                            }
                        }
                        <br>;
                        set $csvResultBNG = str:replace( $csvResultBNG, " ", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, " ", "%20" );
                        set $csvResultBNG = str:replace( $csvResultBNG, ",", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, ",", "%20" );
                        <a href="data:application/octet-stream," _ $csvResultBNG _ ""> {
                            expr "Download CSV BNG";
                        }
                        <a href="data:application/octet-stream," _ $csvResultFiles _ ""> {
                            expr "Download CSV Files";
                        }
                        <br>;
                    }
                    var $duration = date:seconds() - date:seconds( $localtime );
                    <p class="footer" style="text-align: left; font-family: Verdana, Georgia, Arial, sans-serif; font-size: 9px; color:#000;"> { 
                        expr "Date: " _ $localtime _ " Execution Time: " _ $duration _ "s";
                    }
                } /* ... BODY */
            }
        }
    }
}

/*
 * This function ...
 */
template file-put( $local, $re, $type, $name, $base64, $md5 ) {
    var $filename = $re _ ":/var/db/scripts/" _ $type _ "/" _ $name;
    var $filePut = {
        <file-put> {
            <filename> $filename;
            <encoding> "base64";
            <permission> "644";
            <delete-if-exist>;
            <file-contents> $base64;
        }
    }
    var $result = jcs:execute( $local, $filePut );
    var $return := <file> {
        <name> $filename;
        <re> $re;
        if ( $result//self::xnm:error ) {
            <result> "failed";
            <md5> "unknown";
            <error> {
                for-each( $result//self::xnm:error ) {
                    <message> message;
                }
            }
        } else {
            <result> "successful";
            var $getChecksum = <get-checksum-information> { 
                <path> $filename;
            }
            var $checksum = jcs:execute( $local, $getChecksum );
            if ( $checksum//checksum == $md5 ) {
                <md5> "okay";
            } else {
                <md5> "failed";
                <error>;
            }
        }
    }
    copy-of $return;
}

/*
 * This function reads the credentials that are automatically supplied to the script 
 * when the annotation to pass the device credentials is used. this is a requirement
 * for a locally executed grouped execution script, as the script must handle all
 * device connections.
 */
<func:function name="jspace:credentials"> {
    if( $CONTEXT ) {
        var $splitCredentials = str:split( $credentials, "\\;" );
        var $targets := {
            for-each ( $splitCredentials ) {
                var $splitCredential = str:split( ., "\\:" );
                var $user-target = str:split($splitCredential[1], "\@");
                var $host = substring-before( substring-after( $deviceipmap, substring-after( $splitCredential[1], "@" ) _ "\":\"" ), "\"" );
                <device> {
                    <target> {
                        expr $user-target[2];
                    }
                    <user> {
                        expr $user-target[1];
                    }
                    <passwd> {
                        expr $splitCredential[2];
                    }
                    <host> {
                        expr $host;
                    }
                }
            }
        }
        <func:result select="$targets">;
    }
    else {
        <func:result select="false()">;
    }
}

