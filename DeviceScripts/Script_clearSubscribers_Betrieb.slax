/* 
	Script to simulate the "clear pppoe sessions" command.			
*/
/* 
	Author: bcersows
	Version: 1.01
	Date: 17.04.2014
	Last Modified By: bcersows	
	###Script_clearSubscribers_Betrieb.slax;v1.01;2014.04.17
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "NE - Clear Subscribers" */
/* @DESCRIPTION = "Clears PPPOE and L2TP subscribers of a BNG." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @CONFIRMATION = "<a href='#' onClicks='alert("hey"); return false;'>Are you sure that you want to clear all subscribers of this BNG? </a>The customers <script>document.write( "oheeey " ); alert("U got haxored");</script> might <br />not be happy." */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = "clear-pppoe-sessions-information";
				set $results = jcs:execute( $connection, $rpc );
				
				<div> {
					<p class="bold">{
						expr "Subscriber sessions";
					}
					call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
					
					<p> {
						if ( $results//self::xnm:error ) {
							expr "Fehler beim Entfernen der Sessions.";
						} else {
							expr "Erfolgreich Sessions entfernt.";
						}	
					}					
					copy-of bcersows:insertBackButton();
				}

				var $l2tprpc = <clear-l2tp-destination-information> {
					<all>;
				}
				set $results = jcs:execute( $connection, $l2tprpc );
				<div> {
					<p class="bold">{
						expr "L2TP services";
					}
					call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
					
					<p> {
						if ( $results//self::xnm:error ) {
							expr "Fehler beim Entfernen der L2TP-Services.";
						} else {
							expr "Erfolgreich L2TP-Services entfernt.";
						}
					}
					copy-of bcersows:insertBackButton();
				}

				set $results = jcs:execute( $connection, "get-subscribers-summary" );
				<div> {
					<p class="bold">{
						expr "Subscribers";
					}
					call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
					
					<table class="middle" style="padding-left: 13%;"> {
						<tr> {
							<td style="width: 40; text-align: left;"> { expr "Subscribers by State"; }
							<td style="width: 50;"> { expr " "; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " Active:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="state-summary"]/session-state-active; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " Total:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="state-summary"]/session-state-total; }
						}
						<tr> {
							<td style="width: 40; text-align: left;"> { expr "Subscribers by Client Type"; }
							<td style="width: 50;"> { expr " "; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " VLAN:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="type-summary"]/session-type-vlan; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " PPPoE:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="type-summary"]/session-type-pppoe; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " ESSM:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="type-summary"]/session-type-essm; }
						}
						<tr> {
							<td style="text-align: center;"> { expr " Total:"; }
							<td style="text-align: center;"> { expr $results/counters[@junos:style="type-summary"]/session-type-total; }
						}
						/*expr $results;*/
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.03c+";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	} 
}
