
/*
 * Filename      : iceaaa-script-installer-r2-9.slax
 * Author        : cgiese cgiese@juniper.net
 * Version       : R2.9
 *
 * Description   : iCEAAA Script Installer Version R2.9
 *
 */
 
/* Junos Space specific context, name and description */
/* @CONTEXT = "/device" */
/* @NAME = "iCEAAA Scripts Version R2.9" */
/* @DESCRIPTION = "Installer Script for iCEAAA Scripts" */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @VARIABLECONTEXT = "[{'name':'commit','selectionvalues':'false, true'}]" */
/* @CONFIRMATION = "Are you sure that you want to install the iCEAAA script version R2.9?"  */

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";
ns func extension = "http://exslt.org/functions";
ns jspace = "http://jspace-utils/asharp@juniper.net";

import "../import/junos.xsl";

var $arguments = {
    <argument> { 
        <name> "commit";
        <description> "commit configuration with autoclean enabled if value is true";
    }
}
param $CONTEXT;
param $commit;

var $version = "R2.9";

match / {
    <op-script-results> {
        var $localtime = date:date-time();

        var $embedded := <embedded-scripts> {
			<script> {
				<name> "iceaaa-dynamic-config.slax";
				<type> "commit";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1keW5hbWljLWNvbmZpZy5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxNC4xWDUwIChpbmNsdWRpbmcgRVNTTUQpCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NDQ2ICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6MzQ6MDYgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IGNvbW1pdC1zY3JpcHQgZ2VuZXJhdGluZyBkeW5hbWljIGNvbmZpZ3VyYXRpb25zCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIyLjkgLSBpY2VhYWEtZHluYW1pYy1jb25maWciICovCi8qIEBERVNDUklQVElPTiA9ICJjb21taXQtc2NyaXB0IGdlbmVyYXRpbmcgZHluYW1pYyBjb25maWd1cmF0aW9ucyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBzdHIgPSAiaHR0cDovL2V4c2x0Lm9yZy9zdHJpbmdzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGEgY29tbWl0IHNjcmlwdCAqLwoKPHhzbDprZXkgbmFtZT0iZXNzbWQtc3Vic2NyaWJlciIgbWF0Y2g9InN1YnNjcmliZXJzLWluZm9ybWF0aW9uL3N1YnNjcmliZXIiIHVzZT0iaW50ZXJmYWNlIj47CgptYXRjaCBjb25maWd1cmF0aW9uIHsKCiAgICBtdmFyICRzZXJ2aWNlQ291bnRlciA9IDA7CiAgICBtdmFyICRzZXJ2aWNlR2VuZXJhdGVDb3VudGVyID0gMDsKICAgIG12YXIgJHNlcnZpY2VSZW1vdmVDb3VudGVyID0gMDsKCiAgICAvKiBmaW5pc2NoIHNjcmlwdCBleGVjdXRpb24gaWYgcnVubmluZyBvbiBiYWNrdXAgUkUgd2l0aG91dCBHUkVTICovCiAgICBpZiAoIGNoYXNzaXMvcmVkdW5kYW5jeS9ncmFjZWZ1bC1zd2l0Y2hvdmVyIHx8ICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKCiAgICAgICAgLyogcmVhZCBzY3JpcHQgY29uZmlnIC4uLiAqLwogICAgICAgIHZhciAkc2NyaXB0Q29uZmlnIDo9IHsKICAgICAgICAgICAgY29weS1vZiBzeXN0ZW0vc2NyaXB0cy9jb21taXQvYXBwbHktbWFjcm9bIG5hbWUgPT0gImljZWFhYS1keW5hbWljLWNvbmZpZyIgXTsKICAgICAgICB9CiAgICAgICAgbXZhciAkaW5ncmVzc1F1ZXVpbmcgPSB0cnVlKCk7CiAgICAgICAgaWYgKCAkc2NyaXB0Q29uZmlnLy9kYXRhWyBuYW1lID09ICJpbmdyZXNzLXF1ZXVpbmciIF0vdmFsdWUgPT0gIkZBTFNFIiApIHsKICAgICAgICAgICAgc2V0ICRpbmdyZXNzUXVldWluZyA9IGZhbHNlKCk7CiAgICAgICAgICAgIGV4cHIgamNzOnN5c2xvZyAoICJ1c2VyLmluZm8iLCAiaWNlYWFhLWR5bmFtaWMtY29uZmlnIC0gaW5ncmVzcy1xdWV1aW5nIGRpc2FibGVkIiApOwogICAgICAgIH0KICAgICAgICAvKiAuLi4gcmVhZCBzY3JpcHQgY29uZmlnICAqLwoKICAgICAgICAvKiBkaXNhYmxlIGZpbGUgb3BlcmF0aW9ucyBkdXJpbmcgY29tbWl0LWJvb3QgKi8KICAgICAgICBtdmFyICR0bXBmcyA9IHRydWUoKTsKICAgICAgICBpZiAoICRqdW5vcy1jb250ZXh0Ly9jb21taXQtYm9vdCApIHsKICAgICAgICAgICAgc2V0ICR0bXBmcyA9IGZhbHNlKCk7CiAgICAgICAgfQoKICAgICAgICAvKiBhdXRvY2xlYW4gc3RhdHVzIC4uLiAqLwogICAgICAgIG12YXIgJGF1dG9jbGVhbiA9IGZhbHNlKCk7CiAgICAgICAgbXZhciAkc3Vic2NyaWJlciA9IDxzdWJzY3JpYmVyPjsKCiAgICAgICAgLyogZW5hYmxlIGF1dG9jbGVhbiBiZWNhdXNlIG9mIGNvbmZpZ3VyYXRpb24gKi8KICAgICAgICBpZiAoICRzY3JpcHRDb25maWcvL2RhdGFbIG5hbWUgPT0gImF1dG9jbGVhbiIgXS92YWx1ZSA9PSAiVFJVRSIgKSB7CiAgICAgICAgICAgIHNldCAkYXV0b2NsZWFuID0gdHJ1ZSgpOwogICAgICAgIH0KICAgICAgICAvKiBlbmFibGUgYXV0b2NsZWFuIHRlbXBvcmFyeSBpZiBjb21taXQtY29tbWVudCBpcyBhdXRvY2xlYW4gKi8KICAgICAgICBpZiAoIHN0YXJ0cy13aXRoKCAkanVub3MtY29udGV4dC8vY29tbWl0LWNvbW1lbnQsICJhdXRvY2xlYW4iICkgKSB7CiAgICAgICAgICAgIHNldCAkYXV0b2NsZWFuID0gdHJ1ZSgpOwogICAgICAgICAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5ub3RpY2UiLCAiaWNlYWFhLWR5bmFtaWMtY29uZmlnIC0gYXV0b2NsZWFuIHRlbXBvcmFyeSBlbmFibGVkIGJlY2F1c2Ugb2YgY29tbWl0LWNvbW1lbnQgYXV0b2NsZWFuIiApOwogICAgICAgIH0KICAgICAgICAvKiBlbmFibGUgYXV0b2NsZWFuIHRlbXBvcmFyeSBiZWNhdXNlIG9mIGV2ZW50LXNjcmlwdCAqLwogICAgICAgIGlmICggJHRtcGZzICkgewogICAgICAgICAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgICAgICAgICAgICAgIC8qIHJlLW1hc3RlciAuLi4gKi8KICAgICAgICAgICAgICAgIHZhciAkYXV0b2NsZWFuVG1wID0gc2xheDpkb2N1bWVudCggIi9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iICk7CiAgICAgICAgICAgICAgICBpZiAoISBjb250YWlucyggJGF1dG9jbGVhblRtcCwgImZhbHNlIiApICkgewogICAgICAgICAgICAgICAgICAgIGlmICggY29udGFpbnMoICRhdXRvY2xlYW5UbXAsICJ0cmFuc2l0aW9uIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGF1dG9jbGVhblN0YXR1cyA9IDxmYWxzZT47CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGF1dG9jbGVhbiA9IHRydWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRhdXRvY2xlYW5TdGF0dXMgPSA8dHJhbnNpdGlvbj47CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZG9jdW1lbnQgbWV0aG9kPSJ4bWwiIGhyZWY9Ii9tZnMvdmFyL3RtcC9hdXRvY2xlYW4iIGFwcGVuZD0ibm8iPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvKiByZS1iYWNrdXAgLi4uICovCiAgICAgICAgICAgICAgICBtdmFyICRmaWxlbmFtZSA9ICJyZTA6L21mcy92YXIvdG1wL2F1dG9jbGVhbiI7CiAgICAgICAgICAgICAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JvdXRpbmctZW5naW5lLW5hbWUgPT0gInJlMCIgKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRmaWxlbmFtZSA9ICJyZTE6L21mcy92YXIvdG1wL2F1dG9jbGVhbiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJGZpbGUtc2hvdy1hdXRvY2xlYW4gPSA8ZmlsZS1zaG93PiB7CiAgICAgICAgICAgICAgICAgICAgPGZpbGVuYW1lPiAkZmlsZW5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJGF1dG9jbGVhblRtcCA9IGpjczppbnZva2UoICRmaWxlLXNob3ctYXV0b2NsZWFuICk7CiAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSIvbWZzL3Zhci90bXAvZmlsZS1zaG93LWF1dG9jbGVhbiIgYXBwZW5kPSJubyI+IHsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5UbXA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoISBjb250YWlucyggJGF1dG9jbGVhblRtcCwgImZhbHNlIiApICkgewogICAgICAgICAgICAgICAgICAgIHNldCAkYXV0b2NsZWFuID0gdHJ1ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8qIGdldCBzdWJzY3JpYmVyLWluZm9ybWF0aW9uIGZvciBlc3NtIHNlcnZpY2VzIGlmIGF1dG9jbGVhbiBpcyBlbmFibGVkICovCiAgICAgICAgaWYgKCAkYXV0b2NsZWFuICkgewogICAgICAgICAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5pbmZvIiwgImljZWFhYS1keW5hbWljLWNvbmZpZyAtIGF1dG9jbGVhbiBlbmFibGVkIiApOwogICAgICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVycyA9IDxnZXQtc3Vic2NyaWJlcnM+IHsKICAgICAgICAgICAgICAgIDxjbGllbnQtdHlwZT4gImVzc20iOwogICAgICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0ICRzdWJzY3JpYmVyID0gamNzOmludm9rZSggJGdldC1zdWJzY3JpYmVycyApOwogICAgICAgIH0KICAgICAgICAvKiAuLi4gYXV0b2NsZWFuIHN0YXR1cyAqLwoKICAgICAgICBmb3ItZWFjaCAoIGFwcGx5LW1hY3JvWyBzdGFydHMtd2l0aCggbmFtZSwgIiNJQ0VBQUEjIiApIF0gKSB7CgogICAgICAgICAgICAvKiBnZXQgTGluZS1JZCBhbmQgc2VydmljZSBWTEFOICh2aWQpIGZyb20gbWFjcm8gbmFtZSAqLwogICAgICAgICAgICB2YXIgJHNlcnZpY2VJZCA9IGpjczpzcGxpdCggIltbLm51bWJlci1zaWduLl1dIiwgbmFtZSApOwogICAgICAgICAgICB2YXIgJGxpbmVJZCA9ICRzZXJ2aWNlSWRbM107CiAgICAgICAgICAgIHZhciAkc2VydmljZVZsYW4gPSAkc2VydmljZUlkWzRdOwoKICAgICAgICAgICAgdmFyICRhY2N0U2Vzc2lvbklkID0gZGF0YVsgbmFtZSA9PSAiQWNjdC1TZXNzaW9uLUlkIiBdL3ZhbHVlOwoKICAgICAgICAgICAgLyogdXNlIFBQUG9FIHNlc3Npb24taWQgYXMgY2FjaGUgSUQgKi8KICAgICAgICAgICAgdmFyICRjYWNoZUlkID0gc3Vic3RyaW5nLWFmdGVyKCAkYWNjdFNlc3Npb25JZCwgIjoiICk7CgogICAgICAgICAgICB2YXIgJHNlcnZpY2VJZmwgPSBkYXRhWyBuYW1lID09ICJTZXJ2aWNlLUlmbCIgXS92YWx1ZTsKICAgICAgICAgICAgbXZhciAkc2VydmljZUlmbE9sZCA9ICRzZXJ2aWNlSWZsOwoKICAgICAgICAgICAgbXZhciAkc2VydmljZU5hbWUgPSAiTkEiOwogICAgICAgICAgICBtdmFyICRzZXJ2aWNlQW5wVGFnID0gIk5BIjsKCiAgICAgICAgICAgIC8qIHNlcnZpY2UgZGUtL2FjdGl2YXRpb24gYW5kIHVwZGF0ZSBsb2dpYyAqLwogICAgICAgICAgICBtdmFyICRzZXJ2aWNlQWN0aXZhdGUgPSBmYWxzZSgpOwogICAgICAgICAgICBpZiAoIGRhdGFbIG5hbWUgPT0gIkFjdGl2YXRlIiBdL3ZhbHVlID09ICJUUlVFIiApIHsKICAgICAgICAgICAgICAgIHNldCAkc2VydmljZUFjdGl2YXRlID0gdHJ1ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG12YXIgJHNlcnZpY2VEZWFjdGl2YXRlID0gZmFsc2UoKTsKICAgICAgICAgICAgbXZhciAkc2VydmljZURlYWN0aXZhdGVJZCA9IHRydWUoKTsKICAgICAgICAgICAgbXZhciAkc2VydmljZURlYWN0aXZhdGVTZXNzaW9uSWQgPSAkY2FjaGVJZDsKICAgICAgICAgICAgdmFyICRzZXJ2aWNlRGVhY3RpdmF0ZUNhdXNlID0gZGF0YVsgbmFtZSA9PSAiQWNjdC1UZXJtaW5hdGUtQ2F1c2UiIF0vdmFsdWU7CiAgICAgICAgICAgIHZhciAkc2VydmljZURlYWN0aXZhdGVWYWx1ZSA9IGRhdGFbIG5hbWUgPT0gIkRlYWN0aXZhdGUiIF0vdmFsdWU7CiAgICAgICAgICAgIGlmICggJHNlcnZpY2VEZWFjdGl2YXRlVmFsdWUgKSB7CiAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlRGVhY3RpdmF0ZVZhbHVlICE9ICJGQUxTRSIgKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlRGVhY3RpdmF0ZVNlc3Npb25JZCA9IHN1YnN0cmluZy1hZnRlciggJHNlcnZpY2VEZWFjdGl2YXRlVmFsdWUsICI6IiApOwogICAgICAgICAgICAgICAgICAgIHNldCAkc2VydmljZURlYWN0aXZhdGUgPSB0cnVlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZURlYWN0aXZhdGVWYWx1ZSAhPSAkYWNjdFNlc3Npb25JZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlRGVhY3RpdmF0ZUlkID0gZmFsc2UoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIGF1dG9jbGVhbiAtIGRlbGV0ZSBzZXJ2aWNlIGlmIGNvbnRyb2wgc2Vzc2lvbiBkb2VzIG5vdCBleGlzdCAuLi4gKi8KICAgICAgICAgICAgbXZhciAkZGVsZXRlU2Vzc2lvbiA9IGZhbHNlKCk7CgogICAgICAgICAgICBpZiAoICRhY2N0U2Vzc2lvbklkICkgewogICAgICAgICAgICAgICAgLyogaWYgYXV0b2NsZWFuIGlzIGVuYWJsZWQgKi8KICAgICAgICAgICAgICAgIGlmICggJGF1dG9jbGVhbiApIHsKICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRzdWJzY3JpYmVyICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG5vdCAoIHN0YXJ0cy13aXRoKCBrZXkoICJlc3NtZC1zdWJzY3JpYmVyIiwgJHNlcnZpY2VJZmwgKS9yYWRpdXMtYWNjb3VudGluZy1pZCwgJGFjY3RTZXNzaW9uSWQgKSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRkZWxldGVTZXNzaW9uID0gdHJ1ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLyogZGVsZXRlIHNlc3Npb24gaWYgbm8gQWNjb3VudGluZy1TZXNzaW9uLUlkIGlzIHByZXNlbnQgKi8KICAgICAgICAgICAgICAgIHNldCAkZGVsZXRlU2Vzc2lvbiA9IHRydWUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKiAuLi4gYXV0b2NsZWFuICovCgogICAgICAgICAgICAvKiBnZW5lcmF0ZSB4bm06d2FybmluZyBpZiBkZWFjdGl2YXRlIGZsYWcgaXMgVFJVRSAqLwogICAgICAgICAgICBpZiAoICRzZXJ2aWNlRGVhY3RpdmF0ZSB8fCAkZGVsZXRlU2Vzc2lvbiApIHsKCiAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VTdHJpbmcgPSBkYXRhWyBuYW1lID09ICJTZXJ2aWNlLVN0cmluZyIgXS92YWx1ZTsKICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VTdHJpbmcgKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlTmFtZSA9IHN1YnN0cmluZy1iZWZvcmUoICRzZXJ2aWNlU3RyaW5nLCAiKCIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHNldCAkc2VydmljZUFucFRhZyA9IGRhdGFbIG5hbWUgPT0gIkFOUC1UYWciIF0vdmFsdWU7CgogICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlSWZsT2xkTWFjcm8gPSBkYXRhWyBuYW1lID09ICJTZXJ2aWNlLUlmbC1PTEQiIF0vdmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlSWZsT2xkTWFjcm8gKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlSWZsT2xkID0gJHNlcnZpY2VJZmxPbGRNYWNybzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VBbnBUYWcgJiYgJHNlcnZpY2VJZmxPbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZURlYWN0aXZhdGUgJiYgJHNlcnZpY2VBY3RpdmF0ZSAmJiAkc2VydmljZURlYWN0aXZhdGVJZCAmJiAoICRzZXJ2aWNlSWZsID09ICRzZXJ2aWNlSWZsT2xkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGdlbmVyYXRlIHhubTp3YXJuaW5nICovCiAgICAgICAgICAgICAgICAgICAgICAgIDx4bm06d2FybmluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1lc3NhZ2U+ICJTRVJWSUNFLUFDVElWQVRFLCIgXyAkbGluZUlkIF8gIiwiIF8gJHNlcnZpY2VBbnBUYWcgXyAiLCIgXyAkc2VydmljZVZsYW4gXyAiLCIgXyAkc2VydmljZUlmbCBfICIsIiBfICRzZXJ2aWNlTmFtZSBfICIsIiBfICRjYWNoZUlkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8qIGdlbmVyYXRlIHhubTp3YXJuaW5nICovCiAgICAgICAgICAgICAgICAgICAgaWYoICRzZXJ2aWNlRGVhY3RpdmF0ZUNhdXNlICkgewogICAgICAgICAgICAgICAgICAgICAgICA8eG5tOndhcm5pbmc+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXNzYWdlPiAiU0VSVklDRS1ERS1BQ1RJVkFURSwiIF8gJGxpbmVJZCBfICIsIiBfICRzZXJ2aWNlQW5wVGFnIF8gIiwiIF8gJHNlcnZpY2VWbGFuIF8gIiwiIF8gJHNlcnZpY2VJZmxPbGQgXyAiLCIgXyAkc2VydmljZU5hbWUgXyAiLCIgXyAkc2VydmljZURlYWN0aXZhdGVDYXVzZSBfICIsIiBfICRzZXJ2aWNlRGVhY3RpdmF0ZVNlc3Npb25JZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx4bm06d2FybmluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1lc3NhZ2U+ICJTRVJWSUNFLURFLUFDVElWQVRFLCIgXyAkbGluZUlkIF8gIiwiIF8gJHNlcnZpY2VBbnBUYWcgXyAiLCIgXyAkc2VydmljZVZsYW4gXyAiLCIgXyAkc2VydmljZUlmbE9sZCBfICIsIiBfICRzZXJ2aWNlTmFtZSBfICIsIiBfICRzZXJ2aWNlRGVhY3RpdmF0ZVNlc3Npb25JZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogZGVsZXRlIHNlcnZpY2UgY29uZmlndXJhdGlvbiBvbmx5IGlmIGRlYWN0aXZhdGUgZmxhZyBpcyB0cnVlIHVuZCBhY3RpdmF0ZSBmbGFnIGlzIGZhbHNlICovCiAgICAgICAgICAgIGlmICggJGRlbGV0ZVNlc3Npb24gfHwgKCAkc2VydmljZURlYWN0aXZhdGUgJiYgJHNlcnZpY2VEZWFjdGl2YXRlSWQgJiYgKCAkc2VydmljZUlmbCA9PSAkc2VydmljZUlmbE9sZCApICkgKSB7CgogICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlUmVtb3ZlQ291bnRlciA9ICRzZXJ2aWNlUmVtb3ZlQ291bnRlciArIDE7CgogICAgICAgICAgICAgICAgLyogaWYgc2VydmljZSBkZWxldGVkIGJ5IGF1dG9jbGVhbiAqLwogICAgICAgICAgICAgICAgaWYgKCBub3QoICRzZXJ2aWNlRGVhY3RpdmF0ZSApICkgewoKICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VTdHJpbmcgPSBkYXRhWyBuYW1lID09ICJTZXJ2aWNlLVN0cmluZyIgXS92YWx1ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlU3RyaW5nICkgewogICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VOYW1lID0gc3Vic3RyaW5nLWJlZm9yZSggJHNlcnZpY2VTdHJpbmcsICIoIiApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLyogd3JpdGUgdG8gc3lzbG9nICovCiAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6c3lzbG9nICggInVzZXIuZXJyb3IiLCAiTGluZS1JZDogIiBfICRsaW5lSWQgXyAiIFZMQU46ICIgXyAkc2VydmljZVZsYW4gXyAiIC0gZGVhY3RpdmF0ZSAiIF8gJHNlcnZpY2VOYW1lIF8gIiBzZXJ2aWNlIGJlY2F1c2Ugb2YgbWlzc2luZyBjb250cm9sIHNlc3Npb24iICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvKiBkZWxldGUgYXBwbHktbWFjcm8gKi8KICAgICAgICAgICAgICAgIDxjaGFuZ2U+IHsKICAgICAgICAgICAgICAgICAgICA8Z3JvdXBzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiaWNlYWFhLWR5bmFtaWMiOwogICAgICAgICAgICAgICAgICAgICAgICA8YXBwbHktbWFjcm8gZGVsZXRlPSJkZWxldGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gLi9uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlQ291bnRlciA9ICRzZXJ2aWNlQ291bnRlciArIDE7CgogICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlSWZsUGFydHMgPSBqY3M6c3BsaXQoICJbWy5wZXJpb2QuXV0iLCAkc2VydmljZUlmbCApOwogICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlSWZkID0gJHNlcnZpY2VJZmxQYXJ0c1sxXTsKICAgICAgICAgICAgICAgIHZhciAkc2VydmljZVVuaXQgPSAkc2VydmljZUlmbFBhcnRzWzJdOwoKICAgICAgICAgICAgICAgIC8qIHJlYWQgc2VydmljZSBjb25maWd1cmF0aW9uIGZpbGUgY2FjaGUgaW4gdG1wZnMgKi8KICAgICAgICAgICAgICAgIHZhciAkc2VydmljZUZpbGVOYW1lID0gJGNhY2hlSWQgXyAiXyIgXyAkc2VydmljZVVuaXQ7CiAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VGaWxlUGF0aCA9ICIvbWZzL3Zhci90bXAvIiBfICRzZXJ2aWNlRmlsZU5hbWU7CiAgICAgICAgICAgICAgICBtdmFyICRzZXJ2aWNlQ29uZmlndXJhdGlvbkZpbGUgPSA8bnVsbD47CiAgICAgICAgICAgICAgICBpZiAoICR0bXBmcyApIHsKICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VDb25maWd1cmF0aW9uRmlsZSA9IGRvY3VtZW50KCAkc2VydmljZUZpbGVQYXRoICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZUFjdGl2YXRlIHx8ICRzZXJ2aWNlRGVhY3RpdmF0ZSB8fCBqY3M6ZW1wdHkoICRzZXJ2aWNlQ29uZmlndXJhdGlvbkZpbGUvc2VydmljZS1jb25maWd1cmF0aW9uLyogKSB8fCAkYXV0b2NsZWFuICkgewoKICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VHZW5lcmF0ZUNvdW50ZXIgPSAkc2VydmljZUdlbmVyYXRlQ291bnRlciArIDE7CgogICAgICAgICAgICAgICAgICAgIHZhciAkc2VydmljZVN0cmluZyA9IGRhdGFbIG5hbWUgPT0gIlNlcnZpY2UtU3RyaW5nIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgIHNldCAkc2VydmljZU5hbWUgPSBzdWJzdHJpbmctYmVmb3JlKCAkc2VydmljZVN0cmluZywgIigiICk7CiAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlQW5wVGFnID0gZGF0YVsgbmFtZSA9PSAiQU5QLVRhZyIgXS92YWx1ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgJGFjaSA9IGRhdGFbIG5hbWUgPT0gIkFDSSIgXS92YWx1ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgJG5hc1BvcnRJZCA9IGRhdGFbIG5hbWUgPT0gIk5BUy1Qb3J0LUlkIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgIHZhciAkdGltZSA9IGRhdGFbIG5hbWUgPT0gIlRpbWUiIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlRGVzYyA9IGRhdGFbIG5hbWUgPT0gIlNEc2NyIiBdL3ZhbHVlOwoKICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlQWN0aXZhdGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGdlbmVyYXRlIHhubTp3YXJuaW5nICovCiAgICAgICAgICAgICAgICAgICAgICAgIDx4bm06d2FybmluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1lc3NhZ2U+ICJTRVJWSUNFLUFDVElWQVRFLCIgXyAkbGluZUlkIF8gIiwiIF8gJHNlcnZpY2VBbnBUYWcgXyAiLCIgXyAkc2VydmljZVZsYW4gXyAiLCIgXyAkc2VydmljZUlmbCBfICIsIiBfICRzZXJ2aWNlTmFtZSBfICIsIiBfICRjYWNoZUlkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDxjaGFuZ2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3Vwcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJpY2VhYWEtZHluYW1pYyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXBwbHktbWFjcm8+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gLi9uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQWN0aXZhdGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICJGQUxTRSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiRGVhY3RpdmF0ZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gIkZBTFNFIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlNlcnZpY2UtSWZsLU9MRCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAkc2VydmljZUlmbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICRzZXJ2aWNlRGVhY3RpdmF0ZUNhdXNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0YSBkZWx0ZT0iZGVsZXRlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBY2N0LVRlcm1pbmF0ZS1DYXVzZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBjaGFuZ2UgKi8KCiAgICAgICAgICAgICAgICAgICAgLyogTkdDT0NPIC4uLiAqLwogICAgICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VOYW1lID09ICJuZ2NvY28iIHx8ICRzZXJ2aWNlTmFtZSA9PSAiTkdDT0NPIiApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGdlbmVyYXRlIGRlZmF1bHQgb2FtTUEgaWYgbm90IHByb3ZpZGVkIGluIGNvbmZpZ3VyYXRpb24gbWFjcm8gKi8KICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkb2FtTUEgPSAkbGluZUlkIF8gIl8iIF8gJHNlcnZpY2VWbGFuOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGFbIG5hbWUgPT0gIm9hbU1BIiBdL3ZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkb2FtTUEgID0gZGF0YVsgbmFtZSA9PSAib2FtTUEiIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdjRBID0gamNzOnNwbGl0ICggIiwiLCBkYXRhWyBuYW1lID09ICJ2NEEiIF0vdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR2NkEgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gInY2QSIgXS92YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJFJ0djQgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIlJ0djQiIF0vdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRSdHY2ID0gamNzOnNwbGl0ICggIiwiLCBkYXRhWyBuYW1lID09ICJSdHY2IiBdL3ZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdjRUcmEgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gInY0VHJhIiBdL3ZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdjZUcmEgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gInY2VHJhIiBdL3ZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkTG8wdjQgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkxvMHY0IiBdL3ZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkTG8wdjYgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkxvMHY2IiBdL3ZhbHVlICk7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHY0TmggPSBqY3M6cGFyc2UtaXAoICR2NFRyYVsyXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJHY2TmggPSBqY3M6cGFyc2UtaXAoICR2NlRyYVsyXSk7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHY2TmhMTCA9ICR2Nk5oOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICRMbzB2NlsxXSApID4gNiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkdjZOaCA9IGpjczpwYXJzZS1pcCAoICRMbzB2NlsxXSApWzFdOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBRb1MgUGFyYW1ldGVyICovCiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJHNlcnZpY2VCdyA9IGRhdGFbIG5hbWUgPT0gIlNlcnZpY2UtQlciIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJHFvc0J3TEwgPSBkYXRhWyBuYW1lID0gIkJXLUxMIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRxb3NCd0xEID0gZGF0YVsgbmFtZSA9ICJCVy1MRCIgXS92YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zQndWTyA9IGRhdGFbIG5hbWUgPSAiQlctVk8iIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJHFvc0J3QkUgPSBkYXRhWyBuYW1lID0gIkJXLUJFIiBdL3ZhbHVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zQndDdHJsID0gMTAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkZHJvcFByb2ZpbGVCRSA9ICJSRUQtQmVzdEVmZm9ydCI7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJGRyb3BQcm9maWxlTExsb3cgPSAiUkVELUxvd0xvc3MiOwogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRkcm9wUHJvZmlsZUxMaGlnaCA9ICJSRUQtTG93TG9zcyI7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJGRyb3BQcm9maWxlTEQgPSAiUkVELUxvd0RlbGF5IjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIE9wdGltaXphdGlvbiBQcm9maWxlIC4uLiAqLwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRvcHRwcm8gPSBkYXRhWyBuYW1lID09ICJvcHRwcm8iIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJG9wdHByb05hbWUgPSAiIjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RhcnRzLXdpdGgoICRvcHRwcm8sICJvcHQiICkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRvcHRwcm9OYW1lID0gIi0iIF8gJG9wdHBybzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJG9wdHByb0RhdGEgOj0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAuLi9hcHBseS1tYWNyb1sgbmFtZSA9PSAkb3B0cHJvIF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiU2VydmljZS1CVyIgXS92YWx1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VCdyA9ICRvcHRwcm9EYXRhLy9kYXRhWyBuYW1lID09ICJTZXJ2aWNlLUJXIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiQlctTEwiIF0vdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd0xMID0gJG9wdHByb0RhdGEvL2RhdGFbIG5hbWUgPT0gIkJXLUxMIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiQlctTEQiIF0vdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd0xEID0gJG9wdHByb0RhdGEvL2RhdGFbIG5hbWUgPT0gIkJXLUxEIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiQlctVk8iIF0vdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd1ZPID0gJG9wdHByb0RhdGEvL2RhdGFbIG5hbWUgPT0gIkJXLVZPIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiQlctQkUiIF0vdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd0JFID0gJG9wdHByb0RhdGEvL2RhdGFbIG5hbWUgPT0gIkJXLUJFIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiRHJvcC1Qcm9maWxlLUJFIiBdL3ZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkZHJvcFByb2ZpbGVCRSA9ICRvcHRwcm9EYXRhLy9kYXRhWyBuYW1lID09ICJEcm9wLVByb2ZpbGUtQkUiIF0vdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRvcHRwcm9EYXRhLy9kYXRhWyBuYW1lID09ICJEcm9wLVByb2ZpbGUtTEwtTG93IiBdL3ZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkZHJvcFByb2ZpbGVMTGxvdyA9ICRvcHRwcm9EYXRhLy9kYXRhWyBuYW1lID09ICJEcm9wLVByb2ZpbGUtTEwtTG93IiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiRHJvcC1Qcm9maWxlLUxMLUhpZ2giIF0vdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRkcm9wUHJvZmlsZUxMaGlnaCA9ICRvcHRwcm9EYXRhLy9kYXRhWyBuYW1lID09ICJEcm9wLVByb2ZpbGUtTEwtSGlnaCIgXS92YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJG9wdHByb0RhdGEvL2RhdGFbIG5hbWUgPT0gIkRyb3AtUHJvZmlsZS1MRCIgXS92YWx1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGRyb3BQcm9maWxlTEQgPSAkb3B0cHJvRGF0YS8vZGF0YVsgbmFtZSA9PSAiRHJvcC1Qcm9maWxlLUxEIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvKiAuLi4gT3B0aW1pemF0aW9uIFByb2ZpbGUgKi8KCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0YXRpYyBDb25maWd1cmF0aW9uIFByb2ZpbGVzIC4uLiAqLwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRmd1Y0SW4gPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkZXdjRpbiIgXS92YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZ3VjRPdXQgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkZXdjRvdXQiIF0vdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRmd1Y2SW4gPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkZXdjZpbiIgXS92YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZ3VjZPdXQgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIkZXdjZvdXQiIF0vdmFsdWUgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIC4uLiBTdGF0aWMgQ29uZmlndXJhdGlvbiBQcm9maWxlcyAqLwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlQndNYml0ID0gJHNlcnZpY2VCdyBkaXYgMTAwMDsKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkc2VydmljZURlbGF5QnVmZmVyUmF0ZSA9IHJvdW5kKCAkc2VydmljZUJ3IGRpdiA1KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZUJ3IDwgMTAwMDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VEZWxheUJ1ZmZlclJhdGUgPSAxMDAwMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHFvc0J3U3VtID0gcm91bmQgKCAkc2VydmljZUJ3ICogMC4wMiApICsgJHFvc0J3Vk8gKyAkcW9zQndMRCArICRxb3NCd0xMICsgJHFvc0J3Q3RybDsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3U3VtID4gJHNlcnZpY2VCdyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkcW9zQndMTCA9IGZsb29yICggJHFvc0J3TEwgLSAoICRxb3NCd1N1bSAtICRzZXJ2aWNlQncgKSBkaXYgKCAkcW9zQndMTCArICRxb3NCd0xEICkgKiAkcW9zQndMTCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd0xEID0gZmxvb3IgKCAkcW9zQndMRCAtICggJHFvc0J3U3VtIC0gJHNlcnZpY2VCdyApIGRpdiAoICRxb3NCd0xMICsgJHFvc0J3TEQgKSAqICRxb3NCd0xEICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBMb3dMb3NzICovCiAgICAgICAgICAgICAgICAgICAgICAgIG12YXIgJHFvc0J3TExwID0gZmxvb3IoICRxb3NCd0xMIGRpdiAkc2VydmljZUJ3ICogMTAwICk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3TExwIDwgMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkcW9zQndMTHAgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHFvc0NsYXNzTEwgOj0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndMTCAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gIi1MTCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBMb3dEZWxheSAqLwogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRxb3NCd0xEcCA9IGZsb29yKCAkcW9zQndMRCBkaXYgJHNlcnZpY2VCdyAqIDEwMCApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRxb3NCd0xEcCA8IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHFvc0J3TERwID0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRxb3NDbGFzc0xEIDo9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3TEQgIT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICItTEQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBRb1MgVm9pY2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zQndWT3AgPSBmbG9vciggJHFvc0J3Vk8gZGl2ICRzZXJ2aWNlQncgKiAxMDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWT3AgPCAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd1ZPcCA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcW9zQ2xhc3NWTyA6PSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRxb3NCd1ZPICE9IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAiLVZPIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPiAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLyogUW9TIEJlc3RFZmZvcnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zQndCRXAgPSBmbG9vciggJHFvc0J3QkUgZGl2ICRzZXJ2aWNlQncgKiAxMDAgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3QkVwIDwgNSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkcW9zQndCRXAgPSA1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NCd0JFID0gcm91bmQoICRzZXJ2aWNlQncgKiA1IGRpdiAxMDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRxb3NDbGFzc0JFIDo9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3QkUgIT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICItQkUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHFvc0J3QkVyID0gcm91bmQoICRzZXJ2aWNlQncgKiAyIGRpdiAxMDAgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBFeGNlc3MgQmFuZHdpdGggKi8KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRxb3NFeEJ3QkVwID0gODA7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcW9zRXhCd0xMcCA9IGZsb29yKCAyMCBkaXYgKCAkcW9zQndMTHAgKyAkcW9zQndMRHAgKSAqICRxb3NCd0xMcCApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHFvc0V4QndMRHAgPSBmbG9vciggMjAgZGl2ICggJHFvc0J3TExwICsgJHFvc0J3TERwICkgKiAkcW9zQndMRHAgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBCdWZmZXIgU2l6ZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRxb3NNc0xMID0gMTUwOyAvKiBtaW5pbXVtIGJ1ZmZlcnNpemUgZm9yIG1lZGl1bS1sb3d8aGlnaCBwcmlvcml0eSBxdWV1ZXMgaXMgNjAgbXMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zTXNMRCA9IDYwOyAvKiBtaW5pbXVtIGJ1ZmZlcnNpemUgZm9yIG1lZGl1bS1sb3d8aGlnaCBwcmlvcml0eSBxdWV1ZXMgaXMgNjAgbXMgKi8KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VCdyA8IDEwMDAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRxb3NNc0xMID0gZmxvb3IoICRxb3NNc0xMICogMTAgZGl2ICRzZXJ2aWNlQndNYml0ICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHFvc01zTEQgPSBmbG9vciggJHFvc01zTEQgKiAxMCBkaXYgJHNlcnZpY2VCd01iaXQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLyogUW9TIEJ1cnN0IFNpemUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkc2VydmljZUJ3QnVyc3QgPSByb3VuZCggJHNlcnZpY2VCdyAqIDAuMDEyNSApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlQndCdXJzdCA8IDIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHNlcnZpY2VCd0J1cnN0ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkcW9zQndWT0J1cnN0ID0gcm91bmQoICRxb3NCd1ZPICogMC4wMTI1ICk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3Vk9CdXJzdCA8IDIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJHFvc0J3Vk9CdXJzdCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBDb25maWcgTmFtZXMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlVENQID0gJHNlcnZpY2VCd01iaXQgXyAiTS1CRSIgXyAkcW9zQndCRSBfICItTEwiIF8gJHFvc0J3TEwgXyAiLUxEIiBfICRxb3NCd0xEIF8iLVZPIiBfICRxb3NCd1ZPIF8gJG9wdHByb05hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc2VydmljZVNjaGVkTWFwID0gIk1BUC1CRSIgXyAkcW9zQndCRSBfICItTEwiIF8gJHFvc0J3TEwgXyAiLUxEIiBfICRxb3NCd0xEIF8gIi1WTyIgXyAkcW9zQndWTyBfICRvcHRwcm9OYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VDbGFzc05hbWUgPSAiQ0xBU1NJRlkiIF8gJHFvc0NsYXNzQkUgXyAkcW9zQ2xhc3NMTCBfICRxb3NDbGFzc0xEIF8gJHFvc0NsYXNzVk87CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBTRVJWSUNFIENPTkZJR1VSQVRJT04gLi4uICovCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2llbnQtY2hhbmdlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VDb25maWd1cmF0aW9uID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2Utc2V0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQgXyAiLSIgXyAkc2VydmljZUFucFRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVuaXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlVW5pdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlSWZkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZXJhcmNoaWNhbC1zY2hlZHVsZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmbGV4aWJsZS12bGFuLXRhZ2dpbmc+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVuY2Fwc3VsYXRpb24+ICJmbGV4aWJsZS1ldGhlcm5ldC1zZXJ2aWNlcyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dW5pdD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVVuaXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGp1bm9zOmNvbW1lbnQ+ICJOR0NPQ08gTGluZUlkOiAiIF8gJGxpbmVJZCBfICIgVGltZTogIiBfICR0aW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZXNjcmlwdGlvbj4gJHNlcnZpY2VEZXNjOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VBbnBUYWcgPT0gIk5BIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZsYW4taWQ+ICRzZXJ2aWNlVmxhbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmxhbi10YWdzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3V0ZXI+ICRzZXJ2aWNlQW5wVGFnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlubmVyPiAkc2VydmljZVZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndMTCA9PSAwIHx8ICRxb3NCd0xEID09IDAgfHwgJHFvc0J3Vk8gPT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG91dHB1dD4gIlJFQ0xBU1NJRlkiIF8gJHFvc0NsYXNzQkUgXyAkcW9zQ2xhc3NMTCBfICRxb3NDbGFzc0xEIF8gJHFvc0NsYXNzVk87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5ldD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG10dT4gIjE1MDAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJwZi1jaGVjaz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHJlc3M+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHY0VHJhWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dC1saXN0PiAiUE9MSUNFLSIgXyAkc2VydmljZUJ3IF8gIi1Wb2ljZS0iIF8gJHFvc0J3Vk8gXyAiLXY0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRmd1Y0SW4gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0LWxpc3Q+IC47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dC1saXN0PiAiYWNjZXB0LWFsbC12NCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkZndWNE91dCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG91dHB1dC1saXN0PiAuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5ldDY+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtdHU+ICIxNTAwIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxycGYtY2hlY2s+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyZXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICR2NlRyYVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQtbGlzdD4gIlBPTElDRS0iIF8gJHNlcnZpY2VCdyBfICItVm9pY2UtIiBfICRxb3NCd1ZPIF8gIi12NiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkZndWNkluICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQtbGlzdD4gLjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0LWxpc3Q+ICJhY2NlcHQtYWxsLXY2IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRmd1Y2T3V0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3V0cHV0LWxpc3Q+IC47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBpbnRlcmZhY2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBpbnRlcmZhY2VzICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkdjZBWzFdICkgPiA2IHx8IHN0cmluZy1sZW5ndGgoICR2NEFbMV0gKSA+IDYgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoICRMbzB2NFsxXSApID4gNiB8fCBzdHJpbmctbGVuZ3RoKCAkTG8wdjZbMV0gKSA+IDYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRpbmctb3B0aW9ucz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkdjZBICkgPiA2IHx8IHN0cmluZy1sZW5ndGgoICRMbzB2NlsxXSApID4gNiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmliPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiaW5ldDYuMCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0aWM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElQdjYgTG9vcGJhY2sgQWRkcmVzcyAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkTG8wdjZbMV0gKSA+IDYgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkTG8wdjZbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWFsaWZpZWQtbmV4dC1ob3A+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkdjZOaExMOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gJHNlcnZpY2VJZmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldHJpYy12YWx1ZT4gIjEiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuby1yZWFkdmVydGlzZT47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+IGpjczpwYXJzZS1pcCAoICR2Nk5oIF8gJy82NCcgKVs0XSBfICIvNjQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlzY2FyZD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWc+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRyaWMtdmFsdWU+ICIxIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEN1c3RvbWVyIE5ldHdvcmtzICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN0cmluZy1sZW5ndGgoICR2NkEgKSA+IDYgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkY291bnRlciA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkdjZBICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdmFyICR0YWcgPSAkUnR2NlskY291bnRlcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHRhZyApIDwgMSApIHsgc2V0ICR0YWcgPSAxOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+IC47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cXVhbGlmaWVkLW5leHQtaG9wPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICR2Nk5oOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHRhZyA9PSAiNjUiIHx8ICR0YWcgPT0gIjY2IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZlcmVuY2U+ICI3IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gJHNlcnZpY2VJZmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVzb2x2ZT47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFnPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldHJpYy12YWx1ZT4gJHRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgJGNvdW50ZXIgPSAkY291bnRlciArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkdjRBICkgPiA2ICB8fCBzdHJpbmctbGVuZ3RoKCAkTG8wdjRbMV0gKSA+IDYgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRpYz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJUHY0IExvb3BiYWNrIEFkZHJlc3MgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkTG8wdjRbMV0gKSA+IDYgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRMbzB2NFsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWFsaWZpZWQtbmV4dC1ob3A+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHY0Tmg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFnPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldHJpYy12YWx1ZT4gIjEiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ3VzdG9tZXIgTmV0d29ya3MgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoKCAkdjRBICkgPiA2ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkY291bnRlciA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICR2NEEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXZhciAkdGFnID0gJFJ0djRbJGNvdW50ZXJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJHRhZyApIDwgMSApIHsgc2V0ICR0YWcgPSAxOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cXVhbGlmaWVkLW5leHQtaG9wPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHY0Tmg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICR0YWcgPT0gIjY1IiB8fCAkdGFnID09ICI2NiIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZlcmVuY2U+ICI3IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFnPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0cmljLXZhbHVlPiAkdGFnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCAkY291bnRlciA9ICRjb3VudGVyICsgMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gcm91dGluZy1vcHRpb25zICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm90b2NvbHM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9hbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGV0aGVybmV0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbm5lY3Rpdml0eS1mYXVsdC1tYW5hZ2VtZW50PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYWludGVuYW5jZS1kb21haW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQk5HIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYWludGVuYW5jZS1hc3NvY2lhdGlvbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkb2FtTUE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNob3J0LW5hbWUtZm9ybWF0PiAiY2hhcmFjdGVyLXN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRpbnVpdHktY2hlY2s+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVydmFsPiAiMXMiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWVwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiMzIwIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAkc2VydmljZUlmbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHk+ICI2IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlbW90ZS1tZXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiMTAwIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY3Rpb24tcHJvZmlsZT4gIkNGTS1DQy1QUk9GSUxFIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZXRlY3QtbG9jPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93ZXN0LXByaW9yaXR5LWRlZmVjdD4gImFsbC1kZWZlY3RzIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvbGljZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFsbD4gIkNGTS1QUk9URUNUSU9OIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vKiAuLi4gb2FtICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCAoICRhY2kgKSA+IDIgJiYgbm90KCAkc2VydmljZUFucFRhZyA9PSAiTkEiICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YW5jcD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2Utc2V0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQgXyAiLSIgXyAkc2VydmljZUFucFRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY2Nlc3MtaWRlbnRpZmllcj4gJGFjaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIGFuY3AgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIHByb3RvY29scyAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjbGFzcy1vZi1zZXJ2aWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFmZmljLWNvbnRyb2wtcHJvZmlsZXM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVRDUDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXItbWFwPiAkc2VydmljZVNjaGVkTWFwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNoYXBpbmctcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyYXRlPiAkc2VydmljZUJ3IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGF5LWJ1ZmZlci1yYXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdGU+ICRzZXJ2aWNlRGVsYXlCdWZmZXJSYXRlIF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlLXNldD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZUlmZCBfICItIiBfICRzZXJ2aWNlQW5wVGFnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQtdHJhZmZpYy1jb250cm9sLXByb2ZpbGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZUFucFRhZyA9PSAiTkEiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2ZpbGUtbmFtZT4gIklGU0VULURJUkVDVCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZmlsZS1uYW1lPiAiSUZTRVQtQU5DUCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkaW5ncmVzc1F1ZXVpbmcgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dC10cmFmZmljLWNvbnRyb2wtcHJvZmlsZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2ZpbGUtbmFtZT4gIklGU0VULURJUkVDVCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlSWZkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bml0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVVuaXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJGluZ3Jlc3NRdWV1aW5nICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0LXRyYWZmaWMtY29udHJvbC1wcm9maWxlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2ZpbGUtbmFtZT4gIkFDQ1QtSU5HUkVTUyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQtdHJhZmZpYy1jb250cm9sLXByb2ZpbGUgaW5hY3RpdmU9ImluYWN0aXZlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm9maWxlLW5hbWU+ICJBQ0NULUlOR1JFU1MiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQtdHJhZmZpYy1jb250cm9sLXByb2ZpbGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm9maWxlLW5hbWU+ICRzZXJ2aWNlVENQOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjbGFzc2lmaWVycz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRzY3AtaXB2Nj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZUNsYXNzTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbmV0LXByZWNlZGVuY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xhc3NpZmllci1uYW1lPiAkc2VydmljZUNsYXNzTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZWVlLTgwMi4xPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsYXNzaWZpZXItbmFtZT4gIkNMQVNTSUZZLUJFLUNUIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmxhbi10YWc+ICJvdXRlciI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJld3JpdGUtcnVsZXM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkc2NwLWlwdjY+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlJFV1JJVEUtQkUtTEwtTEQtVk8tQ1QiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGllZWUtODAyLjE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmV3cml0ZS1ydWxlLW5hbWU+ICJSRVdSSVRFLUJFLUxMLUxELVZPLUNUIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmxhbi10YWc+ICJvdXRlci1hbmQtaW5uZXIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRzY3A+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlJFV1JJVEUtQkUtTEwtTEQtVk8tQ1QiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXItbWFwcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlU2NoZWRNYXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiQmVzdEVmZm9ydCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjaGVkdWxlcj4gIkJlc3RFZmZvcnQtIiBfICRxb3NCd0JFIF8gIi1QLSIgXyAkcW9zQndCRXAgXyAiLUUtIiBfICRxb3NFeEJ3QkVwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndMTCAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiTG93TG9zcyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXI+ICJMb3dMb3NzLSIgXyAkcW9zQndMTCBfICItUC0iIF8gJHFvc0J3TExwIF8gIi1FLSIgXyAkcW9zRXhCd0xMcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRxb3NCd0xEICE9IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcndhcmRpbmctY2xhc3M+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJMb3dEZWxheSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXI+ICJMb3dEZWxheS0iIF8gJHFvc0J3TEQgXyAiLVAtIiBfICRxb3NCd0xEcCBfICItRS0iIF8gJHFvc0V4QndMRHA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWTyAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiVm9pY2UiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NoZWR1bGVyPiAiVm9pY2UtIiBfICRxb3NCd1ZPOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJDb250cm9sIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NoZWR1bGVyPiAiQ29udHJvbC0xMDBLIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NoZWR1bGVycz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJCZXN0RWZmb3J0LSIgXyAkcW9zQndCRSBfICItUC0iIF8gJHFvc0J3QkVwIF8gIi1FLSIgXyAkcW9zRXhCd0JFcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc21pdC1yYXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdGU+ICRxb3NCd0JFciBfICJrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleGNlc3MtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJjZW50PiAkcW9zRXhCd0JFcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidWZmZXItc2l6ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJjZW50PiAkcW9zQndCRXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHk+ICJtZWRpdW0taGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlLW1hcD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3NzLXByaW9yaXR5PiAiYW55IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvdG9jb2w+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkcm9wLXByb2ZpbGU+ICRkcm9wUHJvZmlsZUJFOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3TEwgIT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXJzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJMb3dMb3NzLSIgXyAkcW9zQndMTCBfICItUC0iIF8gJHFvc0J3TExwIF8gIi1FLSIgXyAkcW9zRXhCd0xMcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNtaXQtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF0ZT4gJHFvc0J3TEwgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleGNlc3MtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGVyY2VudD4gJHFvc0V4QndMTHA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidWZmZXItc2l6ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcG9yYWw+ICRxb3NNc0xMIF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHk+ICJtZWRpdW0taGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZS1tYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvc3MtcHJpb3JpdHk+ICJsb3ciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvdG9jb2w+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlPiAkZHJvcFByb2ZpbGVMTGxvdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZS1tYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvc3MtcHJpb3JpdHk+ICJoaWdoIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3RvY29sPiAiYW55IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZT4gJGRyb3BQcm9maWxlTExoaWdoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlLW1hcD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG9zcy1wcmlvcml0eT4gIm1lZGl1bS1sb3ciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvdG9jb2w+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlPiAkZHJvcFByb2ZpbGVMTGxvdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZS1tYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvc3MtcHJpb3JpdHk+ICJtZWRpdW0taGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm90b2NvbD4gImFueSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkcm9wLXByb2ZpbGU+ICRkcm9wUHJvZmlsZUxMaGlnaDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndMRCAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjaGVkdWxlcnM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkxvd0RlbGF5LSIgXyAkcW9zQndMRCBfICItUC0iIF8gJHFvc0J3TERwIF8gIi1FLSIgXyAkcW9zRXhCd0xEcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNtaXQtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF0ZT4gJHFvc0J3TEQgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleGNlc3MtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGVyY2VudD4gJHFvc0V4QndMRHA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidWZmZXItc2l6ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcG9yYWw+ICRxb3NNc0xEIF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHk+ICJtZWRpdW0taGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZS1tYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvc3MtcHJpb3JpdHk+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvdG9jb2w+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlPiAkZHJvcFByb2ZpbGVMRDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWTyAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjaGVkdWxlcnM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlZvaWNlLSIgXyAkcW9zQndWTzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNtaXQtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF0ZT4gJHFvc0J3Vk8gXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyYXRlLWxpbWl0PjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1ZmZlci1zaXplPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gYnVmZmVyc2l6ZSBmb3IgaGlnaCBwcmlvcml0eSBxdWV1ZXMgaXMgMzAgbXMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBvcmFsPiAiMzBrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByaW9yaXR5PiAiaGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBjbGFzcy1vZi1zZXJ2aWNlICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpcmV3YWxsPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3TEwgPT0gMCB8fCAkcW9zQndMRCA9PSAwIHx8ICRxb3NCd1ZPID09IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFueT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsdGVyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlJFQ0xBU1NJRlkiIF8gJHFvc0NsYXNzQkUgXyAkcW9zQ2xhc3NMTCBfICRxb3NDbGFzc0xEIF8gJHFvc0NsYXNzVk87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVybT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiVW5zdWJzY3JpYmVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZnJvbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHFvc0J3TEwgPT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcndhcmRpbmctY2xhc3M+ICJMb3dMb3NzIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndMRCA9PSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gIkxvd0RlbGF5IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWTyA9PSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gIlZvaWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiQmVzdEVmZm9ydCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY2NlcHQ+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXJtPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJTdWJzY3JpYmVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWNjZXB0PjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5ldD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJQT0xJQ0UtIiBfICRzZXJ2aWNlQncgXyAiLVZvaWNlLSIgXyAkcW9zQndWTyBfICItdjQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlLXNwZWNpZmljPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWTyAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlcm0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlZvaWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZnJvbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gIlZvaWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvbGljZXI+ICJQT0xJQ0VSLSIgXyAkcW9zQndWTzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlcm0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiUHJlbWl1bSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZnJvbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiVm9pY2UiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiTG93RGVsYXkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiTG93TG9zcyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWVyYXJjaGljYWwtcG9saWNlcj4gIkgtUE9MSUNFUi0wMS0iIF8gJHNlcnZpY2VCdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yY2UtcHJlbWl1bT47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVybT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBZ2dyZWdhdGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGllcmFyY2hpY2FsLXBvbGljZXI+ICJILVBPTElDRVItMDItIiBfICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbmV0Nj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJQT0xJQ0UtIiBfICRzZXJ2aWNlQncgXyAiLVZvaWNlLSIgXyAkcW9zQndWTyBfICItdjYiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlLXNwZWNpZmljPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkcW9zQndWTyAhPSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlcm0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIlZvaWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZnJvbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gIlZvaWNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvbGljZXI+ICJQT0xJQ0VSLSIgXyAkcW9zQndWTzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlcm0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiUHJlbWl1bSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZnJvbT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiVm9pY2UiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiTG93RGVsYXkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3J3YXJkaW5nLWNsYXNzPiAiTG93TG9zcyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWVyYXJjaGljYWwtcG9saWNlcj4gIkgtUE9MSUNFUi0wMS0iIF8gJHNlcnZpY2VCdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yY2UtcHJlbWl1bT47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVybT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBZ2dyZWdhdGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGllcmFyY2hpY2FsLXBvbGljZXI+ICJILVBPTElDRVItMDItIiBfICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5leHQ+ICJ0ZXJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRxb3NCd1ZPICE9IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9saWNlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAiUE9MSUNFUi0iIF8gJHFvc0J3Vk87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvZ2ljYWwtaW50ZXJmYWNlLXBvbGljZXI+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZi1leGNlZWRpbmc+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJhbmR3aWR0aC1saW1pdD4gJHFvc0J3Vk8gXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXJzdC1zaXplLWxpbWl0PiAkcW9zQndWT0J1cnN0IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlzY2FyZD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWVyYXJjaGljYWwtcG9saWNlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJILVBPTElDRVItMDEtIiBfICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG9naWNhbC1pbnRlcmZhY2UtcG9saWNlcj47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWdncmVnYXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmLWV4Y2VlZGluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmFuZHdpZHRoLWxpbWl0PiAkc2VydmljZUJ3IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnVyc3Qtc2l6ZS1saW1pdD4gJHNlcnZpY2VCd0J1cnN0IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlzY2FyZD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZW1pdW0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWYtZXhjZWVkaW5nPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiYW5kd2lkdGgtbGltaXQ+ICRzZXJ2aWNlQncgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXJzdC1zaXplLWxpbWl0PiAkc2VydmljZUJ3QnVyc3QgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNjYXJkPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZXJhcmNoaWNhbC1wb2xpY2VyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkgtUE9MSUNFUi0wMi0iIF8gJHNlcnZpY2VCdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2dpY2FsLWludGVyZmFjZS1wb2xpY2VyPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZ2dyZWdhdGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWYtZXhjZWVkaW5nPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiYW5kd2lkdGgtbGltaXQ+ICRzZXJ2aWNlQncgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXJzdC1zaXplLWxpbWl0PiAkc2VydmljZUJ3QnVyc3QgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNjYXJkPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlbWl1bT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZi1leGNlZWRpbmc+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJhbmR3aWR0aC1saW1pdD4gJHNlcnZpY2VCdyBfICJrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1cnN0LXNpemUtbGltaXQ+ICRzZXJ2aWNlQndCdXJzdCBfICJrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpc2NhcmQ+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIGZpcmV3YWxsICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAvKiAuLi4gU0VSVklDRSBDT05GSUdVUkFUSU9OICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICR0bXBmcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRzZXJ2aWNlRmlsZVBhdGg+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2UtY29uZmlndXJhdGlvbj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkc2VydmljZUNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzZXJ2aWNlQ29uZmlndXJhdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gdHJhbnNpZW50LWNoYW5nZSAqLwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8qIC4uLiBOR0NPQ08gKi8KICAgICAgICAgICAgICAgICAgICAgICAgLyogREhDUFJFTEFZIC4uLiAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlTmFtZSA9PSAiZGhjcHJlbGF5IiB8fCAkc2VydmljZU5hbWUgPT0gIkRIQ1BSRUxBWSIgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlQncgPSBkYXRhWyBuYW1lID09ICJTZXJ2aWNlLUJXIiBdL3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlQndNYml0ID0gJHNlcnZpY2VCdyBkaXYgMTAwMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdmFyICRzZXJ2aWNlQndCdXJzdCA9IHJvdW5kKCAkc2VydmljZUJ3ICogMC4wMTI1ICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRzZXJ2aWNlQndCdXJzdCA8IDIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0ICRzZXJ2aWNlQndCdXJzdCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRhY2Nlc3NJZCA9IGRhdGFbIG5hbWUgPT0gImFjY2Vzcy1pZCIgXS92YWx1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRoY3BTZXJ2ZXIgPSBqY3M6c3BsaXQgKCAiLCIsIGRhdGFbIG5hbWUgPT0gIlNlcnZlciIgXS92YWx1ZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFFvUyBDb25maWcgTmFtZXMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcW9zQndCRSA9IGZsb29yKCAkc2VydmljZUJ3ICogMC4wNSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRxb3NCd0NUID0gZmxvb3IoICRzZXJ2aWNlQncgKiAwLjk1ICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VUQ1AgPSAkc2VydmljZUJ3IF8gIkstQkUiIF8gJHFvc0J3QkUgXyAiUDUtQ1QiIF8gJHFvc0J3Q1QgIF8gIlA5NSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VTY2hlZE1hcCA9ICJNQVAtQkUiIF8gJHFvc0J3QkUgXyAiUDUtQ1QiIF8gJHFvc0J3Q1QgIF8gIlA5NSI7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU0VSVklDRSBDT05GSUdVUkFUSU9OIC4uLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zaWVudC1jaGFuZ2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHNlcnZpY2VDb25maWd1cmF0aW9uID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1zZXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQgXyAiLSIgXyAkc2VydmljZUFucFRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZUlmZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVuaXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVVuaXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlSWZkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWVyYXJjaGljYWwtc2NoZWR1bGVyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmbGV4aWJsZS12bGFuLXRhZ2dpbmc+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbmNhcHN1bGF0aW9uPiAiZmxleGlibGUtZXRoZXJuZXQtc2VydmljZXMiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bml0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVVuaXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxqdW5vczpjb21tZW50PiAiREhDUFJFTEFZIERlc2NyaXB0aW9uOiAiIF8gJHNlcnZpY2VEZXNjIF8gIiBUaW1lOiAiIF8gJHRpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RyaW5nLWxlbmd0aCggJGFjY2Vzc0lkICkgPiAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlc2NyaXB0aW9uPiAkYWNjZXNzSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVzY3JpcHRpb24+ICRsaW5lSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VydmljZUFucFRhZyA9PSAiTkEiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZsYW4taWQ+ICRzZXJ2aWNlVmxhbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2bGFuLXRhZ3M+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3V0ZXI+ICRzZXJ2aWNlQW5wVGFnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbm5lcj4gJHNlcnZpY2VWbGFuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbmV0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJwZi1jaGVjaz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFpbC1maWx0ZXI+ICJkaGNwcmVsYXktcnBmLWFsbG93LWRoY3AtYm9vdHAtYWNjZXB0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwPiAiMyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXItbmFtZT4gIlBPTElDRS0iIF8gJHNlcnZpY2VCdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXItbmFtZT4gImRoY3ByZWxheS1lZ3Jlc3MiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dW5udW1iZXJlZC1hZGRyZXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2U+ICJsbzAuMyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gaW50ZXJmYWNlICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIGludGVyZmFjZXMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoICggJGFjaSApID4gMiAmJiBub3QoICRzZXJ2aWNlQW5wVGFnID09ICJOQSIgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm90b2NvbHM+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YW5jcD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1zZXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQgXyAiLSIgXyAkc2VydmljZUFucFRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWNjZXNzLWlkZW50aWZpZXI+ICRhY2k7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBhbmNwICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8qIC4uLiBwcm90b2NvbHMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xhc3Mtb2Ytc2VydmljZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYWZmaWMtY29udHJvbC1wcm9maWxlcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZVRDUDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NoZWR1bGVyLW1hcD4gJHNlcnZpY2VTY2hlZE1hcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2hhcGluZy1yYXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyYXRlPiAkc2VydmljZUJ3IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcmZhY2VzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZS1zZXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlSWZkIF8gIi0iIF8gJHNlcnZpY2VBbnBUYWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQtdHJhZmZpYy1jb250cm9sLXByb2ZpbGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHNlcnZpY2VBbnBUYWcgPT0gIk5BIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZmlsZS1uYW1lPiAiSUZTRVQtRElSRUNUIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2ZpbGUtbmFtZT4gIklGU0VULUFOQ1AiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJGluZ3Jlc3NRdWV1aW5nICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0LXRyYWZmaWMtY29udHJvbC1wcm9maWxlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2ZpbGUtbmFtZT4gIklGU0VULURJUkVDVCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bml0PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VVbml0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcndhcmRpbmctY2xhc3M+ICJDb250cm9sIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJGluZ3Jlc3NRdWV1aW5nICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dC10cmFmZmljLWNvbnRyb2wtcHJvZmlsZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZmlsZS1uYW1lPiAiQUNDVC1JTkdSRVNTIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dC10cmFmZmljLWNvbnRyb2wtcHJvZmlsZSBpbmFjdGl2ZT0iaW5hY3RpdmUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm9maWxlLW5hbWU+ICJBQ0NULUlOR1JFU1MiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQtdHJhZmZpYy1jb250cm9sLXByb2ZpbGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZmlsZS1uYW1lPiAkc2VydmljZVRDUDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXdyaXRlLXJ1bGVzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGllZWUtODAyLjE+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJld3JpdGUtcnVsZS1uYW1lPiAiUkVXUklURS1CRS1MTC1MRC1WTy1DVCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2bGFuLXRhZz4gIm91dGVyLWFuZC1pbm5lciI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjaGVkdWxlci1tYXBzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlU2NoZWRNYXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcndhcmRpbmctY2xhc3M+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJCZXN0RWZmb3J0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjaGVkdWxlcj4gIkJlc3RFZmZvcnQtIiBfICRxb3NCd0JFIF8gIi1QLTUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yd2FyZGluZy1jbGFzcz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkNvbnRyb2wiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NoZWR1bGVyPiAiQ29udHJvbC0iIF8gJHFvc0J3Q1QgXyAiLVAtOTUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXJzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJCZXN0RWZmb3J0LSIgXyAkcW9zQndCRSBfICItUC01IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNtaXQtcmF0ZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF0ZT4gJHFvc0J3QkUgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmlvcml0eT4gImxvdyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRyb3AtcHJvZmlsZS1tYXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvc3MtcHJpb3JpdHk+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvdG9jb2w+ICJhbnkiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHJvcC1wcm9maWxlPiAiUkVELUJlc3RFZmZvcnQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY2hlZHVsZXJzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJDb250cm9sLSIgXyAkcW9zQndDVCBfICItUC05NSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbWl0LXJhdGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdGU+ICRxb3NCd0NUIF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHk+ICJtZWRpdW0taGlnaCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIGNsYXNzLW9mLXNlcnZpY2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpcmV3YWxsPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGluZXQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlcj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJQT0xJQ0UtIiBfICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlLXNwZWNpZmljPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXJtPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJBZ2dyZWdhdGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWVyYXJjaGljYWwtcG9saWNlcj4gIkgtUE9MSUNFUi0iIF8gJHNlcnZpY2VCdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjY2VwdD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZXJhcmNoaWNhbC1wb2xpY2VyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJILVBPTElDRVItIiBfICRzZXJ2aWNlQnc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvZ2ljYWwtaW50ZXJmYWNlLXBvbGljZXI+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZ2dyZWdhdGU+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmLWV4Y2VlZGluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJhbmR3aWR0aC1saW1pdD4gJHNlcnZpY2VCdyBfICJrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXJzdC1zaXplLWxpbWl0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZpY2VCd0J1cnN0IF8gImsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlzY2FyZD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZW1pdW0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmLWV4Y2VlZGluZz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJhbmR3aWR0aC1saW1pdD4gJHNlcnZpY2VCdyBfICJrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXJzdC1zaXplLWxpbWl0PiAkc2VydmljZUJ3QnVyc3QgXyAiayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNjYXJkPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gZmlyZXdhbGwgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRpbmctaW5zdGFuY2VzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5zdGFuY2U+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gIkNQRS1NR01UIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkc2VydmljZUlmbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcndhcmRpbmctb3B0aW9ucz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGhjcC1yZWxheT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHJpbmctbGVuZ3RoICggJGRoY3BTZXJ2ZXJbMV0gKSA+IDYgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwYXJ0cyA9IGpjczpzcGxpdCggIltbLnBlcmlvZC5dXSIsICRkaGNwU2VydmVyWzFdICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRncm91cCA9ICJJQ0VBQUEtREhDUC0iIF8gJHBhcnRzWzFdIF8gIi0iIF8gJHBhcnRzWzJdIF8gIi0iIF8gJHBhcnRzWzNdIF8gIi0iIF8gJHBhcnRzWzRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2ZXItZ3JvdXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmVyLWdyb3VwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJGdyb3VwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2goICRkaGNwU2VydmVyICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyZXNzPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRncm91cDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdGl2ZS1zZXJ2ZXItZ3JvdXA+ICRncm91cDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICRzZXJ2aWNlSWZsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJJQ0VBQUEtREVGQVVMVCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY3RpdmUtc2VydmVyLWdyb3VwPiAiSUNFQUFBLURFRkFVTFQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHNlcnZpY2VJZmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIHJvdXRpbmctaW5zdGFuY2VzICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgLyogLi4uIFNFUlZJQ0UgQ09ORklHVVJBVElPTiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJHRtcGZzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRzZXJ2aWNlRmlsZVBhdGg+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlLWNvbmZpZ3VyYXRpb24+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzZXJ2aWNlQ29uZmlndXJhdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzZXJ2aWNlQ29uZmlndXJhdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogLi4uIHRyYW5zaWVudC1jaGFuZ2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgfSAvKiAuLi4gREhDUFJFTEFZICovCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggJHRtcGZzICkgewogICAgICAgICAgICAgICAgICAgICAgICAvKiBjYWNoZSBpZmwgaW5mb3JtYXRpb25zICovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaWZsSW5mbyA9IDxpbnRlcmZhY2UtaW5mbz4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmbD4gJHNlcnZpY2VJZmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGluZS1pZD4gJGxpbmVJZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhY2k+ICRhY2k7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZS12bGFuPiAkc2VydmljZVZsYW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YW5wLXRhZz4gJHNlcnZpY2VBbnBUYWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZS1uYW1lPiAkc2VydmljZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2FjaGU+ICRzZXJ2aWNlRmlsZVBhdGg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpZmxJbmZvRmlsZSA9ICIvbWZzL3Zhci90bXAvaW5mby0iIF8gc3RyOnJlcGxhY2UoICRzZXJ2aWNlSWZsLCAiLyIsICJfIiApOwogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSRpZmxJbmZvRmlsZT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkaWZsSW5mbzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2aWNlQ29uZmlndXJhdGlvbiA6PSB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2llbnQtY2hhbmdlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mICRzZXJ2aWNlQ29uZmlndXJhdGlvbkZpbGUvc2VydmljZS1jb25maWd1cmF0aW9uLyo7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkc2VydmljZUNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IC8qIC4uLiBhcHBseS1tYWNybyAqLwogICAgfQogICAgLyogd3JpdGUgdG8gc3lzbG9nICovCiAgICBleHByIGpjczpzeXNsb2cgKCAidXNlci5pbmZvIiwgImljZWFhYS1keW5hbWljLWNvbmZpZyAtIHNlcnZpY2VzIGdlbmVyYXRlZDogIiBfICRzZXJ2aWNlR2VuZXJhdGVDb3VudGVyIF8gIiByZW1vdmVkOiAiIF8gJHNlcnZpY2VSZW1vdmVDb3VudGVyIF8gIiBhY3RpdmU6ICIgXyAkc2VydmljZUNvdW50ZXIgKTsKfQo=";
				<md5> "a85a44a321564646a24b1abd375a6b31";
			}
			<script> {
				<name> "clock-synchronization-alarm.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0NiAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjM0OjA2ICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBnZW5lcmF0ZSBldmVudHMgYmFzZWQgb24gY2xvY2sgc3luY2hyb25pemF0aW9uIHN0YXR1cwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gY2xvY2stc3luY2hyb25pemF0aW9uLWFsYXJtLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJnZW5lcmF0ZSBldmVudHMgYmFzZWQgb24gY2xvY2sgc3luY2hyb25pemF0aW9uIHN0YXR1cyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwoKbnMgc3RyID0gImh0dHA6Ly9leHNsdC5vcmcvc3RyaW5ncyI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwoKLyogVGhpcyBpcyBhbiBldmVudCBzY3JpcHQgKi8KCnZhciAkZXZlbnQtZGVmaW5pdGlvbiA9IHsKICAgIDxldmVudC1vcHRpb25zPiB7CiAgICAJPHBvbGljeT4gewogICAgCQk8bmFtZT4gIkNMT0NLLVNZTkMiOwogICAgCQk8ZXZlbnRzPiAiRVZFUlktTUlOVVRFIjsKICAgICAgICAgICAgPHRoZW4+IHsKICAgICAgICAgICAgCTxldmVudC1zY3JpcHQ+IHsKICAgICAgICAgICAgCQk8bmFtZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1hbGFybS5zbGF4IjsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgfQogICAgCX0KICAgIH0KfQoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogZ2V0IGNsb2NrIHN5bmMgaW5mb3JtYXRpb24gKAogICAgICAgICAqICAgICBjbGk6IHNob3cgY2hhc3NpcyBzeW5jaHJvbml6YXRpb24gZXh0ZW5zaXZlCiAgICAgICAgICovCiAgICAgICAgdmFyICRnZXQtY2xvY2stc3luYy1pbmZvID0gPGdldC1jbG9jay1zeW5jaHJvbml6YXRpb24taW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgICAgIDxleHRlbnNpdmU+OwogICAgICAgIH0KICAgICAgICB2YXIgJGNsb2NrLXN5bmMtaW5mbyA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1jbG9jay1zeW5jLWluZm8gKTsKCiAgICAgICAgbXZhciAkc3RhdHVzUnggPSAiZGlzYWJsZWQiOwogICAgICAgIG12YXIgJHN0YXR1c1R4ID0gImRpc2FibGVkIjsKCiAgICAgICAgaWYgKCAkY2xvY2stc3luYy1pbmZvLy9jbG9jay1zeW5jaHJvbml6YXRpb24taW50ZXJmYWNlICkgewogICAgICAgICAgICBzZXQgJHN0YXR1c1J4ID0gc3RyOnJlcGxhY2UoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzLCAiICIsICItIiApOwogICAgICAgICAgICBzZXQgJHN0YXR1c1R4ID0gc3RyOnJlcGxhY2UoICRjbG9jay1zeW5jLWluZm8vL2Nsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzLCAiICIsICItIiApOwogICAgICAgIH0KCiAgICAgICAvKiBnZXQgdXRpbGl0eSBtaWIgaW5mb3JtYXRpb25zCiAgICAgICAgKiAgICAgY2xpOiBzaG93IHNubXAgbWliIHdhbGsgZGVjaW1hbCBqbnhVdGlsU3RyaW5nVmFsdWUuOTkuMTA4LjExMS45OS4xMDcuNDUuMTE1LjEyMS4xMTAuOTkuMTA0LjExNC4xMTEuMTEwLjEwNS4xMjIuOTcuMTE2LjEwNS4xMTEuMTEwCiAgICAgICAgKi8KICAgICAgICB2YXIgJGdldC1zbm1wLWNsb2NrLXN5bmMtaW5mbyA9IDx3YWxrLXNubXAtb2JqZWN0PiB7CiAgICAgICAgICAgICAgICA8ZGVjaW1hbD47CiAgICAgICAgICAgICAgICA8c25tcC1vYmplY3QtbmFtZT4gImpueFV0aWxTdHJpbmdWYWx1ZS45OS4xMDguMTExLjk5LjEwNy40NS4xMTUuMTIxLjExMC45OS4xMDQuMTE0LjExMS4xMTAuMTA1LjEyMi45Ny4xMTYuMTA1LjExMS4xMTAiOwogICAgICAgIH0KICAgICAgICB2YXIgJHNubXAtY2xvY2stc3luYy1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXNubXAtY2xvY2stc3luYy1pbmZvICk7CgogICAgICAgIG12YXIgJHN0YXR1c1J4U25tcCA9ICRzbm1wLWNsb2NrLXN5bmMtaW5mby8vc25tcC1vYmplY3RbIGluZGV4L2luZGV4LXZhbHVlID09ICJjbG9jay1zeW5jaHJvbml6YXRpb24taW50ZXJmYWNlLXJ4LXN0YXR1cyIgXS9vYmplY3QtdmFsdWU7CiAgICAgICAgbXZhciAkc3RhdHVzVHhTbm1wID0gJHNubXAtY2xvY2stc3luYy1pbmZvLy9zbm1wLW9iamVjdFsgaW5kZXgvaW5kZXgtdmFsdWUgPT0gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzIiBdL29iamVjdC12YWx1ZTsKCiAgICAgICAgaWYoIHN0cmluZy1sZW5ndGgoICRzdGF0dXNSeFNubXAgKSA8IDEgKSB7CiAgICAgICAgICAgIHNldCAkc3RhdHVzUnhTbm1wID0gIm5vbmUiOwogICAgICAgIH0KICAgICAgICBpZiggc3RyaW5nLWxlbmd0aCggJHN0YXR1c1R4U25tcCApIDwgMSApIHsKICAgICAgICAgICAgc2V0ICRzdGF0dXNUeFNubXAgPSAibm9uZSI7CiAgICAgICAgfQoKICAgICAgICBpZiAoICRzdGF0dXNSeCAhPSAkc3RhdHVzUnhTbm1wICkgewogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC10cmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzFdPWNsb2NrLXN5bmMtcngtIiBfICRzdGF0dXNSeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPXN0YXR1cywgIiAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRzdGF0dXNSeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPW9sZC1zdGF0dXMsICIgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICRzdGF0dXNSeFNubXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyICRzbm1wVHJhcFJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC10cmFwICk7CgogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2Utcngtc3RhdHVzIjsKICAgICAgICAgICAgICAgIDxvYmplY3QtdmFsdWU+ICRzdGF0dXNSeDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoICRzdGF0dXNUeCAhPSAkc3RhdHVzVHhTbm1wICkgewogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC10cmFwID0gPHJlcXVlc3Qtc25tcC1nZW5lcmF0ZS10cmFwPiB7CiAgICAgICAgICAgICAgICA8dHJhcD4gImpueEV2ZW50VHJhcCI7CiAgICAgICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVsxXT1ldmVudCwgIiAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzFdPWNsb2NrLXN5bmMtdHgtIiBfICRzdGF0dXNUeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzJdPXN0YXR1cywgIiAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbMl09IiBfICRzdGF0dXNUeCBfICIsICIKICAgICAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzNdPW9sZC1zdGF0dXMsICIgICBfICJqbnhFdmVudEF2VmFsdWVbM109IiBfICRzdGF0dXNUeFNubXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyICRzbm1wVHJhcFJlc3VsdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJHJlcXVlc3Qtc25tcC10cmFwICk7CgogICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgPG9iamVjdC10eXBlPiAic3RyaW5nIjsKICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gImNsb2NrLXN5bmNocm9uaXphdGlvbi1pbnRlcmZhY2UtdHgtc3RhdHVzIjsKICAgICAgICAgICAgICAgIDxvYmplY3QtdmFsdWU+ICRzdGF0dXNUeDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItc2V0ICk7CiAgICAgICAgfQoKICAgICAgICAvKiBjbG9zZSB0aGUgY29ubmVjdGlvbiAgKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlKCAkY29ubmVjdGlvbiApOwogICAgfQp9Cg==";
				<md5> "ff755522aa4291f3b830afca60fae276";
			}
			<script> {
				<name> "event-dom-signal-check.slax";
				<type> "event";
				<base64> "";
				<md5> "199e9cbf8cee9bbae506707a9e82cc93";
			}
			<script> {
				<name> "event-mib-accounting-options-configuration-etherlike.slax";
				<type> "event";
				<base64> "";
				<md5> "87991e20d0914f911246e148de519415";
			}
			<script> {
				<name> "event-mib-accounting-options-configuration-physical.slax";
				<type> "event";
				<base64> "";
				<md5> "8d8047dec71731e57b9622335a2c6fbf";
			}
			<script> {
				<name> "event-sfp-data.slax";
				<type> "event";
				<base64> "";
				<md5> "dbecdfa69f0e612c1840b6676d2aaf71";
			}
			<script> {
				<name> "iceaaa-autoclean-tmp.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjkKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NDQ2ICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6MzQ6MDYgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IG9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbAogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gaWNlYWFhLWF1dG9jbGVhbi10bXAiICovCi8qIEBERVNDUklQVElPTiA9ICJvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgICAgICB2YXIgJGF1dG9jbGVhblN0YXR1cyA9IDx0cnVlPjsKICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSIvbWZzL3Zhci90bXAvYXV0b2NsZWFuIiBhcHBlbmQ9Im5vIj4gewogICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgfQogICAgfQp9Cg==";
				<md5> "e3dc8bd625f8ab3fab480e1cd6175946";
			}
			<script> {
				<name> "iceaaa-clean-cache.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1jbGVhbi1jYWNoZS5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0NiAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjM0OjA2ICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiByZW1vdmUgdW51c2VkIGNvbmZpZyBjYWNoZSBmaWxlcwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gaWNlYWFhLWNsZWFuLWNhY2hlLnNsYXgiICovCi8qIEBERVNDUklQVElPTiA9ICJyZW1vdmUgdW51c2VkIGNvbmZpZyBjYWNoZSBmaWxlcyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBkYXRlID0gImh0dHA6Ly9leHNsdC5vcmcvZGF0ZXMtYW5kLXRpbWVzIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgICAgICA8cG9saWN5PiB7CiAgICAgICAgICAgIDxuYW1lPiAiSUNFQUFBLUNMRUFOLUNBQ0hFIjsKICAgICAgICAgICAgPGV2ZW50cz4gIklDRUFBQS1DTEVBTi1DQUNIRSI7CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgICAgICA8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+ICJpY2VhYWEtY2xlYW4tY2FjaGUuc2xheCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCjx4c2w6a2V5IG5hbWU9InBwcG9lLXN1YnNjcmliZXJzIiBtYXRjaD0ic3Vic2NyaWJlcnMtaW5mb3JtYXRpb24vc3Vic2NyaWJlciIgdXNlPSJzZXNzaW9uLWlkIj47CgptYXRjaCAvIHsKICAgIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewoJICAgIHZhciAkZmlsZVBhdGggPSAiL21mcy92YXIvdG1wIjsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogZ2V0IHN1YnNjcmliZXItaW5mb3JtYXRpb24gZm9yIHBwcG9lIHNlc3Npb25zICovCiAgICAgICAgdmFyICRnZXQtc3Vic2NyaWJlciA9IDxnZXQtc3Vic2NyaWJlcnM+IHsKICAgICAgICAgICAgPGNsaWVudC10eXBlPiAicHBwb2UiOwogICAgICAgICAgICA8ZGV0YWlsPjsKICAgICAgICB9CiAgICAgICAgdmFyICRzdWJzY3JpYmVycyA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1zdWJzY3JpYmVyICk7CgogICAgICAgIC8qIGdldCBmaWxlIGxpc3QgKi8KICAgICAgICB2YXIgJGdldC1maWxlLWxpc3QgPSA8ZmlsZS1saXN0PiB7CiAgICAgICAgICAgIDxwYXRoPiAkZmlsZVBhdGg7CiAgICAgICAgICAgIDxkZXRhaWw+OwogICAgICAgIH0KICAgICAgICB2YXIgJGZpbGUtbGlzdCA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1maWxlLWxpc3QgKTsKCiAgICAgICAgLyogZGVsZXRlIGNhY2hlIGZpbGVzIGlmIGNvcnJlc3BvbmRpbmcgcHBwb2Ugc2Vzc2lvbiBpcyBtaXNzaW5nICovCiAgICAgICAgZm9yLWVhY2goICRmaWxlLWxpc3QvL2ZpbGUtaW5mb3JtYXRpb24gKSB7CiAgICAgICAgICAgIHZhciAkZmlsZU5hbWUgPSBqY3M6cmVnZXgoICJeKFtbOmRpZ2l0Ol1dKilfW1s6ZGlnaXQ6XV0qIiwgZmlsZS1uYW1lICk7CiAgICAgICAgICAgIGlmKCAkZmlsZU5hbWVbMl0gKSB7CiAgICAgICAgICAgICAgICBmb3ItZWFjaCAoICRzdWJzY3JpYmVycyApIHsKICAgICAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJwcHBvZS1zdWJzY3JpYmVycyIsICRmaWxlTmFtZVsyXSAgKS9yYWRpdXMtYWNjb3VudGluZy1pZCApICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gJGZpbGVQYXRoIF8gIi8iIF8gJGZpbGVOYW1lWzFdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZmlsZS1kZWxldGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIAkvKiBkZWxldGUgaWNlYWFhLW1hbmFnZXIgY29tbWl0IGFuZCBtYWNybyByZXN1bHQgZmlsZXMgb2xkZXIgdGhlbiAyNGggKDg2NDAwcykgKi8KICAgICAgICAgICAgICAgIGlmKCBjb250YWlucyggZmlsZS1uYW1lLCAiaWNlYWFhLW1hbmFnZXIiICkgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAoIGRhdGU6c2Vjb25kcyggZGF0ZTpkdXJhdGlvbigpICkgLSBmaWxlLWRhdGUgKSA+IDg2NDAwICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpbGUtZGVsZXRlID0gPGZpbGUtZGVsZXRlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aD4gJGZpbGVQYXRoIF8gIi8iIF8gZmlsZS1uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZmlsZS1kZWxldGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UgKCAkY29ubmVjdGlvbiApOwogICAgfQp9Cg==";
				<md5> "ca5ed2cb37c6c44e5abbe9f44740b0f7";
			}
			<script> {
				<name> "iceaaa-messages.slax";
				<type> "event";
				<base64> "";
				<md5> "4c9d09680e781eba2512c77fd5ac8c8e";
			}
			<script> {
				<name> "mib_acct-session-id.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IG1pYl9hY2N0LXNlc3Npb24taWQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuOQogKiBQbGF0Zm9ybSAgICAgIDogTVgKICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NDQ2ICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6MzQ6MDYgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IGV2ZW50LXNjcmlwdCB3cml0aW5nIGFsbCBhY3RpdmUgUFBQb0Ugc3Vic2NyaWJlciBpbiB0aGUgdXRpbCBNSUIKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvaGlkZSIgKi8KLyogQE5BTUUgPSAiUjIuOSAtIG1pYl9hY2N0LXNlc3Npb24taWQuc2xheCIgKi8KLyogQERFU0NSSVBUSU9OID0gImV2ZW50LXNjcmlwdCB3cml0aW5nIGFsbCBhY3RpdmUgUFBQb0Ugc3Vic2NyaWJlciBpbiB0aGUgdXRpbCBNSUIiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdmFyICRldmVudC1kZWZpbml0aW9uID0gewogICAgPGV2ZW50LW9wdGlvbnM+IHsKICAgIAk8cG9saWN5PiB7CiAgICAJCTxuYW1lPiAiTUlCLUFDQ1QtU0VTU0lPTi1JRCI7CiAgICAJCTxldmVudHM+ICJFVkVSWS1NSU5VVEUiOwogICAgICAgICAgICA8dGhlbj4gewogICAgICAgICAgICAJPGV2ZW50LXNjcmlwdD4gewogICAgICAgICAgICAJCTxuYW1lPiAibWliX2FjY3Qtc2Vzc2lvbi1pZC5zbGF4IjsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgfQogICAgCX0KICAgIH0KfQoKPHhzbDprZXkgbmFtZT0ic3Vic2NyaWJlciIgbWF0Y2g9InN1YnNjcmliZXJzLWluZm9ybWF0aW9uL3N1YnNjcmliZXIiIHVzZT0icmFkaXVzLWFjY291bnRpbmctaWQiPjsKPHhzbDprZXkgbmFtZT0ibWliIiBtYXRjaD0ic25tcC1vYmplY3QtaW5mb3JtYXRpb24vc25tcC1vYmplY3QiIHVzZT0iaW5kZXgvaW5kZXgtdmFsdWUiPjsKCm1hdGNoIC8gewogICAgPGV2ZW50LXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgLyogc2hvdyBzdWJzY3JpYmVycyBjbGllbnQtdHlwZSBwcHBvZSBzdWJzY3JpYmVyLXN0YXRlIGFjdGl2ZSBkZXRhaWwgKi8KICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVycy1pbmZvID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgIDxzdWJzY3JpYmVyLXN0YXRlPiAiYWN0aXZlIjsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkc3Vic2NyaWJlci1pbmZvID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXJzLWluZm8gKTsKCiAgICAgICAgLyogc2hvdyBzbm1wIG1pYiB3YWxrIGRlY2ltYWwgam54VXRpbFN0cmluZ1ZhbHVlLjExMi4xMTIuMTEyLjQ2ICovCiAgICAgICAgdmFyICRnZXQtc3Vic2NyaWJlci1zbm1wID0gPHdhbGstc25tcC1vYmplY3Q+IHsKICAgICAgICAgICAgICAgIDxhc2NpaT47CiAgICAgICAgICAgICAgICA8c25tcC1vYmplY3QtbmFtZT4gImpueFV0aWxTdHJpbmdWYWx1ZS4xMTIuMTEyLjExMi40NiI7CiAgICAgICAgfQogICAgICAgIHZhciAkc3Vic2NyaWJlci1zbm1wID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXItc25tcCApOwoKICAgICAgICAvKiBhZGQgbWlzc2luZyBwcHBvZSBzdWJzY3JpYmVyIHRvIHRoZSB1dGlsIE1JQiAuLi4gKi8KICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItaW5mby8vc3Vic2NyaWJlciApIHsKICAgICAgICAgICAgdmFyICRzZXNzaW9uSWQgPSBzZXNzaW9uLWlkOwogICAgICAgICAgICB2YXIgJHJhZGl1c0FjY3RJZCA9IHJhZGl1cy1hY2NvdW50aW5nLWlkOwogICAgICAgICAgICB2YXIgJGluc3RhbmNlID0gInBwcC4iIF8gJHNlc3Npb25JZDsKICAgICAgICAgICAgZm9yLWVhY2goICRzdWJzY3JpYmVyLXNubXAgKSB7CiAgICAgICAgICAgICAgICBpZiggbm90KCBrZXkoICJtaWIiLCAkaW5zdGFuY2UgKS9vYmplY3QtdmFsdWUgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHJlcXVlc3Qtc25tcC11dGlsaXR5LW1pYi1zZXQgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldD4gewogICAgICAgICAgICAgICAgICAgICAgICA8b2JqZWN0LXR5cGU+ICJzdHJpbmciOwogICAgICAgICAgICAgICAgICAgICAgICA8aW5zdGFuY2U+ICRpbnN0YW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgPG9iamVjdC12YWx1ZT4gJHJhZGl1c0FjY3RJZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICRzbm1wTWliUmVzdWx0ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkcmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLXNldCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKiByZW1vdmUgZGlzY29ubmVjdGVkIHBwcG9lIHN1YnNjcmliZXIgdGhlIHRoZSB1dGlsIE1JQiAuLi4gKi8KICAgICAgICBmb3ItZWFjaCggJHN1YnNjcmliZXItc25tcC8vc25tcC1vYmplY3QgKSB7CiAgICAgICAgICAgIHZhciAkcmFkaXVzQWNjdElkID0gb2JqZWN0LXZhbHVlOwogICAgICAgICAgICB2YXIgJGluc3RhbmNlID0gaW5kZXgvaW5kZXgtdmFsdWU7CiAgICAgICAgICAgIGZvci1lYWNoKCAkc3Vic2NyaWJlci1pbmZvICkgewogICAgICAgICAgICAgICAgaWYoIG5vdCgga2V5KCAic3Vic2NyaWJlciIsICRyYWRpdXNBY2N0SWQgKS9zZXNzaW9uLWlkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXIgPSA8cmVxdWVzdC1zbm1wLXV0aWxpdHktbWliLWNsZWFyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYmplY3QtdHlwZT4gInN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnN0YW5jZT4gJGluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJHNubXBNaWJSZXN1bHQgPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRyZXF1ZXN0LXNubXAtdXRpbGl0eS1taWItY2xlYXIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogY2xvc2UgdGhlIGNvbm5lY3Rpb24gICovCiAgICAgICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQo=";
				<md5> "1d03ea85f95d6184b5a4258b4cb30cea";
			}
			<script> {
				<name> "trap_ancp.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHRyYXBfYW5jcC5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBDaHJpc3RpYW4gR2llc2UgY2dpZXNlQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0NiAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjM0OjA2ICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBnZW5lcmF0ZXMgU05NUCB0cmFwcyBiYXNlZCBvbiBBTkNQIHN5c2xvZwogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gdHJhcF9hbmNwIiAqLwovKiBAREVTQ1JJUFRJT04gPSAiZ2VuZXJhdGVzIFNOTVAgdHJhcHMgYmFzZWQgb24gQU5DUCBzeXNsb2ciICovCgp2ZXJzaW9uIDEuMDsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKCi8qIFRoaXMgaXMgYW4gZXZlbnQgc2NyaXB0ICovCgp2YXIgJGV2ZW50LWRlZmluaXRpb24gPSB7CiAgICA8ZXZlbnQtb3B0aW9ucz4gewogICAgCTxwb2xpY3k+IHsKICAgIAkJPG5hbWU+ICJBTkNQIjsKICAgIAkJPGV2ZW50cz4gIlNZU1RFTSI7CiAgICAJCTxhdHRyaWJ1dGVzLW1hdGNoPiB7CiAgICAgICAgICAgICAgICA8ZnJvbS1ldmVudC1hdHRyaWJ1dGU+ICJTWVNURU0ubWVzc2FnZSI7CiAgICAgICAgICAgICAgICA8Y29uZGl0aW9uPiAibWF0Y2hlcyI7CiAgICAgICAgICAgICAgICA8dG8tZXZlbnQtYXR0cmlidXRlLXZhbHVlPiAiYW5jcGRfc2Vzc2lvbi4qc3RhdGUiOwogICAgCSAgICB9CiAgICAgICAgICAgIDx0aGVuPiB7CiAgICAgICAgICAgIAk8ZXZlbnQtc2NyaXB0PiB7CiAgICAgICAgICAgIAkJPG5hbWU+ICJ0cmFwX2FuY3Auc2xheCI7CiAgICAgICAgICAgIAl9CiAgICAgICAgICAgIH0KICAgIAl9IC8qIC4uLiBwb2xpY3kgRU9BTV9DRk1fVElNRU9VVCIgKi8KICAgIH0KfQoKbWF0Y2ggLyB7CiAgICA8ZXZlbnQtc2NyaXB0LXJlc3VsdHM+IHsKICAgIAkKICAgIAkvKiBvcGVuIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSBqY3M6b3BlbigpOwoKICAgICAgICAvKiBnZXQgdGhlIHN5c2xvZyBtZXNzYWdlICovCiAgICAgICAgdmFyICRtZXNzYWdlID0gZXZlbnQtc2NyaXB0LWlucHV0L3RyaWdnZXItZXZlbnQvbWVzc2FnZTsKCiAgICAgICAgdmFyICRldmVudCA9IHsKICAgICAgICAgICAgaWYoIGNvbnRhaW5zKCAkbWVzc2FnZSwgInN0YXRlIGlzIHVwIiApICkgewogICAgICAgICAgICAJPHZhbHVlPiAiVVAiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgPHZhbHVlPiAiRE9XTiI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciAkbWVzc2FnZVBhcnQgPSBzdWJzdHJpbmctYWZ0ZXIgKCAkbWVzc2FnZSwgIiBuZWlnaGJvciAiICk7CiAgICAgICAgdmFyICRuZWlnaGJvciA9IHN1YnN0cmluZy1iZWZvcmUgKCAkbWVzc2FnZVBhcnQsICIgIiApOwogICAgICAgIHZhciAkcmVhc29uID0gc3RyOnJlcGxhY2UgKCBzdWJzdHJpbmctYWZ0ZXIgKCAkbWVzc2FnZVBhcnQsICIgIiApLCAiICIsICItIiApOwoKICAgICAgICB2YXIgJGdldC1yb3V0ZS1pbmZvcm1hdGlvbiA9IDxnZXQtcm91dGUtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPGRlc3RpbmF0aW9uPiAkbmVpZ2hib3I7CiAgICAgICAgICAgIDx0YWJsZT4gImluZXQuMCI7CiAgICAgICAgICAgIDxwcm90b2NvbD4gImRpcmVjdCI7CiAgICAgICAgfQogICAgICAgIHZhciAkcm91dGUtaW5mb3JtYXRpb24gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtcm91dGUtaW5mb3JtYXRpb24gKTsKICAgICAgICBtdmFyICRpZmwgPSAkcm91dGUtaW5mb3JtYXRpb24vL3J0LWVudHJ5L25oL3ZpYTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPGJyaWVmPjsKICAgICAgICAgICAgPGludGVyZmFjZS1uYW1lPiAkaWZsOwogICAgICAgIH0KICAgICAgICB2YXIgJGludGVyZmFjZS1pbmZvcm1hdGlvbiA9IGpjczpleGVjdXRlKCAkY29ubmVjdGlvbiwgJGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24gKTsKICAgICAgICB2YXIgJGxpbmstYWRkcmVzcy1wYXJ0cyA9IGpjczpzcGxpdCAoICJbWy5zcGFjZS5dXSIsICRpbnRlcmZhY2UtaW5mb3JtYXRpb24vL2xpbmstYWRkcmVzcyApOwogICAgICAgIHZhciAkdmxhbiA9IHsKICAgICAgICAgICAgaWYgKCBjb3VudCggJGxpbmstYWRkcmVzcy1wYXJ0cykgPiA0ICkgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbM10sICIuIiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgPHZhbHVlPiBzdWJzdHJpbmctYWZ0ZXIoICRsaW5rLWFkZHJlc3MtcGFydHNbMl0sICIuIiApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIHN0YXJ0cy13aXRoKCAkaWZsLCAieGUtIiApICkgewogICAgICAgICAgICBzZXQgJGlmbCA9ICJcXCIgXyAkaWZsOwogICAgICAgIH0KCiAgICAgICAgLyogZ2VuZXJhdGUgc25tcCB0cmFwICovCiAgICAgICAgdmFyICRyZXF1ZXN0U25tcFRyYXAgPSA8cmVxdWVzdC1zbm1wLWdlbmVyYXRlLXRyYXA+IHsKICAgICAgICAgICAgPHRyYXA+ICJqbnhFdmVudFRyYXAiOwogICAgICAgICAgICA8dmFyaWFibGUtYmluZGluZ3M+ICJqbnhFdmVudFRyYXBEZXNjclswXT1FdmVudC1UcmFwLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzFdPWV2ZW50LCAiICAgICAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxXT1BTkNQLVNFU1NJT04tIiBfICRldmVudCBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbNV09aWZEZXNjLCAiICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzVdPSIgXyAkaWZsIF8gIiwgIgogICAgICAgICAgICAgICAgXyAiam54RXZlbnRBdkF0dHJpYnV0ZVs3XT1tZXNzYWdlLCAiICAgICAgICBfICJqbnhFdmVudEF2VmFsdWVbN109IiBfICRyZWFzb24gXyAiLCAiCiAgICAgICAgICAgICAgICBfICJqbnhFdmVudEF2QXR0cmlidXRlWzExXT1uZWlnaGJvciwgIiAgICAgIF8gImpueEV2ZW50QXZWYWx1ZVsxMV09IiBfICRuZWlnaGJvciBfICIsICIKICAgICAgICAgICAgICAgIF8gImpueEV2ZW50QXZBdHRyaWJ1dGVbMTJdPXZsYW4sICIgICAgICAgICAgXyAiam54RXZlbnRBdlZhbHVlWzEyXT0iIF8gJHZsYW47CiAgICAgICAgfQogICAgICAgIHZhciAkc25tcFJlc3VsdCA9IGpjczppbnZva2UgKCAkcmVxdWVzdFNubXBUcmFwICk7CgogICAgICAgIC8qIGNsb3NlIGNvbm5lY3Rpb24gKi8KICAgICAgICB2YXIgJGNsb3NlUmVzdWx0ID0gamNzOmNsb3NlICggJGNvbm5lY3Rpb24gKTsKICAgIH0KfQo=";
				<md5> "a0a58ea5cd40fa03a8bd037444776d71";
			}
			<script> {
				<name> "trap_eoam.slax";
				<type> "event";
				<base64> "";
				<md5> "21655d81a4878a6b6c3fb4e5a12fe844";
			}
			<script> {
				<name> "write_ancp_session_radius_accounting_options.slax";
				<type> "event";
				<base64> "";
				<md5> "72a18d5d24d0227a75a83b535561342a";
			}
			<script> {
				<name> "write_interfaces_queue_accounting_options.slax";
				<type> "event";
				<base64> "";
				<md5> "f39a0709150575a3d5ee796e44bdded5";
			}
			<script> {
				<name> "write_subscribers_accounting_options.slax";
				<type> "event";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IHdyaXRlX3N1YnNjcmliZXJzX2FjY291bnRpbmdfb3B0aW9ucy5zbGF4CiAqIEF1dGhvciAgICAgICAgOiBGcmFuayBSZWltZXIgZnJlaW1lckBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuOQogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTwogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXZpc2lvbjogMzg0NDYgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzozNDowNiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogd3JpdGUgYWNjb3VudGluZyByZWNvcmRzIG9mIENvUyBpbmZvcm1hdGlvbiBmb3Igc2VsZWN0ZWQgaW50ZXJmYWNlcwogKgogKiAgIEFzc3VtcHRpb25zCiAqICAgMS4gbm8gcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgc2NyaXB0CiAqICAgMi4gRnJvbSAic2hvdyBzdWJzY3JpYmVycyBzdW1tYXJ5IiBycGMgZXF1aXZhbGVudCB0aGUgZm9sbG93aW5nIGNvdW50ZXJzIGFyZSBhdmFpbGFibGUKICogICAgICBWTEFOLU9PQgogKiAgICAgIGFjdGl2ZSBzdWJzY3JpYmVycwogKiAgICAgIHRvdGFsIHN1YnNjcmliZXJzCiAqCiAqLwoKLyogSnVub3MgU3BhY2Ugc3BlY2lmaWMgY29udGV4dCwgbmFtZSBhbmQgZGVzY3JpcHRpb24gKi8KLyogQENPTlRFWFQgPSAiL2hpZGUiICovCi8qIEBOQU1FID0gIlIyLjkgLSB3cml0ZV9zdWJzY3JpYmVyc19hY2NvdW50aW5nX29wdGlvbnMuc2xheCAqLwovKiBAREVTQ1JJUFRJT04gPSAid3JpdGUgYWNjb3VudGluZyByZWNvcmRzIG9mIHN1YnNjcmliZXIgc3VtbWFyeSBjb3VudGVycyIgKi8KCnZlcnNpb24gMS4wOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBleHQgPSAiaHR0cDovL3htbHNvZnQub3JnL1hTTFQvbmFtZXNwYWNlIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7Cgp2YXIgJGxvY2FsID0gamNzOm9wZW4oKTsKCm1hdGNoIC8gewogIDxldmVudC1zY3JpcHQtcmVzdWx0cz4gewoKICAgIC8qIGFib3J0IGlmIG5vIGNvbm5lY3Rpb24gdG8gbG9jYWwgbWdkICovCiAgICBpZiAoJGxvY2FsLy4uLy94bm06ZXJyb3IpIHsKICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGxvY2FsLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7CiAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgIH0KCiAgICAvKiBjaGVjayBjdXJyZW50IFJFIGlzIG1hc3RlciBSRS4gU3RvcCBleGVjdXRpb24gaWYgbm90ICovCiAgICB2YXIgJHJlX3N0YXR1cyA9IHsgY2FsbCBpc19tYXN0ZXIoKTsgfQogICAgaWYgKCRyZV9zdGF0dXMgIT0gIm1hc3RlciIpIHsKICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gIlNjcmlwdCBub3QgcnVubmluZyBvbiBtYXN0ZXIgUkUuIFN0b3BwaW5nIGV4ZWN1dGlvbiI7CiAgICB9CgogICAgLyogZ2V0IGluZm9ybWF0aW9uIGZyb20gInNob3cgc3Vic2NyaWJlcnMgc3VtbWFyeSIgcnBjICovCiAgICB2YXIgJHN1YnNjcmliZXJfY291bnRlcnMgOj0geyBjYWxsIGdldF9zdWJzY3JpYmVyc19zdW1tYXJ5KCk7IH0KCiAgICAvKiB0YWtlIHRoZSBzdWJzY3JpYmVyIGluZm8gYW5kIG1ha2UgYWNjb3VudGluZy1vcHRpb25zIHJlY29yZHMgKi8KICAgIHZhciAkYWNjb3VudGluZ19yZWNvcmRzIDo9IHsgY2FsbCBhY2NvdW50aW5nX3JlY29yZHMoJGNvdW50ZXJzID0gJHN1YnNjcmliZXJfY291bnRlcnMpOyB9CgogICAgLyogV3JpdGUgdGhlIGFjY291bnRpbmcgcmVjb3JkcyB0byBhY2NvdW50aW5nLW9wdGlvbnMgKi8KICAgIGNhbGwgd3JpdGVfYWNjb3VudGluZygkcmVjb3JkcyA9ICRhY2NvdW50aW5nX3JlY29yZHMpOwoKICAgIC8qIGFsbCBiZWluZyB3ZWxsIGxvZyBzdWNjZXNzZnVsIHJ1biBvZiBzY3JpcHQgKi8KICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLm5vdGljZSIsICJMU1IgZmFjaW5nIGFjY291bnRpbmcgcmVjb3JkcyB3cml0dGVuIik7CgogICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgdmFyICRjbG9zZVJlc3VsdCA9IGpjczpjbG9zZSAoICRsb2NhbCApOwogIH0KfQoKLyoKICogRXhlY3V0aW5nIGdldC1zdWJzY3JpYmVycy1zdW1tYXJ5IHJwYyBjYWxsIGFuZCBmaWx0ZXIgdGhyZWUgdmFsdWVzIHRoYXQgbmVlZHMKICogdG8gYmUgd3JpdHRlbiBpbiB0aGUgYWNjb3VudCBkYXRhLgogKiB0aGUgcmVzdCBpcyBpZ25vcmVkCiAqLwp0ZW1wbGF0ZSBnZXRfc3Vic2NyaWJlcnNfc3VtbWFyeSgpIHsKICB2YXIgJHN1YnNjcmliZXJfc3VtbWFyeV9ycGMgPSA8Z2V0LXN1YnNjcmliZXJzLXN1bW1hcnk+OwogIHZhciAkc3Vic2NyaWJlcl9zdW1tYXJ5ID0gamNzOmV4ZWN1dGUoJGxvY2FsICwgJHN1YnNjcmliZXJfc3VtbWFyeV9ycGMpOwoKICB2YXIgJGZpbHRlcmVkX3N1YnNjcmliZXJfY291bnRlcnMgOj0gewogICAgaWYgKCRzdWJzY3JpYmVyX3N1bW1hcnkvY291bnRlcnMvc2Vzc2lvbi10eXBlLXBwcG9lKSB7CiAgICAgIDxhY3RpdmU+ICRzdWJzY3JpYmVyX3N1bW1hcnkvY291bnRlcnMvc2Vzc2lvbi10eXBlLXBwcG9lOwogICAgfSBlbHNlIHsKICAgICAgPGFjdGl2ZT4gMDsKICAgIH0KICAgIGlmICgkc3Vic2NyaWJlcl9zdW1tYXJ5L2NvdW50ZXJzL3Nlc3Npb24tc3RhdGUtYWN0aXZlKSB7CiAgICAgIDx0b3RhbD4gJHN1YnNjcmliZXJfc3VtbWFyeS9jb3VudGVycy9zZXNzaW9uLXN0YXRlLWFjdGl2ZTsKICAgIH0gZWxzZSB7CiAgICAgIDx0b3RhbD4gMDsKICAgIH0KICB9CiAgY29weS1vZiAkZmlsdGVyZWRfc3Vic2NyaWJlcl9jb3VudGVyczsKfQoKLyoKICogR2V0dGluZyB0aHJlZSB2YWx1ZXMgYXMgaW5wdXQKICogUmV0dXJuIGEgc2V0IG9mIGFjY291bnRpbmcgcmVjb3JkcwogKi8KdGVtcGxhdGUgYWNjb3VudGluZ19yZWNvcmRzKCRjb3VudGVycykgewogIGlmIChqY3M6ZW1wdHkoJGNvdW50ZXJzKSkgewogICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gIk5vIGNvdW50ZXJzIHBhc3NlZCB0byBhY2NvdW50aW5nX3JlY29yZHMoKSI7CiAgfQogIHZhciAkcmVjb3JkcyA6PSB7CiAgICA8cmVjb3JkPiAiam54U3Vic2NyaWJlckFjdGl2ZUNvdW50LCIgXyAkY291bnRlcnMvYWN0aXZlOwogICAgPHJlY29yZD4gImpueFN1YnNjcmliZXJUb3RhbENvdW50LCIgXyAkY291bnRlcnMvdG90YWw7CiAgICAvKiA8cmVjb3JkPiAiZHRTdWJzY3JpYmVyT29iQ291bnQsIiBfICRjb3VudGVycy9vb2I7ICovCiAgfQogIGNvcHktb2YgJHJlY29yZHM7Cn0KCi8qCiAqIFRoaXMgZnVuY3Rpb24gd2lsbCB3cml0ZSB0aGUgYWN0dWFsIGFjY291bnRpbmcgcmVjb3JkIHRvIGEKICogZmlsZSB3aGljaCBtdXN0IGJlIGNvbmZpZ3VyZWQgaW4gYWNjb3VudGluZy1vcHRpb25zCiAqLwp0ZW1wbGF0ZSB3cml0ZV9hY2NvdW50aW5nKCRyZWNvcmRzKSB7CgoKICB2YXIgJGZpbGUgPSAic3Vic2NyaWJlci1zZXNzaW9ucyI7CiAgdmFyICRsYXlvdXQgPSAic3Vic2NyaWJlci1zZXNzaW9uczEiOwogIHZhciAkZmllbGRzID0gIm5hbWUsb2JqZWN0LXZhbHVlIjsKCiAgZm9yLWVhY2ggKCRyZWNvcmRzL3JlY29yZCkgewogICAgdmFyICRhZGRfcmVjb3JkX3RhaWxfZHJvcCA9IDxhZGQtYWNjb3VudGluZy1maWxlLXJlY29yZD4gewogICAgICA8ZmlsZT4gJGZpbGU7CiAgICAgIDxsYXlvdXQ+ICRsYXlvdXQ7CiAgICAgIDxmaWVsZHM+ICRmaWVsZHM7CiAgICAgICAgPGRhdGE+IC47CiAgICB9CiAgICB2YXIgJGRvbmVfcmVjb3JkX3RhaWxfZHJvcCA9IGpjczpleGVjdXRlKCRsb2NhbCwkYWRkX3JlY29yZF90YWlsX2Ryb3ApOwogICAgaWYgKCRkb25lX3JlY29yZF90YWlsX2Ryb3AvLi4vL3hubTplcnJvcikgewogICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkZG9uZV9yZWNvcmRfdGFpbF9kcm9wLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBhZGRpbmcgYWNjb3VudGluZyBmaWxlIHJlY29yZCIpOwogICAgfQogIH0KfQoKLyogVE9ETzogcmVmYWN0b3IgKi8KdGVtcGxhdGUgaXNfbWFzdGVyKCkgewoJaWYgKCBldmVudC1zY3JpcHQtaW5wdXQvanVub3MtY29udGV4dCApIHsKICAgIAlpZiAoIGV2ZW50LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgIAkJPG91dHB1dD4gIm1hc3RlciI7CgkJfQoJCWVsc2UgewoJCQk8b3V0cHV0PiAiYmFja3VwIjsKCQl9Cgl9CgllbHNlIGlmICggY29tbWl0LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0ICkgewogICAgCWlmICggY29tbWl0LXNjcmlwdC1pbnB1dC9qdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgIAkJPG91dHB1dD4gIm1hc3RlciI7CgkJfQoJCWVsc2UgewoJCQk8b3V0cHV0PiAiYmFja3VwIjsKCQl9Cgl9CgllbHNlIGlmICggb3Atc2NyaXB0LWlucHV0L2p1bm9zLWNvbnRleHQgKSB7CiAgICAJaWYgKCBvcC1zY3JpcHQtaW5wdXQvanVub3MtY29udGV4dC9yZS1tYXN0ZXIgKSB7CiAgICAJCTxvdXRwdXQ+ICJtYXN0ZXIiOwoJCX0KCQllbHNlIHsKCQkJPG91dHB1dD4gImJhY2t1cCI7CgkJfQoJfQoJZWxzZSB7CiAgICAJdmFyICRyZV9ycGMgPSA8Z2V0LXJvdXRlLWVuZ2luZS1pbmZvcm1hdGlvbj4gOwogICAgCXZhciAkcmUgPSBqY3M6ZXhlY3V0ZSgkbG9jYWwsICRyZV9ycGMpOwogICAgCWlmICgkcmUvLi4vL3hubTplcnJvcikgewogICAgCQljYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkcmUvLi4sICRtZXNzYWdlID0gIkVycm9yIGNvbW11bmljYXRpbmcgdG8gZGV0ZXJtaW5lIGlmIG1hc3RlciIpOwogICAgCQk8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CgkJfQoKCQkvKiBpZiB0aGVyZSBpcyBvbmx5IG9uZSBSRSB0aGVuIGlzIGhhcyB0byBiZSBtYXN0ZXIgKi8KCQlpZiAoICRyZS9yb3V0ZS1lbmdpbmUgKSB7CgkJCWlmICggY291bnQoICRyZS9yb3V0ZS1lbmdpbmUgKSA9PSAxICkgewoJCQkJPG91dHB1dD4gIm1hc3RlciI7CgkJCX0KCQkJLyogaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBSRSB0aGlzIFhQYXRoIHN0YXRlbWVudCBpcyBvbmx5IHRydWUgb24gdGhlIG1hc3RlciBSRSAqLwoJCQllbHNlIGlmICggJHJlL3JvdXRlLWVuZ2luZVttYXN0ZXJzaGlwLXN0YXRlID09ICJtYXN0ZXIiXS9sb2FkLWF2ZXJhZ2Utb25lICkgewoJCQkJPG91dHB1dD4gIm1hc3RlciI7CgkJCX0KCQkJZWxzZSB7CgkJCQk8b3V0cHV0PiAiYmFja3VwIjsKCQkJfQoJCX0KCQllbHNlIHsKCQkJdmFyICR4bWwgPSB7IGNvcHktb2YgJHJlOyB9CgkJCTx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+ICJFUlJPUjogVW5leHBlY3RlZCByZXNwb25zZTogIiBfICR4bWw7CgkJfQoJfQp9Cgp0ZW1wbGF0ZSBycGNfZmFpbHVyZSgkcnBjLCAkbWVzc2FnZSA9ICJGb2xsb3dpbmcgZXJyb3JzIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7CiAgCWV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmVycm9yIiwgJG1lc3NhZ2UpOwogIAlmb3ItZWFjaCAoJHJwYy8veG5tOmVycm9yKSB7CiAgICAJZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKCX0KfQo=";
				<md5> "2a8821532607825641f58e9d8c1942a7";
			}
			<script> {
				<name> "iceaaa-autoclean-tmp.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IGljZWFhYS1hdXRvY2xlYW4tdG1wLnNsYXgKICogQXV0aG9yICAgICAgICA6IENocmlzdGlhbiBHaWVzZSBjZ2llc2VAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjkKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8KICogUmVsZWFzZSAgICAgICA6IEp1bm9zIDEyLjIrCiAqIFNWTiBJTkZPICAgICAgOgogKgogKiAkUmV2aXNpb246IDM4NDQ2ICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6MzQ6MDYgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IG9wLXNjcmlwdCB3aGljaCBlbmFibGVzIGF1dG9jbGVhbiB0ZW1wb3JhbAogKgogKi8KCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBDT05URVhUID0gIi9oaWRlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gaWNlYWFhLWF1dG9jbGVhbi10bXAiICovCi8qIEBERVNDUklQVElPTiA9ICJvcC1zY3JpcHQgd2hpY2ggZW5hYmxlcyBhdXRvY2xlYW4gdGVtcG9yYWwiICovCgp2ZXJzaW9uIDEuMTsKCm5zIGp1bm9zID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvKi9qdW5vcyI7Cm5zIHhubSA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L3hubS8xLjEveG5tIjsKbnMgamNzID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQvanVub3MvY29tbWl0LXNjcmlwdHMvMS4wIjsKCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CgovKiBUaGlzIGlzIGFuIGV2ZW50IHNjcmlwdCAqLwoKdGVtcGxhdGUganVub3NjcmlwdCgpIHsKICAgIC8qIHJ1biBzY3JpcHQgb24gbWFzdGVyIFJFIG9ubHkgLi4uICovCiAgICBpZiAoICRqdW5vcy1jb250ZXh0L3JlLW1hc3RlciApIHsKICAgICAgICB2YXIgJGF1dG9jbGVhblN0YXR1cyA9IDx0cnVlPjsKICAgICAgICA8eHNsOmRvY3VtZW50IG1ldGhvZD0ieG1sIiBocmVmPSIvbWZzL3Zhci90bXAvYXV0b2NsZWFuIiBhcHBlbmQ9Im5vIj4gewogICAgICAgICAgICBjb3B5LW9mICRhdXRvY2xlYW5TdGF0dXM7CiAgICAgICAgfQogICAgfQp9Cg==";
				<md5> "e3dc8bd625f8ab3fab480e1cd6175946";
			}
			<script> {
				<name> "iceaaa-request-support-information.slax";
				<type> "op";
				<base64> "";
				<md5> "cb6e0e57c8e261a215fa9ef71b30ae33";
			}
			<script> {
				<name> "iceaaa-show-subscriber.slax";
				<type> "op";
				<base64> "";
				<md5> "3b11da8b29033a7e25f597f409ef1d37";
			}
			<script> {
				<name> "iceaaa-show-version.slax";
				<type> "op";
				<base64> "";
				<md5> "efc6b384f468867e9612cac14c9a5ead";
			}
			<script> {
				<name> "iceaaa_combo_1.slax";
				<type> "op";
				<base64> "";
				<md5> "78fee907ccce6b2c49ef1fce4c8a55c2";
			}
			<script> {
				<name> "Interface-Activation.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1BY3RpdmF0aW9uLnNsYXgKICogQXV0aG9yICAgICAgICA6IEFuZHJldyBTaGFycCBhc2hhcnBAanVuaXBlci5uZXQKICogQnVpbGQgICAgICAgICA6IFIyLjkKICogUGxhdGZvcm0gICAgICA6IE1YIFRSSU8gLyBKdW5vcyBTcGFjZQogKiBSZWxlYXNlICAgICAgIDogSnVub3MgMTIuMisgLyAxMy4xUDIKICogU1ZOIElORk8gICAgICA6CiAqCiAqICRSZXY6IDM4NDQ2ICQKICogJERhdGU6IDIwMTQtMTEtMDMgMTM6MzQ6MDYgKzAxMDAgKE1vbiwgMDMgTm92IDIwMTQpICQKICogJEF1dGhvcjogY2dpZXNlICQKICoKICogRGVzY3JpcHRpb24gICA6IEVuYWJsZSBzZWxlY3RlZCBpbnRlcmZhY2UocykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKbnMgZnVuYyBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9mdW5jdGlvbnMiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiAqKioqKioqKioqKioqKioqKiAqLwovKiBTY3JpcHQgQW5ub3RhdGlvbiAqLwovKiAqKioqKioqKioqKioqKioqKiAqLwoKLyogQENPTlRFWFQgPSAiL2RldmljZS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlW25vdChzdGFydHMtd2l0aChuYW1lLCJmeHAwIikpXSIgKi8KLyogQE5BTUUgPSAiUjIuOSAtIEludGVyZmFjZS1BY3RpdmF0aW9uIiAqLwovKiBAREVTQ1JJUFRJT04gPSAiRW5hYmxlIHNlbGVjdGVkIGludGVyZmFjZShzKSIgKi8KLyogQEVYRUNVVElPTlRZUEUgPSAiR1JPVVBFREVYRUNVVElPTiIgKi8KCi8qICoqKioqKiogKi8KLyogR2xvYmFscyAqLwovKiAqKioqKioqICovCnZhciAkc2NyaXB0bmFtZSA9ICJJbnRlcmZhY2UtQWN0aXZhdGlvbi5zbGF4IjsKdmFyICRyZXN1bHRzOwp2YXIgJGludGVyZmFjZXM7CnZhciAkaW50ZXJmYWNlLXJlZ2V4Owp2YXIgJGRldmljZW5hbWU7CnZhciAkcGh5c2ludG5hbWU7Cgp2YXIgJGFyZ3VtZW50cyA9IHsKICAgIDxhcmd1bWVudD4gewogICAgICAgIDxuYW1lPiAiQ09OVEVYVCI7CiAgICAgICAgPGRlc2NyaXB0aW9uPiAiVGhlIGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NyaXB0LiI7CiAgICB9Cn0KcGFyYW0gJENPTlRFWFQ7CgptYXRjaCAvIHsKICAgIDxvcC1zY3JpcHQtcmVzdWx0cz4gewoKICAgICAgICB2YXIgJGludGVyZmFjZXMgPSBqY3M6c3BsaXQoIlxcfCIsICRDT05URVhUKTsKCiAgICAgICAgLyogQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggc2VsZWN0ZWQgaW50ZXJmYWNlLCAgKi8KICAgICAgICAvKiB0aGUgZmlyc3QgaW50ZXJmYWNlIGlzIGF0IHBvc2l0aW9uWzJdIGluIHRoZSBhcnJheSAqLwogICAgICAgIHZhciAkY29uZmlndXJhdGlvbi1jaGFuZ2UgPSA8Y29uZmlndXJhdGlvbj4gewogICAgICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGludGVyZmFjZS1yZWdleCA9IGpjczpyZWdleCggIi9kZXZpY2UoXFxbLipcXF0pL2ludGVyZmFjZS1pbmZvcm1hdGlvbi9waHlzaWNhbC1pbnRlcmZhY2UoXFxbLipcXF0pIiwgKC4pICk7CiAgICAgICAgICAgICAgICAgICAgdmFyICRkZXZpY2VuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgdmFyICRwaHlzaW50bmFtZSA9IHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKHN0cjpyZXBsYWNlKCRpbnRlcmZhY2UtcmVnZXhbM10sIltuYW1lPSIsIiIpLCJdIiwiIiksIlwiIiwiIik7CiAgICAgICAgICAgICAgICAgICAgPGludGVyZmFjZT4gewogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4gJHBoeXNpbnRuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICA8ZW5hYmxlPjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qIEEgY29ubmVjdGlvbiBtdXN0IGJlIG9wZW5lZCAqLwogICAgICAgIHZhciAkY29ubmVjdGlvbiA9IGpjczpvcGVuKCk7CiAgICAgICAgLyogYWJvcnQgaWYgbm8gY29ubmVjdGlvbiB0byBsb2NhbCBtZ2QgKi8KICAgICAgICBpZiAoJGNvbm5lY3Rpb24vLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY29ubmVjdGlvbi8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY29ubmVjdGluZyBvbiBtZ2Qgb24gdGhpcyBSRSIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQoKICAgICAgICAvKgogICAgICAgICAqIFRoZSBjb25uZWN0aW9uIGFuZCBjaGFuZ2UgYXJlIHNldCBhcyBwYXJhbWV0ZXJzIHRvIHRoZSBqY3M6bG9hZC1jb25maWd1cmF0aW9uIHRlbXBsYXRlCiAgICAgICAgICogd2hpY2ggcGVyZm9ybXMgdGhlIGNoYW5nZS4gIFRoZSA6PSBvcGVyYXRvciBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSAkcmVzdWx0cyB2YXJpYWJsZQogICAgICAgICAqIGlzIGEgbm9kZS1zZXQgcmF0aGVyIHRoYW4gYSByZXN1bHQgdHJlZSBmcmFnbWVudC4KICAgICAgICAgKi8KICAgICAgICB2YXIgJHJlc3VsdHMgOj0geyBjYWxsIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24oICRjb25uZWN0aW9uLCAkY29uZmlndXJhdGlvbiA9ICRjb25maWd1cmF0aW9uLWNoYW5nZSApOyB9CgogICAgICAgIC8qIENoZWNrIGZvciBlcnJvcnMgLSByZXBvcnQgdGhlbSBpZiB0aGV5IG9jY3VycmVkLiAqLwogICAgICAgIGlmICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJHJlc3VsdHMsICRtZXNzYWdlID0gIkVycm9yIGFwcGx5aW5nIGNvbmZpZ3VyYXRpb24uIik7CiAgICAgICAgICAgIGZvci1lYWNoICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgICAgICA8SEVBRD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGVuYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiMiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJBbiBlcnJvciBoYXMgYmVlbiBlbmNvdW50ZXJlZDogIiBfIG1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICA8b3V0cHV0PiB7CiAgICAgICAgICAgICAgICA8SFRNTD4gewogICAgICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT4gIkludGVyZmFjZSBlbmFibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiMSIpOwogICAgICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJUaGUgZm9sbG93aW5nIGludGVyZmFjZShzKSBoYXZlIG5vdyBiZWVuIGVuYWJsZWQuIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnQtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRldm5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcGludG5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAkcGludG5tIF8gIiA7ICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRyZXN1bHRzL2NvbW1pdC1yZXN1bHRzL3JvdXRpbmctZW5naW5lL2NvbW1pdC1zdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJDb21taXQgc3VjY2Vzcy4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkcmVzdWx0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uaW5mbyIsICJTQ1JJUFRfQUNUSU9OX0lGX0VOQUJMRTogU2NyaXB0IGFjdGlvbiB0YWtlbiB0byBlbmFibGUgcGh5c2ljYWwgaW50ZXJmYWNlLiIpOwogICAgICAgIHZhciAkY2xvc2UtcmVzdWx0cyA9IGpjczpjbG9zZSggJGNvbm5lY3Rpb24gKTsKICAgICAgICBpZiAoJGNsb3NlLXJlc3VsdHMvLi4vL3hubTplcnJvcikgewogICAgICAgICAgICBjYWxsIHJwY19mYWlsdXJlKCRycGMgPSAkY2xvc2UtcmVzdWx0cy8uLiwgJG1lc3NhZ2UgPSAiRXJyb3IgY2xvc2luZyBjb25uZWN0aW9uLiIpOwogICAgICAgICAgICA8eHNsOm1lc3NhZ2UgdGVybWluYXRlPSJ5ZXMiPiA7CiAgICAgICAgfQogICAgfQp9Cgp0ZW1wbGF0ZSBycGNfZmFpbHVyZSgkcnBjLCAkbWVzc2FnZSA9ICJGb2xsb3dpbmcgZXJyb3JzIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnYXRoZXIgZGF0YTogIikgewogIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmVycm9yIiwgJG1lc3NhZ2UpOwogIGZvci1lYWNoICgkcnBjLy94bm06ZXJyb3IpIHsKICAgIGV4cHIgamNzOnN5c2xvZygiZGFlbW9uLmVycm9yIiwgbWVzc2FnZSk7CiAgfQp9Cg==";
				<md5> "546f5f9cfd02cfcb6b976ddf3b6074ed";
			}
			<script> {
				<name> "Interface-Deactivation.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IEludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheAogKiBBdXRob3IgICAgICAgIDogQW5kcmV3IFNoYXJwIGFzaGFycEBqdW5pcGVyLm5ldAogKiBCdWlsZCAgICAgICAgIDogUjIuOQogKiBQbGF0Zm9ybSAgICAgIDogTVggVFJJTyAvIEp1bm9zIFNwYWNlCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKyAvIDEzLjFQMgogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldjogMzg0NDYgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzozNDowNiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogRGlzYWJsZSBzZWxlY3RlZCBpbnRlcmZhY2UocykuCiAqCiAqLwoKdmVyc2lvbiAxLjA7CgpucyBqdW5vcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zLyovanVub3MiOwpucyB4bm0gPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC94bm0vMS4xL3hubSI7Cm5zIGpjcyA9ICJodHRwOi8veG1sLmp1bmlwZXIubmV0L2p1bm9zL2NvbW1pdC1zY3JpcHRzLzEuMCI7Cm5zIHN0ciA9ICJodHRwOi8vZXhzbHQub3JnL3N0cmluZ3MiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKbnMgZnVuYyBleHRlbnNpb24gPSAiaHR0cDovL2V4c2x0Lm9yZy9mdW5jdGlvbnMiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7CgppbXBvcnQgIi4uL2ltcG9ydC9qdW5vcy54c2wiOwppbXBvcnQgImpzcGFjZS1saWIuc2xheCI7CgovKiAqKioqKioqKioqKioqKioqKiAqLwovKiBTY3JpcHQgQW5ub3RhdGlvbiAqLwovKiAqKioqKioqKioqKioqKioqKiAqLwoKLyogQENPTlRFWFQgPSAiL2RldmljZS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlW25vdChzdGFydHMtd2l0aChuYW1lLCJmeHAwIikpXSIgKi8KLyogQE5BTUUgPSAiUjIuOSAtIEludGVyZmFjZS1EZWFjdGl2YXRpb24iICovCi8qIEBERVNDUklQVElPTiA9ICJEaXNhYmxlIHNlbGVjdGVkIGludGVyZmFjZShzKSIgKi8KLyogQEVYRUNVVElPTlRZUEUgPSAiR1JPVVBFREVYRUNVVElPTiIgKi8KLyogQENPTkZJUk1BVElPTiA9ICJBcmUgeW91IHN1cmUgdGhhdCB5b3Ugd2FudCB0byBkaXNhYmxlIHRoZSBzZWxlY3RlZCBpbnRlcmZhY2Uocyk/IiAqLwoKLyogKioqKioqKiAqLwovKiBHbG9iYWxzICovCi8qICoqKioqKiogKi8KdmFyICRzY3JpcHRuYW1lID0gIkludGVyZmFjZS1EZWFjdGl2YXRpb24uc2xheCI7CnZhciAkcmVzdWx0czsKdmFyICRpbnRlcmZhY2VzOwp2YXIgJGludGVyZmFjZS1yZWdleDsKdmFyICRkZXZpY2VuYW1lOwp2YXIgJHBoeXNpbnRuYW1lOwoKdmFyICRhcmd1bWVudHMgPSB7CiAgICA8YXJndW1lbnQ+IHsKICAgICAgICA8bmFtZT4gIkNPTlRFWFQiOwogICAgICAgIDxkZXNjcmlwdGlvbj4gIlRoZSBjb250ZXh0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHNjcmlwdC4iOwogICAgfQp9CnBhcmFtICRDT05URVhUOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgdmFyICRpbnRlcmZhY2VzID0gamNzOnNwbGl0KCJcXHwiLCAkQ09OVEVYVCk7CgogICAgICAgIC8qIENyZWF0ZSBjb25maWd1cmF0aW9uIGZvciBlYWNoIHNlbGVjdGVkIGludGVyZmFjZSwgICovCiAgICAgICAgLyogdGhlIGZpcnN0IGludGVyZmFjZSBpcyBhdCBwb3NpdGlvblsyXSBpbiB0aGUgYXJyYXkgKi8KICAgICAgICB2YXIgJGNvbmZpZ3VyYXRpb24tY2hhbmdlID0gPGNvbmZpZ3VyYXRpb24+IHsKICAgICAgICA8aW50ZXJmYWNlcz4gewogICAgICAgICAgICBmb3ItZWFjaCAoICRpbnRlcmZhY2VzICkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW50ZXJmYWNlLXJlZ2V4ID0gamNzOnJlZ2V4KCAiL2RldmljZShcXFsuKlxcXSkvaW50ZXJmYWNlLWluZm9ybWF0aW9uL3BoeXNpY2FsLWludGVyZmFjZShcXFsuKlxcXSkiLCAoLikgKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJGRldmljZW5hbWUgPSBzdHI6cmVwbGFjZShzdHI6cmVwbGFjZSgkaW50ZXJmYWNlLXJlZ2V4WzJdLCJbbmFtZT1cIiIsIiIpLCJcIl0iLCIiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgJHBoeXNpbnRuYW1lID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludGVyZmFjZS1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICA8aW50ZXJmYWNlPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPiAkcGh5c2ludG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNhYmxlPjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogQSBjb25uZWN0aW9uIG11c3QgYmUgb3BlbmVkICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKICAgICAgICAvKiBhYm9ydCBpZiBubyBjb25uZWN0aW9uIHRvIGxvY2FsIG1nZCAqLwogICAgICAgIGlmICgkY29ubmVjdGlvbi8uLi8veG5tOmVycm9yKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRjb25uZWN0aW9uLy4uLCAkbWVzc2FnZSA9ICJFcnJvciBjb25uZWN0aW5nIG9uIG1nZCBvbiB0aGlzIFJFIik7CiAgICAgICAgICAgIDx4c2w6bWVzc2FnZSB0ZXJtaW5hdGU9InllcyI+IDsKICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gYW5kIGNoYW5nZSBhcmUgc2V0IGFzIHBhcmFtZXRlcnMgdG8gdGhlIGpjczpsb2FkLWNvbmZpZ3VyYXRpb24gdGVtcGxhdGUKICAgICAgICAgKiB3aGljaCBwZXJmb3JtcyB0aGUgY2hhbmdlLiAgVGhlIDo9IG9wZXJhdG9yIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlICRyZXN1bHRzIHZhcmlhYmxlCiAgICAgICAgICogaXMgYSBub2RlLXNldCByYXRoZXIgdGhhbiBhIHJlc3VsdCB0cmVlIGZyYWdtZW50LgogICAgICAgICovCiAgICAgICAgdmFyICRyZXN1bHRzIDo9IHsgY2FsbCBqY3M6bG9hZC1jb25maWd1cmF0aW9uKCAkY29ubmVjdGlvbiwgJGNvbmZpZ3VyYXRpb24gPSAkY29uZmlndXJhdGlvbi1jaGFuZ2UgKTsgfQoKICAgICAgICAvKiBDaGVjayBmb3IgZXJyb3JzIC0gcmVwb3J0IHRoZW0gaWYgdGhleSBvY2N1cnJlZC4gKi8KICAgICAgICBpZiAoICRyZXN1bHRzLy94bm06ZXJyb3IgKSB7CiAgICAgICAgICAgIGNhbGwgcnBjX2ZhaWx1cmUoJHJwYyA9ICRyZXN1bHRzLCAkbWVzc2FnZSA9ICJFcnJvciBhcHBseWluZyBjb25maWd1cmF0aW9uLiIpOwogICAgICAgIGZvci1lYWNoICggJHJlc3VsdHMvL3hubTplcnJvciApIHsKICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgICAgICA8SEVBRD4gewogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+ICJJbnRlcmZhY2UgZGlzYWJsZWQgcmVzdWx0czoiOwogICAgICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIyIik7CiAgICAgICAgICAgICAgICAgICAgICAgIDxCT0RZPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkFuIGVycm9yIGhhcyBiZWVuIGVuY291bnRlcmVkOiAiIF8gbWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgPG91dHB1dD4gewogICAgICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiSW50ZXJmYWNlIGRpc2FibGVkIHJlc3VsdHM6IjsKICAgICAgICAgICAgICAgICAgICBjb3B5LW9mIGpzcGFjZTpodG1sLXN0eWxlKCIxIik7CiAgICAgICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIlRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlKHMpIGhhdmUgbm93IGJlZW4gZGlzYWJsZWQuIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yLWVhY2ggKCAkaW50ZXJmYWNlcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnQtcmVnZXggPSBqY3M6cmVnZXgoICIvZGV2aWNlKFxcWy4qXFxdKS9pbnRlcmZhY2UtaW5mb3JtYXRpb24vcGh5c2ljYWwtaW50ZXJmYWNlKFxcWy4qXFxdKSIsICguKSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRldm5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFsyXSwiW25hbWU9XCIiLCIiKSwiXCJdIiwiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcGludG5tID0gc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2Uoc3RyOnJlcGxhY2UoJGludC1yZWdleFszXSwiW25hbWU9IiwiIiksIl0iLCIiKSwiXCIiLCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAkcGludG5tIF8gIiA7ICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRyZXN1bHRzL2NvbW1pdC1yZXN1bHRzL3JvdXRpbmctZW5naW5lL2NvbW1pdC1zdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJDb21taXQgc3VjY2Vzcy4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS1vZiAkcmVzdWx0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIH0KICAgICAgICBleHByIGpjczpzeXNsb2coImRhZW1vbi5pbmZvIiwgIlNDUklQVF9BQ1RJT05fSUZfRElTQUJMRTogU2NyaXB0IGFjdGlvbiB0YWtlbiB0byBkaXNhYmxlIHBoeXNpY2FsIGludGVyZmFjZS4iKTsKICAgICAgICB2YXIgJGNsb3NlLXJlc3VsdHMgPSBqY3M6Y2xvc2UoICRjb25uZWN0aW9uICk7CiAgICAgICAgaWYgKCRjbG9zZS1yZXN1bHRzLy4uLy94bm06ZXJyb3IpIHsKICAgICAgICAgICAgY2FsbCBycGNfZmFpbHVyZSgkcnBjID0gJGNsb3NlLXJlc3VsdHMvLi4sICRtZXNzYWdlID0gIkVycm9yIGNsb3NpbmcgY29ubmVjdGlvbi4iKTsKICAgICAgICAgICAgPHhzbDptZXNzYWdlIHRlcm1pbmF0ZT0ieWVzIj4gOwogICAgICAgIH0KICAgIH0KfQoKCnRlbXBsYXRlIHJwY19mYWlsdXJlKCRycGMsICRtZXNzYWdlID0gIkZvbGxvd2luZyBlcnJvcnMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdhdGhlciBkYXRhOiAiKSB7CiAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCAkbWVzc2FnZSk7CiAgZm9yLWVhY2ggKCRycGMvL3hubTplcnJvcikgewogICAgZXhwciBqY3M6c3lzbG9nKCJkYWVtb24uZXJyb3IiLCBtZXNzYWdlKTsKICB9Cn0K";
				<md5> "848b19458691f96af7d7099e309c5940";
			}
			<script> {
				<name> "jspace-lib.slax";
				<type> "op";
				<base64> "";
				<md5> "c116ef76c201bdd59262869505fed3c4";
			}
			<script> {
				<name> "juniper-commit.slax";
				<type> "op";
				<base64> "";
				<md5> "700d450e718c95e1269afe4c08b5aa36";
			}
			<script> {
				<name> "Logical_Interface-Activation.slax";
				<type> "op";
				<base64> "";
				<md5> "da6b2dbd075d982f98a73fc06a4dc103";
			}
			<script> {
				<name> "Logical_Interface-Deactivation.slax";
				<type> "op";
				<base64> "";
				<md5> "c50193edbac2fb73ae6c25e502da8746";
			}
			<script> {
				<name> "op-sfp-data.slax";
				<type> "op";
				<base64> "";
				<md5> "fdc6664102d8c56ce8dd25a012234815";
			}
			<script> {
				<name> "op-show-optics-hw.slax";
				<type> "op";
				<base64> "";
				<md5> "07f3429746791e44745c4633100f3e8d";
			}
			<script> {
				<name> "PPPoE-Show_IP_Count.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfSVBfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldjogMzg0NDYgJAogKiAkRGF0ZTogMjAxNC0xMS0wMyAxMzozNDowNiArMDEwMCAoTW9uLCAwMyBOb3YgMjAxNCkgJAogKiAkQXV0aG9yOiBjZ2llc2UgJAogKgogKiBEZXNjcmlwdGlvbiAgIDogU2hvdyBudW1iZXIgb2YgdXNlZCBJUCBhZGRyZXNzZXMgYWNyb3NzIFBQUG9FIHNlc3Npb25zIChncm91cGVkIGJ5IElQdjQsIElQdjYgZnJhbWVkIGFuZCBkZWxlZ2F0ZWQgYWRkcmVzc2VzKS4KICoKICovCgp2ZXJzaW9uIDEuMDsKCi8qIE5hbWVzcGFjZSBkZWNsYXJhdGlvbnMgKi8KbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBleHNsIGV4dGVuc2lvbiA9ICJodHRwOi8vZXhzbHQub3JnL2NvbW1vbiI7Cm5zIGpzcGFjZSA9ICJodHRwOi8vanNwYWNlLXV0aWxzL2FzaGFycEBqdW5pcGVyLm5ldCI7CgovKiBJbXBvcnRzICovCmltcG9ydCAiLi4vaW1wb3J0L2p1bm9zLnhzbCI7CmltcG9ydCAianNwYWNlLWxpYi5zbGF4IjsKCi8qIEp1bm9zIFNwYWNlIHNwZWNpZmljIGNvbnRleHQsIG5hbWUgYW5kIGRlc2NyaXB0aW9uICovCi8qIEBOQU1FID0gIlIyLjkgLSBQUFBvRS1TaG93X0lQX0NvdW4iICovCi8qIEBERVNDUklQVElPTiA9ICJTaG93IG51bWJlciBvZiB1c2VkIElQIGFkZHJlc3NlcyBhY3Jvc3MgUFBQb0Ugc2Vzc2lvbnMgKGdyb3VwZWQgYnkgSVB2NCwgSVB2NiBmcmFtZWQgYW5kIGRlbGVnYXRlZCBhZGRyZXNzZXMpLiIgKi8KCi8qIEdsb2JhbCB2YXJpYWJsZXMgKi8KdmFyICRzY3JpcHRuYW1lID0gIlBQUG9FLVNob3dfSVBfQ291bnQuc2xheCI7CnZhciAkZ2V0LXN1YnNjcmliZXJzLWNsaWVudC10eXBlLXBwcG9lLWRldGFpbC1ycGM7CnZhciAkcmVzdWx0czsKCm1hdGNoIC8gewogICAgPG9wLXNjcmlwdC1yZXN1bHRzPiB7CiAgICAgICAgdmFyICR0dHkgPSAkanVub3MtY29udGV4dC90dHk7CgogICAgICAgIC8qIFJlcXVlc3Qgc3Vic2NyaWJlciBpbmZvcm1hdGlvbiBmaWx0ZXJlZCBvbiBQUFBvRSAqLwogICAgICAgIHZhciAgJGdldC1zdWJzY3JpYmVycy1jbGllbnQtdHlwZS1wcHBvZS1kZXRhaWwtcnBjID0gPGdldC1zdWJzY3JpYmVycz4gewogICAgICAgICAgICA8Y2xpZW50LXR5cGU+InBwcG9lIjsKICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgfQogICAgICAgIHZhciAkcmVzdWx0cyA9IGpjczppbnZva2UoICRnZXQtc3Vic2NyaWJlcnMtY2xpZW50LXR5cGUtcHBwb2UtZGV0YWlsLXJwYyApOwoKICAgICAgICB2YXIgJGlwdjQtYWRkcmVzcy1jb3VudCA9IGNvdW50KCRyZXN1bHRzL3N1YnNjcmliZXJbc3RhdGUgPT0gIkFjdGl2ZSJdL2lwLWFkZHJlc3MpOwogICAgICAgIHZhciAkaXB2NmRlbGVnYXRlZC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXB2Ni1wcmVmaXgpOwogICAgICAgIHZhciAkaXB2NmZyYW1lZC1hZGRyZXNzLWNvdW50ID0gY291bnQoJHJlc3VsdHMvc3Vic2NyaWJlcltzdGF0ZSA9PSAiQWN0aXZlIl0vaXB2Ni11c2VyLXByZWZpeCk7CgogICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiTnVtYmVyIG9mIHVzZWQgSVAgYWRkcmVzc2VzIGFjcm9zcyBQUFBvRSBzZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgY29weS1vZiBqc3BhY2U6aHRtbC1zdHlsZSgiNyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPEJPRFk+IHsKICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIxIj47CiAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iY2VsbHRpdGxlIj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAiSVB2NCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY2IGRlbGVnYXRlZCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJJUHY2IGZyYW1lZCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkdHR5ICE9ICJub24tdHR5IikgewogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjQ6ICIgXyAkaXB2NC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCJJUHY2IGRlbGVnYXRlZDogIiBfICRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICBleHByIGpjczpvdXRwdXQoIklQdjYgZnJhbWVkOiAiIF8gJGlwdjZmcmFtZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkaXB2NC1hZGRyZXNzLWNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRpcHY2ZGVsZWdhdGVkLWFkZHJlc3MtY291bnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciAoJGlwdjZmcmFtZWQtYWRkcmVzcy1jb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K";
				<md5> "76167f3405b571ccd2fec83acbda266f";
			}
			<script> {
				<name> "PPPoE-Show_Sessions_Count.slax";
				<type> "op";
				<base64> "LyoKICogRmlsZW5hbWUgICAgICA6IFBQUG9FLVNob3dfU2Vzc2lvbnNfQ291bnQuc2xheAogKiBBdXRob3IgICAgICAgIDogQ2hyaXN0aWFuIEdpZXNlIGNnaWVzZUBqdW5pcGVyLm5ldCwgRmxvcmlhbiBIYXJ0dW5nIGZoYXJ0dW5nQGp1bmlwZXIubmV0CiAqIEJ1aWxkICAgICAgICAgOiBSMi45CiAqIFBsYXRmb3JtICAgICAgOiBNWCBUUklPCiAqIFJlbGVhc2UgICAgICAgOiBKdW5vcyAxMi4yKwogKiBTVk4gSU5GTyAgICAgIDoKICoKICogJFJldmlzaW9uOiAzODQ0NiAkCiAqICREYXRlOiAyMDE0LTExLTAzIDEzOjM0OjA2ICswMTAwIChNb24sIDAzIE5vdiAyMDE0KSAkCiAqICRBdXRob3I6IGNnaWVzZSAkCiAqCiAqIERlc2NyaXB0aW9uICAgOiBTaG93IG51bWJlciBvZiBQUFBvRS9MMlRQIHNlc3Npb25zIHBlciBpbnRlcmZhY2UgYW5kIGNoYXNzaXMKICoKICovCgovKiBKdW5vcyBTcGFjZSBzcGVjaWZpYyBjb250ZXh0LCBuYW1lIGFuZCBkZXNjcmlwdGlvbiAqLwovKiBAQ09OVEVYVCA9ICIvZGV2aWNlIiAqLwovKiBATkFNRSA9ICJSMi45IC0gUFBQb0UtU2hvd19TZXNzaW9uc19Db3VudCIgKi8KLyogQERFU0NSSVBUSU9OID0gIlNob3cgbnVtYmVyIG9mIFBQUG9FL0wyVFAgc2Vzc2lvbnMgcGVyIGludGVyZmFjZSBhbmQgY2hhc3NpcyIgKi8KCnZlcnNpb24gMS4xOwoKbnMganVub3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy8qL2p1bm9zIjsKbnMgeG5tID0gImh0dHA6Ly94bWwuanVuaXBlci5uZXQveG5tLzEuMS94bm0iOwpucyBqY3MgPSAiaHR0cDovL3htbC5qdW5pcGVyLm5ldC9qdW5vcy9jb21taXQtc2NyaXB0cy8xLjAiOwpucyBqc3BhY2UgPSAiaHR0cDovL2pzcGFjZS11dGlscy9hc2hhcnBAanVuaXBlci5uZXQiOwoKaW1wb3J0ICIuLi9pbXBvcnQvanVub3MueHNsIjsKaW1wb3J0ICJqc3BhY2UtbGliLnNsYXgiOwoKdmFyICRhcmd1bWVudHMgPSB7CiAgICA8YXJndW1lbnQ+IHsKICAgICAgICA8bmFtZT4gImRpc3BsYXkiOwogICAgICAgIDxkZXNjcmlwdGlvbj4gImFsbHx1c2VkIjsKICAgIH0KfQpwYXJhbSAkZGlzcGxheSA9ICJhbGwiOwoKbWF0Y2ggLyB7CiAgICA8b3Atc2NyaXB0LXJlc3VsdHM+IHsKCiAgICAgICAgLyogb3BlbiBjb25uZWN0aW9uICovCiAgICAgICAgdmFyICRjb25uZWN0aW9uID0gamNzOm9wZW4oKTsKCiAgICAgICAgbXZhciAkc3VtUFBQb0UgPSAwOwogICAgICAgIG12YXIgJHN1bUwyVFAgPSAwOwoKICAgICAgICB2YXIgJHR0eSA9ICRqdW5vcy1jb250ZXh0L3R0eTsKCiAgICAgICAgdmFyICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uID0gPGdldC1pbnRlcmZhY2UtaW5mb3JtYXRpb24+IHsKICAgICAgICAgICAgPHRlcnNlPjsKICAgICAgICB9CiAgICAgICAgdmFyICRpbnRlcmZhY2UtaW5mb3JtYXRpb24gPSBqY3M6ZXhlY3V0ZSggJGNvbm5lY3Rpb24sICRnZXQtaW50ZXJmYWNlLWluZm9ybWF0aW9uICk7CgogICAgICAgIDxvdXRwdXQ+IHsKICAgICAgICAgICAgPEhUTUw+IHsKICAgICAgICAgICAgICAgIDxIRUFEPiB7CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPiAiTnVtYmVyIG9mIFBQUG9FL0wyVFAgc2Vzc2lvbnMiOwogICAgICAgICAgICAgICAgICAgIGNvcHktb2YganNwYWNlOmh0bWwtc3R5bGUoIjciKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA8Qk9EWT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMSI+OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgIkludGVyZmFjZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJTZXNzaW9ucyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJQUFBvRSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJjZWxsdGl0bGUiPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICJMMlRQIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgZm9yLWVhY2goICRpbnRlcmZhY2UtaW5mb3JtYXRpb24vL3BoeXNpY2FsLWludGVyZmFjZSApIHsKCiAgICAgICAgICAgIGlmICggc3RhcnRzLXdpdGgobmFtZSwgImdlIikgfHwgc3RhcnRzLXdpdGgoIG5hbWUsICJ4ZSIgKSApIHsKCiAgICAgICAgICAgICAgICB2YXIgJGdldC1zdWJzY3JpYmVycy1pbnQgPSA8Z2V0LXN1YnNjcmliZXJzPiB7CiAgICAgICAgICAgICAgICAgICAgPHBoeXNpY2FsLWludGVyZmFjZT4gbmFtZTsKICAgICAgICAgICAgICAgICAgICA8Y2xpZW50LXR5cGU+ICJwcHBvZSI7CiAgICAgICAgICAgICAgICAgICAgPGRldGFpbD47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50ID0gamNzOmV4ZWN1dGUoICRjb25uZWN0aW9uLCAkZ2V0LXN1YnNjcmliZXJzLWludCApOwoKICAgICAgICAgICAgICAgIHZhciAkc3VtSW50UFBQb0UgPSBjb3VudCggJHN1YnNjcmliZXItaW5mb3JtYXRpb24taW50L3N1YnNjcmliZXJbIGFjY2Vzcy10eXBlID09ICJQUFBvRSIgXSApOwogICAgICAgICAgICAgICAgdmFyICRzdW1JbnRMMlRQID0gY291bnQoICRzdWJzY3JpYmVyLWluZm9ybWF0aW9uLWludC9zdWJzY3JpYmVyWyBjb250YWlucyggU3RhdGUsICJUdW5uZWxlZCIgKSBdICk7CgogICAgICAgICAgICAgICAgaWYgKCAkc3VtSW50UFBQb0UgPiAwIHx8ICRkaXNwbGF5ID09ICJhbGwiICkgewoKICAgICAgICAgICAgICAgICAgICBzZXQgJHN1bVBQUG9FID0gJHN1bVBQUG9FICsgJHN1bUludFBQUG9FOwogICAgICAgICAgICAgICAgICAgIHNldCAkc3VtTDJUUCA9ICRzdW1MMlRQICsgJHN1bUludEwyVFA7CgogICAgICAgICAgICAgICAgICAgIGlmICggJHR0eSAhPSAibm9uLXR0eSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCBqY3M6cHJpbnRmKCAiSW50ZXJmYWNlOiAlLTE1cyBTZXNzaW9uczogJTVzIFBQUG9FOiAlNXMgTDJUUDogJTVzIiwgbmFtZSwgJHN1bUludFBQUG9FLCAkc3VtSW50UFBQb0UgLSAkc3VtSW50TDJUUCwgJHN1bUludEwyVFAgKSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByIChuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1JbnRQUFBvRSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtSW50UFBQb0UgLSAkc3VtSW50TDJUUCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByICgkc3VtSW50TDJUUCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggJHR0eSAhPSAibm9uLXR0eSIpIHsKICAgICAgICAgICAgZXhwciBqY3M6b3V0cHV0KCBqY3M6cHJpbnRmKCAiQ2hhc3NpczogJTE3cyBTZXNzaW9uczogJTVzIFBQUG9FOiAlNXMgTDJUUDogJTVzXHIiLCAiICIsICRzdW1QUFBvRSwgJHN1bVBQUG9FIC0gJHN1bUwyVFAsICRzdW1MMlRQICkgKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIDx0ciBzdHlsZT0iaGVpZ2h0OiAyMHB4ICFpbXBvcnRhbnQ7Ij4gewogICAgICAgICAgICAgICAgPHRkPiB7IGV4cHIgKCAiIiApOyB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPHRyPiB7CiAgICAgICAgICAgICAgICA8dGQgaWQ9ImNlbGx0aXRsZSI+IHsKICAgICAgICAgICAgICAgICAgICBleHByICgiQ2hhc3NpcyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgPHRkPiB7CiAgICAgICAgICAgICAgICAgICAgZXhwciAoJHN1bVBQUG9FKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1QUFBvRSAtICRzdW1MMlRQKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDx0ZD4gewogICAgICAgICAgICAgICAgICAgIGV4cHIgKCRzdW1MMlRQKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogY2xvc2UgY29ubmVjdGlvbiAqLwogICAgICAgIHZhciAkY2xvc2VSZXN1bHQgPSBqY3M6Y2xvc2UgKCAkY29ubmVjdGlvbiApOwogICAgfQoKICAgIH0gLyogYm9keSAqLwogICAgfSAvKiBoZWFkICovCiAgICB9IC8qIGh0bWwgKi8KfQo=";
				<md5> "87a0a0f3a3923ca22813bf56e1dd4b00";
			}
			<script> {
				<name> "show-subscriber.slax";
				<type> "op";
				<base64> "";
				<md5> "5cf952ab59a7671a19daed5efafde1ea";
			}

        } /* ... embedded scripts */

        /* parse credentials for selected devices */
        var $devices = jspace:credentials();

        /* counter for result summary */
        mvar $deviceCounter = 0;
        mvar $connectionSuccess = 0;
        mvar $connectionFailed = 0;
        mvar $installSuccess = 0;
        mvar $installFailed = 0;
        mvar $commitSuccess = 0;
        mvar $commitFailed = 0;
        mvar $autocleanSuccess = 0;
        mvar $autocleanFailed = 0;

        mvar $results = <info> "installer results";
        mvar $csvResultBNG = "BNG%2CRESULT%2CCOMMIT%2CMESSAGE%2CAUTOCLEAN%2CMESSAGE%0A";
        mvar $csvResultFiles = "BNG%2CFILES%2CRESULT%2CMD5%2CMESSAGE%0A";

        if ( $devices ) {
            for-each( $devices/device) {
                set $deviceCounter = $deviceCounter +1;

                var $local = jcs:open( (target) , (user) , (passwd) );
                var $devicename = (host);

                if ( $local//self::xnm:error ) {
                    set $connectionFailed = $connectionFailed +1;
                    append $results += <device> {
                        <host> $devicename;
                        <connection-error>;
                    }
                } else {
                    set $connectionSuccess = $connectionSuccess +1;

                    mvar $commitResult = false();
                    var $fileResult := <result> {
                        for-each ( $embedded//script ) {
                            call file-put( $local, $re = "re0", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                            call file-put( $local, $re = "re1", $type = type, $name = name, $base64 = base64, $md5 = md5 );
                        }
                    }
                    if ( $fileResult//error ) {
                        set $installFailed = $installFailed +1;
                        set $commitResult = <xnm:error> {
                            <message> "not commited because script install failed";
                        }
                    } else {
                        set $installSuccess = $installSuccess +1;
                        if ( $commit == "true" ) { 
                            var $commit-configuration = <commit-configuration> {
                                <log> "autoclean via installer";
                                <force-synchronize>;
                            }
                            set $commitResult = jcs:execute( $local, $commit-configuration );
                            if ( $commitResult//commit-success ) {
                                set $commitSuccess = $commitSuccess +1;
                            } else {
                                set $commitFailed = $commitFailed +1;
                            }
                        }
                    }

                    var $autoclean-tmp = <command> "op url /var/db/scripts/op/iceaaa-autoclean-tmp.slax";
                    var $autocleanResult = jcs:execute( $local, $autoclean-tmp );
                    if ( $autocleanResult//self::xnm:error ) {
                        set $autocleanFailed = $autocleanFailed +1;
                    } else {
                        set $autocleanSuccess = $autocleanSuccess +1;
                    }

                    append $results += <device> {
                        <host> $devicename;
                        <files> {
                            copy-of $fileResult;
                        }
                        if ($commitResult) {
                            <commit> {
                                copy-of $commitResult;
                            }
                        }
                        <autoclean> {
                            if ( $autocleanResult//self::xnm:error ) {
                                copy-of $autocleanResult;
                            } else {
                                <enabled>;
                            }
                        }
                    }
                }
                var $closeResult = jcs:close( $local );
            }
        }
        <output> {
            <HTML> {
                <HEAD> {
                    <title> "iCEAAA Scripts Version R2.9";
                    <style type="text/css"> {
                        expr "body { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000;border-style: solid;border-color: transparent;background-color: white}";
                        expr "td { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 12px;color:#000; }";
                        expr "p { font-family: Verdana, Georgia, Arial, sans-serif;font-size: 14px;color:#000; }";
                        expr "table { font-size: 1.0em;border-collapse: collapse;width: 99% }";
                        expr "progress[value] { background-color: #eee; border-radius: 2px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset; }";
                        expr "#tableheader { font-weight: bolder;text-align: center;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderleft { font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#tableheaderright { font-weight: bolder;text-align: right;background-color: #7592A9;color: #fff }";
                        expr "#tablereverse { font-size: 16px; font-weight: bolder;text-align: left;background-color: #7592A9;color: #fff }";
                        expr "#celltitle { font-weight: bolder }";
                        expr "#cellwarning { text-align: center; background-color: #ff0000; color: #fff; font-weight: bolder; }";
                        expr "#cellamber { text-align: center; background-color: #f87431; color: #fff; font-weight: bolder; }";
                        expr "#center {text-align: center}";
                        expr "#failed { color: red }";
                        expr "#failed2 { color: red; font-style: italic; }";
                        expr "#content { margin-bottom: 15px; }";
                        expr ".footer { position: fixed; bottom: 0px; width: 100%; background-color: white; margin: 0px; }";
                    }
                }
                <BODY> {
                    /* Java Script ... */
                    <script> {
                        expr "function toggleVisibility(id) {";
                        expr "    if(document.getElementById(id).style.display == 'table-row-group') {";
                        expr "        document.getElementById(id).style.display = 'none';";
                        expr "    } else {";
                        expr "        document.getElementById(id).style.display = 'table-row-group';";
                        expr "    }";
                        expr "}";
                        expr "function openInNewWindow() {";
                        expr "    var myWindow = window.open('about:blank', 'ExportWindow', 'scrollbars=yes,menubar=yes,location=no');";
                        expr "    myWindow.document.write( document.getElementsByTagName( 'html' )[0].outerHTML );";
                        expr "    var openButton = myWindow.document.getElementById('openInNewWindowButton');";
                        expr "    openButton.parentNode.removeChild( openButton );";
                        expr "}";
                    }
                    <div id="content"> {
                        <p style="text-align: center; font-family: Verdana, Georgia, Arial, sans-serif, bold; font-size: 18px; color:#000;"> { 
                            expr "iCEAAA Scripts Installer Version R2.9";
                        }
                        <p> { 
                            expr "Summary Result for " _ $deviceCounter _ " Devices";
                        }
                        <table> {
                            <colgroup> {
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:1%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "SUCCESSFUL";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FAILED";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                                <th id="tableheaderleft"> {
                                    expr "";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Connections (NETCONF)";
                                }
                                <td> {
                                    expr $connectionSuccess;
                                }
                                <td> {
                                    expr $connectionFailed;
                                }
                                mvar $connectionPercent = 0;
                                <td> {
                                    if ($connectionSuccess > 0) {
                                        set $connectionPercent = floor($connectionSuccess div ($connectionSuccess + $connectionFailed) * 100 );
                                    }
                                    <progress max="100" value=$connectionPercent>;
                                }
                                <td> {
                                    expr $connectionPercent _ "%";
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Installation";
                                }
                                <td> {
                                    expr $installSuccess;
                                }
                                <td> {
                                    expr $installFailed;
                                }
                                mvar $installPercent = 0;
                                <td> {
                                    if ($installSuccess > 0) {
                                        set $installPercent = floor($installSuccess div ($installSuccess + $installFailed) * 100 );
                                    }
                                    <progress max="100" value=$installPercent>;
                                }
                                <td> {
                                    expr $installPercent _ "%";
                                }
                            }
                            if ( $commit == "true" ) {
                                <tr> {
                                    <td> {
                                        expr "Commit";
                                    }
                                    <td> {
                                        expr $commitSuccess;
                                    }
                                    <td> {
                                        expr $commitFailed;
                                    }
                                    mvar $commitPercent = 0;
                                    <td> {
                                        if ($commitSuccess > 0) {
                                            set $commitPercent = floor($commitSuccess div ($commitSuccess + $commitFailed) * 100 );
                                        }
                                        <progress max="100" value=$commitPercent>;
                                    }
                                    <td> {
                                        expr $commitPercent _ "%";
                                    }
                                }
                            }
                            <tr> {
                                <td> {
                                    expr "Autoclean Enabled";
                                }
                                <td> {
                                    expr $autocleanSuccess;
                                }
                                <td> {
                                    expr $autocleanFailed;
                                }
                                mvar $autocleanPercent = 0;
                                <td> {
                                    if ($autocleanSuccess > 0) {
                                        set $autocleanPercent = floor($autocleanSuccess div ($autocleanSuccess + $autocleanFailed) * 100 );
                                    }
                                    <progress max="100" value=$autocleanPercent>;
                                }
                                <td> {
                                    expr $autocleanPercent _ "%";
                                }
                            }
                        }
                        <br>;
                        <input id="openInNewWindowButton" type="Button" value="Open in Window" onclick="openInNewWindow(); return false;">;
                        <p> { 
                            expr "Detailed Result";
                        }
                        <table> {
                            <colgroup> {
                                <col style="width:15%; white-space:nowrap;">;
                                <col style="white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                                <col style="width:10%; white-space:nowrap;">;
                            }
                            <tr> {
                                <th id="tableheaderleft"> {
                                    expr "BNG";
                                }
                                <th id="tableheaderleft"> {
                                    expr "FILES";
                                }
                                <th id="tableheaderleft"> {
                                    expr "RESULT";
                                }
                                <th id="tableheaderleft"> {
                                    expr "MD5";
                                }
                            }
                            for-each ( $results//device ) {
                                var $bng = host;
                                var $detailsTag = "details" _ $bng;
                                set $csvResultBNG = $csvResultBNG _ $bng _ "%2C";
                                <tr> {
                                    <td> {
                                        expr $bng;
                                    }
                                    <td> {
                                        <input type="Button" value="Details" onclick="toggleVisibility('" _ $detailsTag _ "');">;
                                    }
                                    if ( .//error || .//xnm:error || .//connection-error ) {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <td id="failed"> {
                                            expr "failed";
                                        }
                                    } else { 
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C";
                                        <td> {
                                            expr "successful";
                                        }
                                    }
                                    <td> {
                                        expr "";
                                    }
                                }
                                <tbody id=$detailsTag style="display: none;"> {
                                    if ( $commit == "true" ) {
                                        /* commit result ... */
                                        if ( .//commit-success ) {
                                            set $csvResultBNG = $csvResultBNG _ "successful%2C%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td> {
                                                    expr "successful";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                        } else {
                                            set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr "commit configuraton";
                                                }
                                                <td id="failed"> {
                                                    expr "failed";
                                                }
                                                <td> {
                                                    expr "";
                                                }
                                            }
                                            for-each ( ./commit//xnm:error ) {
                                                var $lines = jcs:break-lines( message );
                                                for-each( $lines ) {
                                                    set $csvResultBNG = $csvResultBNG _ .;
                                                    <tr> {
                                                        <td> {
                                                            expr "";
                                                        }
                                                        <td colspan="3" id="failed2"> {
                                                            expr "error: " _ .;
                                                        }
                                                    }
                                                }
                                            }
                                            set $csvResultBNG = $csvResultBNG _ "%2C";
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "%2C%2C";
                                    }
                                    /* autoclean result ... */
                                    if ( .//autoclean/enabled ) {
                                        set $csvResultBNG = $csvResultBNG _ "successful%2C%0A";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td> {
                                                expr "successful";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                    } else {
                                        set $csvResultBNG = $csvResultBNG _ "failed%2C";
                                        <tr> {
                                            <td> {
                                                expr "";
                                            }
                                            <td> {
                                                expr "autoclean enabled";
                                            }
                                            <td id="failed"> {
                                                expr "failed";
                                            }
                                            <td> {
                                                expr "";
                                            }
                                        }
                                        for-each ( ./autoclean//xnm:error ) {
                                            var $lines = jcs:break-lines( message );
                                            for-each( $lines ) {
                                                set $csvResultBNG = $csvResultBNG _ .;
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        }
                                        set $csvResultBNG = $csvResultBNG _ "%0A";
                                    }
                                    /* file results ... */
                                    for-each ( .//file ) {
                                        set $csvResultFiles = $csvResultFiles _ $bng _ "%2C" _ name _ "%2C" _ result _ "%2C" _ md5 _ "%2C";
                                        if ( error ) {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td id="failed"> {
                                                    expr result;
                                                }
                                                <td id="failed"> {
                                                    expr md5;
                                                }
                                            }
                                            for-each ( error/message ) {
                                                set $csvResultFiles = $csvResultFiles _ . _" ";
                                                <tr> {
                                                    <td> {
                                                        expr "";
                                                    }
                                                    <td colspan="3" id="failed2"> {
                                                        expr "error: " _ .;
                                                    }
                                                }
                                            }
                                        } else {
                                            <tr> {
                                                <td> {
                                                    expr "";
                                                }
                                                <td> {
                                                    expr name;
                                                }
                                                <td> {
                                                    expr result;
                                                }
                                                <td> {
                                                    expr md5;
                                                }
                                            }
                                        }
                                        set $csvResultFiles = $csvResultFiles _"%0A";
                                    }
                                }
                            }
                        }
                        <br>;
                        set $csvResultBNG = str:replace( $csvResultBNG, " ", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, " ", "%20" );
                        set $csvResultBNG = str:replace( $csvResultBNG, ",", "%20" );
                        set $csvResultFiles = str:replace( $csvResultFiles, ",", "%20" );
                        <a href="data:application/octet-stream," _ $csvResultBNG _ ""> {
                            expr "Download CSV BNG";
                        }
                        <a href="data:application/octet-stream," _ $csvResultFiles _ ""> {
                            expr "Download CSV Files";
                        }
                        <br>;
                    }
                    var $duration = date:seconds() - date:seconds( $localtime );
                    <p class="footer" style="text-align: left; font-family: Verdana, Georgia, Arial, sans-serif; font-size: 9px; color:#000;"> { 
                        expr "Date: " _ $localtime _ " Execution Time: " _ $duration _ "s";
                    }
                } /* ... BODY */
            }
        }
    }
}

/*
 * This function ...
 */
template file-put( $local, $re, $type, $name, $base64, $md5 ) {
    var $filename = $re _ ":/var/db/scripts/" _ $type _ "/" _ $name;
    var $filePut = {
        <file-put> {
            <filename> $filename;
            <encoding> "base64";
            <permission> "644";
            <delete-if-exist>;
            <file-contents> $base64;
        }
    }
    var $result = jcs:execute( $local, $filePut );
    var $return := <file> {
        <name> $filename;
        <re> $re;
        if ( $result//self::xnm:error ) {
            <result> "failed";
            <md5> "unknown";
            <error> {
                for-each( $result//self::xnm:error ) {
                    <message> message;
                }
            }
        } else {
            <result> "successful";
            var $getChecksum = <get-checksum-information> { 
                <path> $filename;
            }
            var $checksum = jcs:execute( $local, $getChecksum );
            if ( $checksum//checksum == $md5 ) {
                <md5> "okay";
            } else {
                <md5> "failed";
                <error>;
            }
        }
    }
    copy-of $return;
}

/*
 * This function reads the credentials that are automatically supplied to the script 
 * when the annotation to pass the device credentials is used. this is a requirement
 * for a locally executed grouped execution script, as the script must handle all
 * device connections.
 */
<func:function name="jspace:credentials"> {
    if( $CONTEXT ) {
        var $splitCredentials = str:split( $credentials, "\\;" );
        var $targets := {
            for-each ( $splitCredentials ) {
                var $splitCredential = str:split( ., "\\:" );
                var $user-target = str:split($splitCredential[1], "\@");
                var $host = substring-before( substring-after( $deviceipmap, substring-after( $splitCredential[1], "@" ) _ "\":\"" ), "\"" );
                <device> {
                    <target> {
                        expr $user-target[2];
                    }
                    <user> {
                        expr $user-target[1];
                    }
                    <passwd> {
                        expr $splitCredential[2];
                    }
                    <host> {
                        expr $host;
                    }
                }
            }
        }
        <func:result select="$targets">;
    }
    else {
        <func:result select="false()">;
    }
}

