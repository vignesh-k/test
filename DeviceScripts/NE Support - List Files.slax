/* 
	Script to list all files of a directory.
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 09.03.2015
	Last Modified By: bcersows
	###NE Support - List Files.slax;v1.0;2015.03.09
*/

/*
	Changelog:
	----------
	1.0; 09.03.2015: 
		- First version.
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device[matches(name, '\w{3}J\d{2,3}') or matches(name, '^(bng|BNG).*$')]" */
/* @NAME = "NE Support - List Files" */
/* @DESCRIPTION = "Script to list all files of a directory." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'folderPath','defaultvalue':'/var/log'},{'name':'filter','defaultvalue':''}]" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @PROMOTE = "yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "folderPath";
		<description> "If a path different from '/var/log/' is wanted. Optional.";
	}
	<argument> {
		<name> "filter";
		<description> "Filter for file name. Optional. Single wildcard '.', multiple ones with '*'.";
	}
}
param $CONTEXT;
param $folderPath;
param $filter;

match / {
<op-script-results> {
/*template junoscript() {*/
	/*mvar $results;*/
	
	mvar $localtime = date:date-time();
	
	/*
	*	Get configuration.
	*/
	
	mvar $hostname;       /* credentials of user@ip           */
	mvar $splitHostname;  /* array of user and ip credentials */
	mvar $ip;             /* credentials ip address           */
	mvar $user;           /* credentials username             */
	mvar $password;       /* credentials password             */
	
	/* Split interfaces and Credentials */
	var $devices = jcs:split("\\|", $CONTEXT);
	var $splitCredentials = str:split( $credentials , "\\;" );
	
	/* Push the devices and according credentials into one node-set. */
	var $deviceCredentials := {
		for-each ( $devices ) {
			var $position = position();
			<device> {
				<name> .;
				<credentials> $splitCredentials[ $position ];
			}
		}
	}
	
	var $myDevice = {
		for-each ( $deviceCredentials/device/name ) {
			<xsl:sort>;
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", . )[2];
			if ( position() != last() ) {
				expr ", ";
			}
		}
	}
	
	var $path = {
		if ( jcs:empty( $folderPath ) ) {
			expr "/var/log/";
		} else {
			expr $folderPath;
			var $substr = substring( $folderPath, string-length( $folderPath ) );
			if ( $substr != '/' and $substr != '\\' ) {
				expr '/';
			}
		}
	}
	var $myRPC = <file-list> {
		<detail>;
		<path> $path;
	}
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
				<style> {
					<xsl:text disable-output-escaping="yes">
						".tableSaver {
							width: 100%;
							overflow: auto;
						}
						.tableSaver table {
							white-space: nowrap;
						}
						.tableSaver table td, .tableSaver table th {
							padding-left: 5px;
						}
						
						.btn {
							background-color: #337ab7;
							border-color: #2e6da4;
							color: #fff;
							-moz-user-select: none;
							background-image: none;
							border: 1px solid transparent;
							cursor: pointer;
							display: inline-block;
							font-weight: 400;
							margin-bottom: 0;
							text-align: center;
							vertical-align: middle;
							white-space: nowrap;
							
							border-radius: 3px;
							font-size: 12px;
							line-height: 1.5;
							padding: 5px 10px;
						}
						.btn:hover {
							background-color: #286090;
							border-color: #204d74;
							color: #fff;
						}
						.ms {
							font-family: monospace;
						}"
					;
				}
				<script> {
					<xsl:text disable-output-escaping="yes">
						"function byteLength(str) {
							var s = str.length;
							for (var i=str.length-1; i>=0; i--) {
								var code = str.charCodeAt(i);
								if (code > 0x7f && code <= 0x7ff) s++;
								else if (code > 0x7ff && code <= 0xffff) s+=2;
								if (code >= 0xDC00 && code <= 0xDFFF) i--;
							}
							return s;
						}"
					;
				}
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Files"; }
						copy-of bcersows:insertDownloadButton( "resultsTable", "Files" );
					}
					
					if ( jcs:empty( $path ) or $path == 'Please specify path name.' ) {
						<p class='majorError'> {
							expr 'No folder specified.';
						}
					} else {
						<table id='resultsTable' class="xwide"> {
							<tr> {
								<th> 'Device';
								<th> 'Folder';
								<th> 'Name';
								<th> 'Owner';
								<th> 'Permissions owner';
								<th> 'Permissions group';
								<th> 'Permissions others';
								<th> 'Size (in MByte)';
								<th> 'Date';
							}
							for-each ( $deviceCredentials/device ) {
								<xsl:sort>;
								/* Using the count of unique devices found, the correct connection */
								/* parameters to be used can be derived from $splitCredentials     */
								var $splitCredential = str:split( ./credentials, "\\:" );
								
								set $hostname = $splitCredential[1];
								set $password = $splitCredential[2];
								set $splitHostname = str:split( $hostname[1] , "\@");
								set $user = $splitHostname[1];
								set $ip = $splitHostname[2];
								var $dev = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", ./name )[2];
								
								var $connection = jcs:open( $ip , $user , $password );
									if ( $connection && !$connection//self::xnm:error ) {
										var $myResult = jcs:execute( $connection, $myRPC );
										if( $myResult//self::xnm:error ) {
											<tr> {
												<td> $dev;
												<td> "Error while requesting file list.";
											}
										} else {
											for-each( $myResult/directory ) {
												var $curPath = ./directory-name;
												for-each( ./file-information ) {
													<tr> {
														<td> $dev;
														<td> $curPath;
														<td> ./file-name;
														<td> ./file-owner;
														var $permissions = str:split( ./file-permissions/@junos:format, '' );
														<td class='ms' title="" _ ./file-permissions/@junos:format _ ""> {
															<span> $permissions[2] _ $permissions[3] _ $permissions[4];
															var $viewIcon = {
																expr 'View_Details_';
																if ( $permissions[2] != 'r' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $writeIcon = {
																expr 'Edit_';
																if ( $permissions[3] != 'w' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $execIcon = {
																expr 'Export_';
																if ( $permissions[4] != 'x' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															<image src="./../mainui/images/icons/" _ $viewIcon style="vertical-align: top;" title="read" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $writeIcon style="vertical-align: top;" title="write" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $execIcon style="vertical-align: top;" title="execute" alt=" " height="14px">;
														}
														<td class='ms' title="" _ ./file-permissions/@junos:format _ ""> {
															<span> $permissions[5] _ $permissions[6] _ $permissions[7];
															var $viewIcon = {
																expr 'View_Details_';
																if ( $permissions[5] != 'r' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $writeIcon = {
																expr 'Edit_';
																if ( $permissions[6] != 'w' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $execIcon = {
																expr 'Export_';
																if ( $permissions[7] != 'x' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															<image src="./../mainui/images/icons/" _ $viewIcon style="vertical-align: top;" title="read" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $writeIcon style="vertical-align: top;" title="write" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $execIcon style="vertical-align: top;" title="execute" alt=" " height="14px">;
														}
														<td class='ms' title="" _ ./file-permissions/@junos:format _ ""> {
															<span> $permissions[8] _ $permissions[9] _ $permissions[10];
															var $viewIcon = {
																expr 'View_Details_';
																if ( $permissions[8] != 'r' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $writeIcon = {
																expr 'Edit_';
																if ( $permissions[9] != 'w' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															var $execIcon = {
																expr 'Export_';
																if ( $permissions[10] != 'x' ) { expr 'Disable_'; }
																expr '18X18.png';
															}
															<image src="./../mainui/images/icons/" _ $viewIcon style="vertical-align: top;" title="read" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $writeIcon style="vertical-align: top;" title="write" alt=" " height="14px">;
															<image src="./../mainui/images/icons/" _ $execIcon style="vertical-align: top;" title="execute" alt=" " height="14px">;
														}
														<td class="alignLeft" title="" _ ./file-size _ " Byte"> { expr format-number( ./file-size div 1024 div 1024, "00###,###.000" ); }
														<td class="alignLeft" title="Unix Timestamp: " _ ./file-date _ "."> { expr ./file-date/@junos:format; }
													}
												}
											}
										}
									} else {
										<tr> {
											<td> $dev;
											<td> "Could not open connection.";
										}
									}
								expr jcs:close( $connection );
								
								set $counter = $counter + 1;
							}
						}
					}
					/*copy-of bcersows:insertBackButton();*/
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.0";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}