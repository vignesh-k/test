/* 
	Script to log out the user "space" on the BNGs to restart the SSH sessions.
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 24.06.2014
	Last Modified By: bcersows
	###Script_NE - Restart Space SSH Session.slax;v1.0;2014.06.24
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "NE - Restart Space SSH Session" */
/* @DESCRIPTION = "Script to log out the user "space" on the BNGs to restart the SSH session." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */
/* @CONFIRMATIONs = "This Script will log out the user 'space', the SSH session from Space to the device will end.<br />Are you really (r e a l l y) sure to continue?"  */
/* @PASSDEVICECREDENTIALS = "true" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/	
	mvar $localtime = date:date-time();
	
	mvar $hostname;       /* credentials of user@ip           */
	mvar $splitHostname;  /* array of user and ip credentials */
	mvar $ip;             /* credentials ip address           */
	mvar $user;           /* credentials username             */
	mvar $password;       /* credentials password             */
	
	/* Split interfaces and Credentials */
	var $devices = jcs:split("\\|", $CONTEXT);
	var $splitCredentials = str:split( $credentials , "\\;" );
	
	/* Push the devices and according credentials into one node-set. */
	var $deviceCredentials := {
		for-each ( $devices ) {
			var $position = position();
			<device> {
				<name> .;
				<credentials> $splitCredentials[ $position ];
			}
		}
	}
	
	var $myDevice = {
		for-each ( $deviceCredentials/device/name ) {
			<xsl:sort>;
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", . )[2];
			if ( position() != last() ) {
				expr ", ";
			}
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				var $rpc =  <request-logout-user> {
					<user> "space";
				}
				
				for-each ( $deviceCredentials/device ) {
					<xsl:sort>;
					/* Using the count of unique devices found, the correct connection */
					/* parameters to be used can be derived from $splitCredentials     */
					var $splitCredential = str:split( ./credentials, "\\:" );
					
					set $hostname = $splitCredential[1];
					set $password = $splitCredential[2];
					set $splitHostname = str:split( $hostname[1] , "\@");
					set $user = $splitHostname[1];
					set $ip = $splitHostname[2];
					var $dev = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", ./name )[2];
					
					var $connection = jcs:open( $ip , $user , $password );
					
					<div> {
						<p class="bold subheader">{
							<span class="left"> "Log Out Results BNG '" _ $dev _ "'";
						}
						if ( $connection && !$connection//self::xnm:error ) {
							expr "1";
							var $results = jcs:execute( $connection, $rpc );
							expr "2";
							call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
							expr "3";
							<p> {
								expr "4";
								expr $results/logout-user-message;
								expr "4";
							}
							
							copy-of bcersows:insertBackButton();
							var $unlock-results = jcs:execute( $connection, "unlock-database" );
							expr jcs:close( $connection );
						} else {
							<div class="error"> {
								expr "Could not open a connection..";
							}
						}
					}
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.0";
					<span class="right"> { 
						expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
					}
				}
			}
		}
	}
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}