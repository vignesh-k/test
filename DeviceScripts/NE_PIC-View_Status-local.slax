/*
 * Filename      : NE_PIC-View_Status-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Show Physical Interface Card state, type, and uptime.
 *
 */

version 1.0;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* Junos Space specific context, name and description */
/* @CONTEXT = "/device/chassis-inventory/chassis/chassis-module[starts-with(name,"FPC")]/chassis-sub-module[starts-with(name,"PIC")]" */
/* @NAME = "View PIC Status" */
/* @DESCRIPTION = "Show Physical Interface Card state, type, and uptime." */
/* @ISLOCAL = "true" */

/* Global variables */
var $scriptname = "NE_PIC-View_Status-local.slax";
var $get-pic-detail-rpc;
var $results;
var $regex;
var $result-regex;
var $local = jcs:open();

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}
param $CONTEXT;

match / {
	<op-script-results> {
		/* abort if no connection to local mgd */
		if ($local/..//xnm:error) {
			call rpc_failure($rpc = $local/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}
		var $regex = "/device.*/chassis-inventory/chassis\\[name=\"(.*)\"\\]/chassis-module\\[name=\"(.* ([0-9]+))\"\\]/chassis-sub-module\\[name=\"(.* ([0-9]+))\"\\]";
		var $result-regex = jcs:regex( $regex , $CONTEXT );

		/* Request status for a single FPC */
		var  $get-pic-detail-rpc = <get-pic-detail> {
			<fpc-slot> jspace:parse-context-chassis-submod("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\".* ([0-9]+)\"\\]/chassis-sub-module\\[name=\".* ([0-9]+)\"\\]",$CONTEXT)[2];
			<pic-slot> jspace:parse-context-chassis-submod("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\".* ([0-9]+)\"\\]/chassis-sub-module\\[name=\".* ([0-9]+)\"\\]",$CONTEXT)[3];
		}

		var $results = jcs:execute( $local , $get-pic-detail-rpc );
		if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error collecting pic detail.");
			<xsl:message terminate="yes"> ;
		}

		<output> {
			<HTML> {
				<HEAD> {
					<title> "Physical Interface Card state";
					copy-of jspace:html-style("6");
				}
				<BODY> {
					<table border="1"> {
						for-each ($results/fpc/pic-detail) {
							<td colspan="6" id="tableheader"> {
								expr "FPC slot " _ (slot) _ ", PIC slot " _ (pic-slot) _ " information:";
							}
							<tr> {
								<td id="celltitle"> {
									expr "Type";
								}
								<td colspan="5"> {
									expr (pic-type);
								}
							}
							<tr> {
								<td id="celltitle"> {
									expr "State";
								}
								<td colspan="5"> {
									expr (state);
								}
							}
							if (pic-version) {
								<tr> {
									<td id="celltitle"> {
										expr "PIC version";
									}
									<td colspan="5"> {
										expr (pic-version);
									}
								}
							}
							if (cpu-total) {
								<tr> {
									<td id="celltitle"> {
										expr "CPU load average";
									}
									<td colspan="5"> {
										expr (cpu-total) _ " percent";
									}
								}
							}
							if (cpu-interrupt) {
								<tr> {
									<td id="celltitle"> {
										expr "Interrupt load average";
									}
									<td colspan="5"> {
										expr (cpu-interrupt) _ " percent";
									}
								}
							}
							if (memory-dram-size) {
								<tr> {
									<td id="celltitle"> {
										expr "Total DRAM size";
									}
									<td colspan="5"> {
										expr (memory-dram-size) _ " MB";
									}
								}
							}
							if (memory-buffer-utilization) {
								<tr> {
									<td id="celltitle"> {
										expr "Memory buffer utilization";
									}
									<td colspan="5"> {
										expr (memory-buffer-utilization) _ " percent";
									}
								}
							}
							if (memory-heap-utilization) {
								<tr> {
									<td id="celltitle"> {
										expr "Memory heap utilization";
									}
									<td colspan="5"> {
										expr (memory-heap-utilization) _ " percent";
									}
								}
							}
							<tr> {
								<td id="celltitle"> {
									expr "Uptime";
								}
								<td colspan="5"> {
									expr (up-time);
								}
							}
							if (pic-package) {
								<tr> {
									<td id="celltitle"> {
										expr "Package";
									}
									<td colspan="5"> {
										expr (pic-package);
									}
								}
							}
							if (port-information/port) {
								<tr> {
									<td colspan="6" id="tableheaderleft"> {
										expr "PIC port information:";
									}
								}
								<tr> {
									<td id="celltitle"> {
										expr "Port";
									}
									<td id="celltitle"> {
										expr "Cable type";
									}
									<td id="celltitle"> {
										expr "Fibre type";
									}
									<td id="celltitle"> {
										expr "Xcvr vendor";
									}
									<td id="celltitle"> {
										expr "Xcvr vendor part number";
									}
									<td id="celltitle"> {
										expr "Wavelength";
									}
								}
								for-each (port-information/port) {
									<tr> {
										<td id="paddedcell"> {
											expr (port-number);
										}
										<td id="paddedcell"> {
											expr (cable-type);
										}
										<td id="paddedcell"> {
											expr (fiber-mode);
										}
										<td id="paddedcell"> {
											expr (sfp-vendor-name);
										}
										<td id="paddedcell"> {
											expr (sfp-vendor-pno);
										}
										<td id="paddedcell"> {
											expr (wavelength);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		expr jcs:syslog("daemon.info", "SCRIPT_ACTION_PIC_STATUS: Script action taken to show status of the Physical Interface Card (PIC).");
		var $close-results = jcs:close( $local );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
