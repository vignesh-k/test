/* 
	Script to reconfigure the RADIUS servers in maintenance or disaster mode.
	
	Waiting times:
		- maintenance:
			- (0-3 * 10 secs)
			- 5 secs
			- 10 secs
			> 15 secs
		- disaster:
			- (0-3 * 10 secs)
			- (0-3 * 10 secs)	-to lock again
			- 600 secs
			- 10 secs
			> 610 secs
*/

/*
	Author: bcersows
	Version: 1.05
	Date: 14.08.2014
	Last Modified By: bcersows
	Radius Backup Procedure v17
	###Radius_Proxy_Script-Script_version.slax;v1.05;2014.08.14
*/

/*
	Changelog:
	----------
	1.05; 04.08.2014: 
		- Make the Script to work with many PPPoE sessions. Fixes errors that might occur.
			14.08.2014:
		- Fixed the rollback mechanism.
		- Added commit-and-quit that unlocks the config after commiting.
		- Disaster: Removed one commit (after setting accounting on) according to Martin Schuster.
		- Disaster: Changed the request to get amount of sessions in the system.
*/

/*
	test aaa ppp agent-remote-id DEU.DTAG.BICOTEST01 user test password test
	NBG proxies: normal 217.89.20.100, maintenance 217.89.20.70.
	op Radius_Proxy_Script-Script_version CONTEXT "/device[name=\"BNGJMX4\"]" oldServerIP 10.201.100.100 mode Disaster newServerIP 12.12.12.12
	invoke-debugger cli
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns date = "http://exslt.org/dates-and-times";

import "../import/junos.xsl";

/* @CONTEXT = "/device|/device/configuration/access/radius-server|/device/configuration" */
/* @NAME = "Radius-Proxy-Umschaltung JTAC" */
/* @DESCRIPTION = "Skript zur Umschaltung des Radius-Servers. Dabei kann entweder nach Maintenance- oder nach Disaster-Vorgehensweise umgeschalten werden. Benutzt keine Configlets. Nach v16." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @CONFIRMATIONs = "Wirklich umschalten? Bitte ausgewählten Modus überprüfen. <br />Im Disaster-Modus ist eine längere Wartepause nötig. Das bitte beachten."  */
/* @PROMOTEs = "yes" */

/* Loopback 11.99.0.16 */
mvar $counter = 0;
mvar $output = "";
mvar $commitCount = 0; mvar $didCommit = false();

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

var $unlockRpc = "unlock-configuration";

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $changeMsg = "Changed by Script";
	mvar $unlock-results;
	mvar $load-results;
	mvar $loadConfigRpcs;
	mvar $booleanTester;
	mvar $try;
	mvar $lock-results;
	mvar $configRpc;
	mvar $results;
		
	<output>  {
	
		/* Open connection, test if it succeds. */
		var $connection = jcs:open();
		if ( $connection ) { } else {	
			expr "[LOG] MSG#ERR000: Konnte keine Verbindung zum BNG aufbauen. Abbruch."; expr "\n";
			<xsl:message terminate="yes"> "[LOG] MSG#ERR000: Konnte keine Verbindung zum BNG aufbauen.";
		}	
		
		var $myDevice = {
			if ( $CONTEXT ) {
				expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
			} else {
				var $devQuery = <get-configuration> {
					<configuration> {
						<system> {
							<host-name>;
						}
					}
				}
				var $devQueryResult = jcs:execute( $connection, $devQuery );
				expr $devQueryResult/system/host-name;	
			}
		}
		
		set $unlock-results = jcs:execute( $connection, $unlockRpc );
		
		set $booleanTester = true(); set $try = 0; var $maxTries = 3;
		while ( $booleanTester ) {
			set $lock-results = jcs:execute( $connection, "lock-configuration" );
			set $try = $try + 1;
			if( $lock-results//self::xnm:error ) {
				if ( $try > $maxTries ) {
					set $booleanTester = false();
					set $unlock-results = jcs:execute( $connection, $unlockRpc );
					expr "[LOG] MSG#ERR044: Konnte Datenbank nicht exklusiv belegen."; expr "\n";
					<xsl:message terminate="yes"> "Konnte Datenbank nicht exklusiv belegen.";
				}
				expr "Fehler beim exklusiven Zugriff auf Datenbank. Vesuch Nummer " _ $try _ " von " _ $maxTries _ ". Versuche erneut."; expr "\n";
				expr jcs:sleep( 10 );	/* Wait some seconds.. */
			} else {
				set $booleanTester = false();
			}
		}
		
		/* Wait until all subscribers are logged out. Max time: 11 minutes.*/
		set $booleanTester = true(); set $try = 0; var $sleepMaxTries = 44;
		while ( $booleanTester ) {
			/* TODO: Might need to clean up. */
			/*var $checkResults = jcs:execute( $connection, "get-subscribers-summary" );*/
			var $checkSessionsESSMResults = jcs:execute( $connection, "get-extensible-subscriber-services-sessions" );
			var $checkSessionsPPPoEResults = jcs:execute( $connection, "get-pppoe-statistics-information" );
			set $try = $try + 1;
			/* VLANs are ok, need to check if no ESSM and PPPoEs. */
			/*if( $checkResults//self::xnm:error || 
				$checkResults/counters/session-type-essm ||
				$checkResults/counters/session-type-pppoe
				) {*/
			if( $checkSessionsPPPoEResults//self::xnm:error || 
				$checkSessionsESSMResults//self::xnm:error || 
				$checkSessionsPPPoEResults/pppoe-statistics/active-sessions > 0 ||
				$checkSessionsESSMResults/sessions/total-sessions > 0 ||
				true()
				) {
				if ( $try > $sleepMaxTries ) {
					set $booleanTester = false();
					expr "Stopping to check for logged out subscribers after " _ $try _ " tries. Session counter: .";
					call close( $connection );
				}
				expr "Subscriber check: " _ $try _ " of " _ $sleepMaxTries _ "."; expr "\n";
				expr jcs:sleep( 15 );
			} else {
				expr "[LOG] No subscribers.\n";
				set $booleanTester = false();
			}
		}
		
		call commit-and-quit( $connection, $msg = "\tradius backup disaster finished" );
		/* Wait 10 seconds */
		expr jcs:sleep ( 10 );
		
		call checkPPP( $connection );
		
		expr " "; expr "\n"; expr "[LOG] MSG#OK099 Konfiguration erfolgreich abgeschlossen"; 

		set $unlock-results = jcs:execute( $connection, $unlockRpc );
		set $didCommit = false();	/* So that no rollback happens. */
		expr jcs:close( $connection );
	}
}
}

template close ( $connection ) {
	expr "[LOG] Closing connection.";
	if ( $didCommit ) {
		call rollback( $connection, $rbCount = $commitCount );
	}
	var $unlock-results = jcs:execute( $connection, $unlockRpc );
	expr "[LOG] Unlocked database: "; 	
	if( $unlock-results//self::xnm:error ) {
		expr "[LOG] MSG#ERR065" _ $unlock-results;
	}
	expr jcs:close( $connection );
}

template rollback( $connection, $rbCount = 0 ) {
	var $myRbCount = {
		if ( $mode == "Maintenance" ) {
			expr $rbCount;
		} else {
			var $lastCommits = jcs:execute( $connection, "get-commit-information" );
			/* If the nth commit has the first disaster commit message as comment, then no commit happened in between. */
			if ( contains( $lastCommits/commit-history[ sequence-number == ($rbCount - 1) ]/log/text(), $disasterModeFirstMessage ) ) {
				expr $rbCount;
			} else {
				expr $lastCommits/commit-history[log == $disasterModeFirstMessage]/sequence-number/text() + 1;
			}
		}
	}
	
	var $rollbackRPC = <load-configuration rollback=$myRbCount>;
	var $rb-results = jcs:execute( $connection, $rollbackRPC );
	/*var $rb-results := {
		call jcs:load-configuration( $connection, $rollback=$rbCount )
	}*/
	var $msg = "\tRadiusProxyScript: Rolled back " _ $myRbCount _ ".";
	call commit( $connection, $msg );
	if( $rb-results//self::xnm:error ) {
		expr "[LOG] MSG#ERR066 Rollback nicht erfolgreich."; expr "\n";
	} else {
		expr "[LOG] MSG#OK066 Rollback erfolgreich."; expr "\n";
	}
}

template commit ( $connection, $msg = "\tRadius Proxy Script commit." ) {
	expr "Committing..."; expr "\n";
	var $commit-configuration = <commit-configuration> {
		if ( $msg ) {
			<log> $msg;
		}
	}
	var $commit-results = jcs:execute($connection, $commit-configuration);
	if( $commit-results//self::xnm:error ) {
		expr "[LOG] MSG#ERR067 Commit konnte nich durchgefuehrt werden."; expr "\n";
		for-each ( $commit-results//self::xnm:error ) {
			expr "\t -> " _ . _ "\n";
		}
		call close( $connection );
		<xsl:message terminate="yes"> "Commit konnte nich durchgefuehrt werden.";
	}
	set $didCommit = true();
	set $commitCount = $commitCount + 1;
}

template commit-and-quit ( $connection, $msg ) {
	call commit( $connection, $msg );
	var $unlock-results = jcs:execute( $connection, $unlockRpc );
	expr "Unlocked the configuration.\n";
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		expr $msg;
		call close( $connection );
		<xsl:message terminate="yes"> $msg;
	}
}

template checkPPP ( $connection ) {
	expr "\n#Test RADIUS"; expr "\n";
	var $AAATest_LineID = "DEU.DTAG.BICOTEST01";
	var $rpc = <get-ppp-user-aaa-test-result> {
		<user> "test";
		<password> "test";
		<agent-remote-id> $AAATest_LineID;
	};
	var $uselessFirstTestResults = jcs:execute( $connection, $rpc );
	var $testResults = jcs:execute( $connection, $rpc );
	if( $testResults//self::xnm:error ) {
		expr "MSG#ERR021 AAA-Test nicht erfolgreich"; expr "\n";
		for-each ( $testResults//self::xnm:error ) {
			expr " MSG#Error: " _ .;
		}
	} else if ( $testResults/aaa-test-status == "Authentication Deny" ) {
		expr "MSG#ERR021 AAA-Test nicht erfolgreich"; expr "\n";
		/*expr " AAA-Test: Authentication denied"; expr "\n";*/
		expr " AAA-Test: '" _ $testResults/aaa-test-status[2] _ "'"; expr "\n";
		if ( $testResults/aaa-test-status[2] == "Reason : timeout" ) {
			expr "PFS ist nicht erreichbar."; expr "\n";
		}
	} else if ( $testResults/aaa-test-status == "Authentication Grant" ) {
		expr "MSG#OK03 AAA-Test erfolgreich"; expr "\n";
	}
}