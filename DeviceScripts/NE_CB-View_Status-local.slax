/*
 * Filename      : NE_CB-View_Status-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Show Control Board information.
 *
 */

version 1.0;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* @CONTEXT = "/device/chassis-inventory/chassis/chassis-module[starts-with(name,"CB")]" */
/* @NAME = "View Control Board Status" */
/* @DESCRIPTION = "Show Control Board information." */
/* @ISLOCAL = "true" */

/* Global variables */
var $scriptname = "NE_CB-View_Status-local.slax";
var $get-environment-cb-information-rpc;
var $results;
var $local = jcs:open();

var $arguments = {
  <argument> {
    <name> "CONTEXT";
    <description> "The context associated with this script.";
  }
}
param $CONTEXT;

match / {
  <op-script-results> {
  	/* abort if no connection to local mgd */
		if ($local/..//xnm:error) {
			call rpc_failure($rpc = $local/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}
    /* Request environment status */
    var  $get-environment-cb-information-rpc = <get-environment-cb-information> {
      <slot> jspace:parse-context-chassis("/device.*/chassis-inventory/chassis.*/chassis-module\\[name=\".* ([0-9]+)\"\\]",$CONTEXT);
    }
    var $results = jcs:execute( $local , $get-environment-cb-information-rpc );
    if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error collecting environment cb information.");
			<xsl:message terminate="yes"> ;
		}

    <output> { 
      <HTML> {
        <HEAD> {
          <title> "Control Board status";
          copy-of jspace:html-style("3");
        }
        <BODY> {
          <table border="1"> {
            for-each ( $results/environment-component-item ) {
              <tr> {
                <td colspan="2" id="tableheader"> {
                  expr (name) _ " status:";
								}
							}
							<tr> {
								<td id="celltitle"> {
									expr "State";
								}
								<td> {
									expr (state);
								}
							}
							for-each ( temperature-reading) {
								<tr> {
									<td id="celltitle"> {
										expr (temperature-name);
									}
									<td> {
										expr (temperature);
									}
								}
							}
							for-each (descendant::power-information/node()) {
								if ( name() != "") {
									<tr> {
										if ( name() == "power-title") {
											<td colspan="2" id="celltitle"> {
												expr (.);
											}
										}
										else if ( name() == "voltage") {
											<td id="cellright"> {
												expr (reference-voltage);
											}
											<td id="cellleft"> {
												expr (actual-voltage) _ " mV";
											}
										}
									}
								}
							}
							<tr> {
								<td id="celltitle"> {
									expr "Bus Revision";
								}
								<td> {
									expr (bus-revision);
								}
							}
							<tr> {
								<td id="celltitle"> {
									expr "FPGA Revision";
								}
								<td> {
									expr (fpga-revision);
								}
							}
						}
					}
				}
			}
		}
		expr jcs:syslog("daemon.info", "SCRIPT_ACTION_CB_STATUS: Script action taken to show status of the Control Board (CB).");
		var $close-results = jcs:close( $local );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
