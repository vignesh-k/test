/* 
	Lets the user upload a CSV file and outputs its contents. :)
	Proof Of Concept!
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 17.10.2014
	Last Modified By: bcersows
	###999_Javascript_FileUpload.slax;v1.0;2014.10.17
*/

/*
	Changelog:
	----------
	1.0; 17.10.2014: 
		- First version.
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns str = "http://exslt.org/strings";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device[matches(name, '\w{3}J\d{2,3}') or matches(name, '^(bng|BNG).*$')]" */
/* @NAME = "999 Javascript FileUpload" */
/* @DESCRIPTION = "Shows all images Space offers." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}]" */
/* @PROMOTE = "Yes" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $myRpc;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	
	
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
				
				<script> {
					<xsl:text disable-output-escaping="yes">
						"var appendHeader = true;
						
						if (typeof String.prototype.endsWith !== 'function') {
							String.prototype.endsWith = function(suffix) {
								return this.indexOf(suffix, this.length - suffix.length) !== -1;
							};
						}
						if ( !String.prototype.contains ) {
							String.prototype.contains = function() {
								return String.prototype.indexOf.apply( this, arguments ) !== -1;
							};
						}
						
						function handleFiles(files) {
							// Check for the various File API support.
							if (window.FileReader) {
								// FileReader are supported.
								getAsText(files[0]);
							} else {
								alert('FileReader are not supported in this browser.');
							}
						}
						
						function getAsText(fileToRead) {
							//alert(fileToRead.name);
							if ( !fileToRead.name.endsWith( '.csv' ) ) {
								alert( 'Only CSV files accepted.' );
								return false;
							}
							var reader = new FileReader();
							// Read file into memory as UTF-8      
							reader.readAsText(fileToRead);
							// Handle errors load
							reader.onload = loadHandler;
							reader.onerror = errorHandler;
						}

						function loadHandler(event) {
							var csv = event.target.result;
							processData(csv);
						}

						function processData(csv) {
							var allTextLines = csv.split(/\\r?\\n/);
							//alert('First All: ' + allTextLines);
							var lines = [];
							for (var i=0; i<allTextLines.length; i++) {
								/*alert( allTextLines[i] );*/
								if ( allTextLines[i] != '' ) {
									var data = allTextLines[i].split(/[;,]/);
									var tarr = [];
									for (var j=0; j<data.length; j++) {
										tarr.push(data[j]);
									}
									lines.push(tarr);
								}
							}
							console.log(lines);
							outputContent(lines);
						}

						function errorHandler(evt) {
							if(evt.target.error.name == 'NotReadableError') {
								alert('Cannot read file !');
							}
						}
						
						function outputContent(outputArray) {
							var outputHTML = '<table id=\"outputTable\" class=\"xwide\">';
							for ( var i=0; i<outputArray.length; i++ ) {
								outputHTML += '<tr>';
								var innerArr = outputArray[i];
								for ( var j=0; j<innerArr.length; j++ ) {
									// when \"appendHeader\" is set, use THs in the first line.
									if ( i == 0 && appendHeader ) {
										outputHTML += '<th>' + innerArr[j] + '</th>';
									} else {
										outputHTML += '<td>' + innerArr[j] + '</td>';
									}
								}
								outputHTML += '</tr>';
							}
							outputHTML += '</table>';
							console.log( outputHTML );
							this.document.getElementById(\"outputDiv\").innerHTML = outputHTML;
						}
						
						function sayHello() {
							alert('hello');
						}"
					;
				}
			}
			<BODY> {
				copy-of bcersows:insertExportWindowButton();
				copy-of bcersows:insertHeaderBig( $myDevice );
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}

				copy-of bcersows:insertSoftwareInformation( $connection );
				
				<p> {
					<input type="file" id="csvFileInput" onchanges="handleFiles(this.files);" onchange="console.log('Added file. :)');" 
