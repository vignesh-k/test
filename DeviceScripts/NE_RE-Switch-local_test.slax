/*
 * Filename      : NE_RE-Switch-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.1
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Request chassis routing-engine master switch.
 *
 */
 
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns curl extension = "http://xml.libslax.org/curl";
ns func extension = "http://exslt.org/functions";
ns jspace = "http://jspace-utils/asharp@juniper.net";

import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* @CONTEXT = "/device|/device/chassis-inventory/chassis/chassis-module[starts-with(name,"Routing Engine")]" */
/* @NAME = "Initiate RE Switch" */
/* @DESCRIPTION = "Request chassis routing-engine master switch." */
/* @CONFIRMATION = "Are you sure that you want to switch the Routing Engine master?" */
/* @ISLOCAL = "true" */
/* @PASSSPACEAUTHHEADER = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */

var $curl = curl:open();

var $arguments = {
    <argument> {
        <name> "CONTEXT";
        <description> "The context associated with this script.";
    }
}
param $CONTEXT;
param $JSESSIONID;
param $JSESSIONIDSSO;
param $VIPADDRESS;

var $scriptname = "NE_RE-Switch-local.slax";
match / {
	<op-script-results> {
		var $command = {
	    <command> "request chassis routing-engine master switch";
		}
		var $connection = jcs:open();
		/* abort if no connection to local mgd */
		if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
		}
		var $results = jcs:execute( $connection , $command );
		if ($results/..//xnm:error) {
			call rpc_failure($rpc = $results/.., $message = "Error executing command request chassis routing-engine master switch");
			<xsl:message terminate="yes"> ;
		}
		<output> {
			<HTML> {
				<HEAD> {
		    	<title> "Toggle mastership between Routing Engines:";
		    	copy-of jspace:html-style("1");
				}
				<BODY> {
		    	<p> {
		    		copy-of $results;
					}
				}
	    }
		}
		expr jcs:syslog("daemon.info", "SCRIPT_ACTION_RE_SWITCH: Script action taken to switch Routing Engine Master (RE).");
		var $close-results = jcs:close( $connection );
		if ($close-results/..//xnm:error) {
			call rpc_failure($rpc = $close-results/.., $message = "Error closing connection.");
			<xsl:message terminate="yes"> ;
		}

    /* Expand device name from Context Variable */
	var $deviceName = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];

    /* identify the fabric node that the JSESSIONID is associated with */
    var $fabric = jcs:regex("\.(space-[A-Za-z0-9]+):server",$JSESSIONID)[2];


    /* Prepare the API call for determining the device ID */
    /* Build the complete URI */
    var $uri = jspace:server( $fabric _ ":8080" , "/api/space/device-management/devices?filter=(name%20eq%20'" _ $deviceName _ "')" );

    /* Prepare Curl options and html headers */
    var $options = {
      <format> "xml";
      <header name="Accept"> "application/vnd.juniper.iceaaa-manager.bng-devices+xml;version=\"2\"";
      <header name="Cookie"> "JSESSIONID=" _ $JSESSIONID _ ";Path=/;";
      <header name="Cookie"> "JSESSIONIDSSO=" _ $JSESSIONIDSSO _ ";Path=/;";
    }
    /* The API Call for determining the device ID */
    var $api_results := curl:single($uri, $options);
    var $deviceId = $api_results/data/bng-devices/bng-device[name=$deviceName]/id;

    /* If we see a http code not equal to 2xx or if we have an error message in the result, we terminate */
    if ((jcs:regex( ".", $api_results/headers/code)[1] != 2) || ($api_results/error)) {
      <output>"Error in communication found: " _ $api_results/error;
      <output>"Result Code: " _ $api_results/headers/code;
      terminate;
    }


    /* Prepare the API call for invoking a device resync */
    /* Build the complete URI */
    var $uri_resync = jspace:server( $fabric _ ":8080" , "/api/space/device-management/devices/" _ $deviceId _ "/exec-resync" );

    /* Prepare Curl options and html headers */
    var $options_resync = {
      <format> "xml";
      <method> "post";
      <header name="Accept"> "application/vnd.net.juniper.space.device-management.exec-resync+xml;version=\"1\"";
      <header name="Content-Type"> "application/vnd.net.juniper.space.device-management.exec-resync+xml;version=\"1\"";
      <header name="Cookie"> "JSESSIONID=" _ $JSESSIONID _ ";Path=/;";
      <header name="Cookie"> "JSESSIONIDSSO=" _ $JSESSIONIDSSO _ ";Path=/;";
    }

    /* The API Call for invoking a device resync */
    var $api_results_resync = curl:single($uri_resync, $options_resync);

    /* If we see a http code not equal to 2xx or if we have an error message in the result, we terminate */
    if ((jcs:regex( ".", $api_results_resync/headers/code)[1] != 2) || ($api_results_resync/error)) {
      <output>"Error in communication found: " _ $api_results_resync/error;
      <output>"Result Code: " _ $api_results_resync/headers/code;
      terminate;
    }
  }
}


/* function to return a full url */
<func:function name="jspace:server">
{
    param $server;
    param $uri;
    var $url = "http://" _ $server _ $uri;
    <func:result select="string( $url )">;
}


template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}

