/* 
	Script to simulate the "show system processes" CLI command.
		show system processes summary
		show system processes extensive | match <PID>
*/

/*
	Author: bcersows
	Version: 1.01
	Date: 15.04.2014
	Last Modified By: bcersows
	###Script_showSystemProcesses_Betrieb.slax;v1.0;2014.04.15
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass System Processes" */
/* @DESCRIPTION = "Fragt Informationen zu Prozessen von einem Device ab. Per 'match' ist es möglich zu filtern." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'match','defaultvalue':''}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "match";
		<description> "Permits to filter the output. Part to search for. '*' prints out all processes.";
	}
}
param $CONTEXT;
param $match;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();

	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				/*copy-of bcersows:insertCurrentTime();*/
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				/*<div id="floatingButton" onclick="toggleAll(this);"> { 
					expr "Alle oeffnen.";
				}*/
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				/*var $rpc = { <command> {
						expr "show system processes ";
						if ( $match ) {
							expr " extensive | match " _ $match;
						} else {
							expr "summary";
						}
						expr " | display xml";
					}
				}*/
				var $rpc = { <command> {
						expr "show system processes summary"; 
					}
				}
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				<div> {
					<p class="bold subheader">{
						<span class="left"> { expr "Processes Summary"; }
					}
					<div> {						
						mvar $startedTable = false(); 
						mvar $lastLineEmpty = true();
						var $temp = jcs:break-lines( $results );
						<table id="resultsTable" class="xwide"> {
							for-each ( $temp ) {
								if ( not( $startedTable ) ) {
									if ( starts-with( normalize-space( . ), "PID " ) ) { set $startedTable = true(); }
								}
								if ( $startedTable ) {
									if ( contains( ., " " ) ) {
										var $innerTemp = str:split( ., " " );
										<tr> {
											for-each ( $innerTemp ) {
												<td> { expr .; }
											}
										}
									}
								} else {
									var $normalized = normalize-space( . );
									if ( $lastLineEmpty  && $normalized == "" ) {
									} else {
										set $lastLineEmpty = false();
										if ( $normalized == "" ) {
											set $lastLineEmpty = true();
										} 
										expr "" _ . _ ""; <br>;
									}
								}
							}
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				if ( $match ) {
					var $rpc2 = { <command> {
							expr "show system processes extensive | match " _ $match _ "";
						}
					}
					set $results = jcs:execute( $connection, $rpc2 );
					call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
					
					<div> {
						<p class="bold subheader">{
							<span class="left"> { expr "Matched Processes"; }
						}
						<p> {
							expr "Match command was \"";
							<span class="italic"> { expr $rpc2; } 
							expr "\".";
						}
						<div> {							
							mvar $startedTable2 = false(); 
							mvar $lastLineEmpty2 = true();
							mvar $isHeaderLine = false();
							mvar $lastColumnContent = "";
							mvar $columnCounter = 0;
							var $temp = jcs:break-lines( $results );
							<table id="resultsTable2" class="xwide"> {
								for-each ( $temp ) {
									set $lastColumnContent = "";
									/* Check for beginning of table, as requests sends back some empty lines at the beginning. */
									if ( not( $startedTable2 ) ) {
										if ( starts-with( normalize-space( . ), "PID " ) ) { 
											set $startedTable2 = true(); 
											set $isHeaderLine = true();
										}
									}
									if ( $startedTable2 ) {
										if ( contains( ., " " ) ) {
											if ( contains( ., $match ) || $match = "*" || ( starts-with( normalize-space( . ), "PID " ) && $isHeaderLine ) ) {
												var $innerTemp = str:split( ., " " );
												<tr> {
													for-each ( $innerTemp ) {
														/*<td> { expr .; }*/
														/* Count the amount of columns. */
														if ( $isHeaderLine ) {
															set $columnCounter = $columnCounter + 1;
															<th class="alignLeft"> { expr .; }
														} else {
															/* When line is longer than header line, put rest of it in one column. */
															if ( position() > $columnCounter - 1 ) {
																set $lastColumnContent = $lastColumnContent _ " " _ .;
															} else {
																<td> { expr .; }
															}
														}
													}
													if ( $lastColumnContent != "" ) {
														<td> { expr $lastColumnContent; }
													}
													/* Only get column count of head line. */
													if ( $isHeaderLine ) {
														set $isHeaderLine = false();
													}
												}
											}
										}
									} else {
										/* Cutting out empty lines. */
										var $normalized = normalize-space( . );
										if ( $lastLineEmpty2  && $normalized == "" ) {
										} else {
											set $lastLineEmpty2 = false();
											if ( $normalized == "" ) {
												set $lastLineEmpty2 = true();
											} 
											/*expr "" _ . _ ""; <br>;*/
										}
									}
								}
							}
						}
						
						copy-of bcersows:insertBackButton();
					}
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.01";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
