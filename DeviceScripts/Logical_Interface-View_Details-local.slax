/*
 * Filename      : Logical_Interface-View_Details-local.slax
 * Author        : Andrew Sharp asharp@juniper.net
 * Platform      : Junos Space
 * Release       : 13.1P2
 * Version       : 1.0
 * SVN INFO      :
 *
 * $Rev: 36133 $
 * $Date: 2014-04-24 14:14:09 +0100 (Thu, 24 Apr 2014) $
 * $Author: asharp $
 * 
 * Description   : Display Logical Interface configuration.
 *
 */

version 1.1;

/* Namespace declarations */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns str = "http://exslt.org/strings";
ns exsl extension = "http://exslt.org/common";

/* Imports */
import "../import/junos.xsl";
import "lc-jspace-lib.slax";

/* @CONTEXT = "/device/configuration/interfaces/interface/unit" */
/* @NAME = "View Details" */
/* @DESCRIPTION = "Display Logical Interface configuration." */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @ISLOCAL = "true" */
/* @PASSDEVICECREDENTIALS = "true" */

/* Global variables */
var $scriptname = "Logical_Interface-View_Details-local.slax";
var $results;
var $regex;
var $result-regex;
var $lines;
var $interfaces;
var $interface-regex;
var $devicename;
var $physintname;
var $logintnames;
var $splitCredentials; /* array of all credentials        */
var $splitCredential;  /* array of one set of credentials */

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "The context associated with this script.";
	}
}
param $CONTEXT;

match / {
	<op-script-results> {
		mvar $count = "0";    /*count of devices    */
		mvar $host-compare;   /* used for comparing */

		mvar $hostname;       /* credentials of user@ip           */
		mvar $splitHostname;  /* array of user and ip credentials */
		mvar $ip;             /* credentials ip address           */
		mvar $user;           /* credentials username             */
		mvar $password;       /* credentials password             */

		/* Split interfaces and Credentials */
		var $interfaces = jcs:split( "\\|", $CONTEXT );
		var $splitCredentials = str:split( $credentials , "\\;" );

		<output> {
			<HTML> {
				<HEAD> {
					<title> "Interface Configuration";
					copy-of jspace:html-style("10");
				}
				<BODY> {
		    	/* Loop through each physical interface */
		    	for-each ($interfaces) {
		        var $interface-regex = jcs:regex( "/device(\\[.*\\])/configuration/interfaces/interface(\\[.*\\])/unit(\\[.*\\])", (.) );
		        var $devicename = str:replace(str:replace($interface-regex[2],"[name=\"",""),"\"]","");
		        var $physintname = str:replace(str:replace(str:replace($interface-regex[3],"[name=",""),"]",""),"\"","");
		        var $logintnames = jcs:split("name=",str:replace(str:replace(str:replace(str:replace($interface-regex[4]," or ",""),"[",""),"]",""),"\"",""));
					<p> {
						/* Loop through each logical interface */
						for-each ($logintnames) {
							if( position() > 1) {
								/* Show Interface Configuration */
								/* build command to executed */
								var $command = {
									<command> "show configuration interfaces " _ $physintname _ "." _ (.);
								}
				
								/* First time pass store the first devicename in $host-compare */
								/* Increase the count of unique devices seen to 1              */
								if ($count = "0") {
									set $host-compare = $devicename;
									set $count = $count + 1;
								}
				
								/* If the devicename is different from the previous loop  */
								/* then we must be using a new device, increase the count */
								/* and save the current devicename as the host to compare */
								if ( $host-compare != $devicename ) {
									set $count = $count + 1;
									set $host-compare = $devicename;
								}
				
								/* Using the count of unique devices found, the correct connection */
								/* parameters to be used can be derived from $splitCredentials     */
								var $splitCredential = str:split( $splitCredentials[$count] , "\\:" );
								set $hostname = $splitCredential[1];
								set $password = $splitCredential[2];
								set $splitHostname = str:split( $hostname[1] , "\@");
								set $user = $splitHostname[1];
								set $ip = $splitHostname[2];
								var $connection = jcs:open( $ip , $user , $password );
								/* abort if no connection to local mgd */
								if ($connection/..//xnm:error) {
									call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
									<xsl:message terminate="yes"> ;
								}
								var $results = jcs:execute($connection , $command);
								if ($results/..//xnm:error) {
									call rpc_failure($rpc = $results/.., $message = "Error executing command show configuration interfaces");
									<xsl:message terminate="yes"> ;
								}
								var $close-results = jcs:close ( $connection );
								if ($close-results/..//xnm:error) {
									call rpc_failure($rpc = $close-results/.., $message = "Error closing connection");
									<xsl:message terminate="yes"> ;
								}

								/* split into lines */
								var $lines = jcs:break-lines( $results/configuration-output );

								<p style="font-weight:bolder;background-color:#646D7E;color:#fff"> {
									expr "Interface configuration for " _ $devicename _ " : " _ $physintname _ "." _ (.);
								}
								<p> {
								}
								for-each ($lines) {
									if( position() > 1) {
										<p id="configlines"> {
											expr (.);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	expr jcs:syslog("daemon.info", "SCRIPT_ACTION_LIF_CONFIG: Script action taken to show logical interface configuration.");
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
  expr jcs:syslog("daemon.error", $message);
  for-each ($rpc//xnm:error) {
    expr jcs:syslog("daemon.error", message);
  }
}
