/* 
	Script to test the AAA functionality.			
*/

/*
	Author: bcersows
	Version: 1.02b
	Date: 28.04.2014
	Last Modified By: bcersows
	###Script_testPPP_Betrieb.slax;v1.02b;2014.04.28
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass Test AAA PPP" */
/* @DESCRIPTION = "Führt einen AAA-Test aus und listet Ergebnisse auf." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'},{'name':'user','defaultvalue':'test'},{'name':'password','defaultvalue':'test'},{'name':'lineId','defaultvalue':'DEU.DTAG.BICOTEST01'}]" */

mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "user";
		<description> "User to use.";
	}
	<argument> {
		<name> "password";
		<description> "Password for user.";
	}
	<argument> {
		<name> "lineId";
		<description> "LineId to test.";
	}
}
param $CONTEXT;
param $password;
param $user;
param $lineId;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {

				copy-of bcersows:insertHeaderBig( $myDevice );
				
				copy-of bcersows:insertCompletionTest();
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = <get-ppp-user-aaa-test-result> { 
					<user> $user; 
					<password> $password;
					<agent-remote-id> $lineId;
				};
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				<div> {
					<p class="bold">{
						expr "AAA Test Results";
					}
					
					mvar $tableOpened = false();
					if ( $results/aaa-test-status[ 1 ] == "Authentication Deny" ) {	/* when auth denied */
						for-each ( $results/aaa-test-status ) {
							<span style="padding: 5%;"> {
								expr .; <br>;
							}
						}
					} else {	/* if auth success */
						<span style="padding: 5%;"> {
							expr $results/aaa-test-status[ 1 ];
						}
						<table class="wide"> {
							<tr> {
								<th style="width: 40%; text-align: left;"> { expr "Attribute Name"; }
								<th style="width: 60%; text-align: left;"> { expr "Value"; }
							}
							for-each ( $results/radius-server-attribute-name ) {
								var $pos = position(); var $tagname = name ( . );
								<tr> {
									<td> { expr str:replace( ., " -", "" ); }
									if ( . = "User Password -" ) {
										<td class="italic"> { expr "Password censored by Script"; }
									} else {
										<td> { expr $results/radius-server-attribute-value[ $pos ]; }
									}
								}
							}
							for-each ( $results/aaa-test-status ) {
								if ( position() > 2 ) {
									<tr> {
										<td colspan="2"> .;
									}
								}
							}
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					<span class="left italic unselectable"> "vs. 1.02b";
					expr "Dauer der Ausf"; <xsl:text disable-output-escaping="yes"> "&uuml;"; expr "hrung: " _ $duration _ "s. ";
				}
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
