/* 
	Event Script for NSO Stuttgart. 
*/

/*
	Author: bcersows
	Version: 1.0
	Date: 03.04.2014
	Last Modified By: bcersows
	###Script_firewallCheck_Stuttgart.slax;v1.0;2014.04.03
*/

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Check Firewall" */
/* @DESCRIPTION = "Checks Firewall. Disables port, when no response. Only for Stuttgart's MX480." */
/* @ISLOCAL = "false" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'host','defaultvalue':'10.201.100.100'},{'name':'interfaceName','defaultvalue':'ge-5/0/5'}]" */

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf. Kann mehrere Devices enthalten.";
	}
	<argument> {
		<name> "interfaceName";
		<description> "Name of the interface that will be disabled.";
	}
	<argument> {
		<name> "host";
		<description> "Target IP to ping.";
	}
}
param $CONTEXT;
param $interfaceName;
param $host;

match / {
	<event-script-results> {
		<output> {
					
			var  $pingRpc = <ping> {
				<rapid>;
				<host> $host;
				<count> 5;
			}
			
			var $connection = jcs:open( );

			if ($connection/..//xnm:error) {
				call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
				<xsl:message terminate="yes"> ;
			}
			
			var $results = jcs:execute($connection , $pingRpc);
			
			if ($results/..//xnm:error) {
				call rpc_failure($rpc = $results/.., $message = "Error executing ping command from Script Script_firewallCheck_Stuttgart.slax.");
				expr jcs:close( $connection );
				<xsl:message terminate="yes"> ;
			}
			
			/* When no response, then disable interface. */
			if ( $results/ping-failure ) {
				expr "Script_firewallCheck_Stuttgart.slax received no ping response from firewall " _ $host _ "."; expr "\n";
				expr jcs:syslog("external.info", "Script_firewallCheck_Stuttgart.slax received no ping response from firewall " _ $host _ ".");
			} else {
				expr "Script_firewallCheck_Stuttgart.slax successful."; expr "\n";
				expr jcs:syslog("external.info", "Script_firewallCheck_Stuttgart.slax successful.");
				expr jcs:close( $connection );
				<xsl:message terminate="yes"> "Script_firewallCheck_Stuttgart.slax successful.";
			}
			
			/* Declare config change and execute it. */
			var $interfaceDisableRpc = <load-configuration action="merge"> {
				<configuration> {
					<interfaces> {
						<interface> {
							<name> $interfaceName;
							<disable>;
						}
					}
				}
			}
			
			var $configResults = jcs:execute( $connection, $interfaceDisableRpc );
			
			/* If no config error, commit the configuration. */
			if ( $configResults//self::xnm:error ) {
				expr "Script_firewallCheck_Stuttgart.slax could not change configuration: " _ $configResults//self::xnm:error _ "."; expr "\n";
				expr jcs:syslog("external.error", "Script_firewallCheck_Stuttgart.slax could not change configuration: " _ $configResults//self::xnm:error _ ".");
				expr jcs:close( $connection );
				<xsl:message terminate="yes"> "Script_firewallCheck_Stuttgart.slax could not change configuration: " _ $configResults//self::xnm:error _ ".";
			} else {
				var $commit-configuration = <commit-configuration> {
					<log> "Script_firewallCheck_Stuttgart.slax changed configuration to disable interface " _ $interfaceName _ ".";
				}
				var $commit-results = jcs:execute($connection, $commit-configuration);
				expr "Script_firewallCheck_Stuttgart.slax tried to commit configuration."; expr "\n";
				expr jcs:syslog("external.info", "Script_firewallCheck_Stuttgart.slax tried to commit configuration.");
				if( $commit-results//self::xnm:error ) {
					expr "Script_firewallCheck_Stuttgart.slax could not commit configuration. Rolling back."; expr "\n";
					expr jcs:syslog("external.error", "Script_firewallCheck_Stuttgart.slax could not commit configuration. Rolling back.");
					var $rollbackRPC = <load-configuration rollback=0>;
					var $rb-results = jcs:execute( $connection, $rollbackRPC );
					if( $rb-results//self::xnm:error ) {
						expr "Script_firewallCheck_Stuttgart.slax could not roll back."; expr "\n";
						expr jcs:syslog("external.error", "Script_firewallCheck_Stuttgart.slax could not roll back.");
					} else {
						expr "Script_firewallCheck_Stuttgart.slax successfully rolled back."; expr "\n";
						expr jcs:syslog("external.info", "Script_firewallCheck_Stuttgart.slax successfully rolled back.");
					}
				}
			}
			
			/* Close the connection. */
			expr jcs:close( $connection );
		}
	}
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
	expr jcs:syslog("daemon.error", $message);
	expr $message _ "\n";
	for-each ($rpc//xnm:error) {
		expr jcs:syslog("daemon.error", .);
		expr . _ "\n";
	}
}