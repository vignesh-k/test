/* 
Script to simulate the "show system core-dumps" command. Deletes core-dumps older than x days.			
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";

ns bcersows = "http://bcersows@telekom.de";
import "Space_Library-Local.slax";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Looking Glass Delete Core-Dumps" */
/* @DESCRIPTION = "Listet alle core-dumps auf, loescht diejenigen, die aelter als $amountDays Tage sind." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "SINGLEEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'DEVICE','defaultvaluexpath':'/device/name/text()'}, {'name':'amountDays','defaultvalue':''}]" */

var $spaceAddress = "127.0.0.1";
var $authorization = "Basic " _ slax:base64-encode("nbisu:SU2013!2su");
mvar $counter = 0;

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
	<argument> {
		<name> "amountDays";
		<description> "If filled core-dumps older than this days will be deleted.";
	}
}
param $CONTEXT;
param $amountDays;

match / {
<op-script-results> {
/*template junoscript() {*/
	mvar $results;
	mvar $configRpcs;
	mvar $unlock-results;
	
	mvar $localtime = date:date-time();
	
	var $myDevice = {
		if ( false() ) {
			expr $DEVICE;
		} else {
			/*if ( jcs:regex( "/device\\[name=\".*\"\\]/configuration/access/radius-server\\[name=\".*\"\\]", $CONTEXT ) ) {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\]/configuration/access/radius-server\\[name=\"(.*)\"\\]", $CONTEXT )[2];
			} else {
				expr jcs:regex( "/device\\[name=\"(.*)\"\\].*", $CONTEXT )[2];
			}*/
			expr jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", $CONTEXT )[2];
		}
	}
	
	/*
	*	Get configuration.
	*/
	
	var $connection = jcs:open();
	
	<output> {
		<HTML> {
			<HEAD> {
				<title> "Informationen ueber BNG " _ $myDevice _ ".";
				copy-of bcersows:insertCSS();
				copy-of bcersows:insertJS();
			}
			<BODY> {
				copy-of bcersows:insertHeaderBig( $myDevice );
				/*copy-of bcersows:insertCurrentTime();*/
				
				if ( $connection ) { } else {	
					<div class="error"> {
						expr "Konnte keine Verbindung aufbauen."; <br>;
						expr "Abbruch folgt.";
					}
				}	
				
				/*<div id="floatingButton" onclick="toggleAll(this);"> { 
					expr "Alle oeffnen.";
				}*/
				
				copy-of bcersows:insertSoftwareInformation( $connection );
				
				var $rpc = "get-system-core-dumps";
				set $results = jcs:execute( $connection, $rpc );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );
				
				/*<p class="bold hiddenButton" onclick="toggle(this, 2);"> {
					expr "Hardware";
					<span id="hiddenButton_2_span" class="hiddenButtonSpan"> { expr ">"; }
				}
				<div id="hiddenDiv_2" class="hidden" style="display: none;"> {*/
				<div> {
					<p class="bold">{
						expr "Core-Dumps";
					}
					
					if ( $amountDays && $amountDays < 0 ) {
						<div class="error"> {
							expr "The value for $amountDays is unfortunately below zero - which does not make sense at all. Please try again.";
						}
					}
					
					if ( $results/directory/file-information ) {
						<table class="xwide" border="1"> {
							<tr> {
								<th> { expr "Name"; }
								<th> { expr "Owner"; }
								<th> { expr "Group"; }
								<th> { expr "Size (in MByte)"; }
								<th> { expr "Date"; }
								<th> { expr "Deleted?"; }
							}
							
							var $currDay = jcs:regex( "P([0-9]+).*", date:duration() )[2];
							for-each ( $results/directory/file-information ) {
								var $fileDay = jcs:regex( "P([0-9]+).*", date:duration(./file-date) )[2];
								<tr> {
									<td> { expr ./file-name; }
									<td class="alignCenter"> { expr ./file-owner; }
									<td class="alignCenter"> { expr ./file-group; }
									<td class="alignRight" title="" _ ./file-size _ " Byte"> { expr format-number( ./file-size div 1024 div 1024, "00###,###.000" ); }
									if ( $amountDays && $amountDays >= 0 && ( $fileDay < ( $currDay - $amountDays ) ) ) {
										<td class="alignRight majorError" title="Unix Timestamp: " _ ./file-date _ ". Older than " _ $amountDays _ " days."> { expr ./file-date/@junos:format; }
										
										var $deleteCmd = {
											<file-delete> {
												<path> ./file-name;
											}
										}
										var $deleteResults = jcs:execute( $connection, $deleteCmd );
										if( $deleteResults//self::xnm:error ) {
											/*expr "Error while copying file " _ ./file-name _ ": "; <br>;*/
											mvar $errors = "";
											for-each ( $deleteResults//self::xnm:error ) {
												/*expr " - " _ .; <br>;*/
												set $errors = $errors _ . _ " ";
											}
											<td class="majorError" style="text-align: center;" title="There were errors: " _ $errors _ "."> { expr "No"; }
										} else {
											<td class="infoError" style="text-align: center;"> { expr "Yes"; }
										}	
										
									} else {
										<td class="alignRight" title="Unix Timestamp: " _ ./file-date _ "."> { expr ./file-date/@junos:format; }
									}
								}
							}
							/*expr $results;*/
						}
					} else {
						<p> {
							expr "There are no core-dumps at the moment.";
						}
					}
					if ( $results/directory/output ) {
						<div> {
							expr "There were some other outputs:"; <br>;
							for-each ( $results/directory/output ) {
								expr .; <br>;
							}
						}
					}
					
					copy-of bcersows:insertBackButton();
				}
				
				var $duration = date:seconds() - date:seconds( $localtime );
				<div class="wholeLine"> {
					expr "Dauer der Ausfuehrung: " _ $duration _ "s. ";
				}
				
				/*set $configRpcs = <clear-aaa-statistics-table> { <accounting>; }
				set $results = jcs:execute( $connection, $configRpcs );
				call checkErrors( $resultsNodeSet = $results, $connection, $msg = "Fehler." );*/
			}
		}
	}

	set $unlock-results = jcs:execute( $connection, "unlock-database" );
	expr jcs:close( $connection );
	
}
}

template checkErrors ( $resultsNodeSet, $msg = "", $connection ) {
	if( $resultsNodeSet//self::xnm:error ) {
		copy-of bcersows:outputErrorDiv($resultsNodeSet, $msg);
	}
}
