/* 
	Gets the engine-id of BNGs. 
*/
/* 
	Author: bcersows
	Version: 1.1
	Date: 27.02.2014
	Last Modified By: bcersows	
	###Script_getEngineID.slax;v1.0;2014.02.27	
*/

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
/*ns slax = "http://xml.libslax.org/slax";*/
ns exsl extension = "http://exslt.org/common";
ns curl extension = "http://xml.libslax.org/curl";
ns date = "http://exslt.org/dates-and-times";
ns str = "http://exslt.org/strings";

import "../import/junos.xsl";

/* @CONTEXT = "/device" */
/* @NAME = "Engine-ID auslesen" */
/* @DESCRIPTION = "Liest die Engine-ID(s) eines oder mehrerer Devices aus der Konfiguration und gibt diese aus." */
/* @ISLOCAL = "true" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @VARIABLECONTEXT = "[{'name':'LFM-INTERFACES','parameterscope':'devicespecific','selectionvaluesxpath':'/device/configuration/protocols/oam/ethernet/link-fault-management/interface/name/text()'}]" */
/* @PASSDEVICECREDENTIALS = "true" */

var $arguments = {
	<argument> {
		<name> "CONTEXT";
		<description> "Context beim Aufruf.";
	}
}
param $CONTEXT;
param $credentials;

mvar $counter = 0;
mvar $output = "";

match / {
	<op-script-results> {
		var $get-rpc = <get-snmp-v3-general-information>;
		
		mvar $count = 1;
		mvar $hostname;       /* credentials of user@ip           */
		mvar $splitHostname;  /* array of user and ip credentials */
		mvar $ip;             /* credentials ip address           */
		mvar $user;           /* credentials username             */
		mvar $password;       /* credentials password             */
		
		/* Split interfaces and Credentials */
		var $devices = jcs:split("\\|", $CONTEXT);
		var $splitCredentials = str:split( $credentials , "\\;" );
		
		/*<output> {*/
		
		var $output = {
			<results> {
				/* Loop through every device */
				for-each ( $devices ) {
					/* Using the count of unique devices found, the correct connection */
					/* parameters to be used can be derived from $splitCredentials     */
					
					var $myDevice = jcs:regex( "/device\\[name=\"([^\"]*)\"\\].*", (.) )[2];
					
					/* Using the count of unique devices found, the correct connection */
					/* parameters to be used can be derived from $splitCredentials     */
					var $splitCredential = str:split( $splitCredentials[$count] , "\\:" );
					set $count = $count + 1;
					
					set $hostname = $splitCredential[1];
					set $password = $splitCredential[2];
					set $splitHostname = str:split( $hostname[1] , "\@");
					set $user = $splitHostname[1];
					set $ip = $splitHostname[2];
					
					var $connection = jcs:open( $ip , $user , $password );

					if ($connection/..//xnm:error) {
						for-each ( $connection//self::xnm:error ) {
							/*<errors> .;*/
							expr "error for BNG " _ $myDevice;
						}
					}

					var $results = jcs:execute($connection , $get-rpc);
					if ($results/..//xnm:error) {
						for-each ( $connection//self::xnm:error ) {
							/*<errors> .;*/
							expr "error for BNG " _ $myDevice;
						}
					}
					var $close-results = jcs:close ( $connection );
					if ($close-results/..//xnm:error) {
						for-each ( $connection//self::xnm:error ) {
							/*<errors> .;*/
							expr "error for BNG " _ $myDevice;
						}
					}

					/*expr "\tName ist " _ $results/snmp-v3-general-information/snmp-v3-engine-information/engine-id _".\n";*/
					
					var $xml = <result> {
						<hostname> $myDevice;
						<engine-id> "" _ $results/snmp-v3-general-information/snmp-v3-engine-information/engine-id _"";
					}
					copy-of $xml;
					/*expr "Engine-ID fuer " _ $results/snmp-v3-general-information/snmp-v3-engine-information/engine-id _".";*/

				}
			}
		}
		<output> {
			copy-of $output;
		}	
	}
}
